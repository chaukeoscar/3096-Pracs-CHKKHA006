
Prac2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003304  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  080033c4  080033c4  000133c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800351c  0800351c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800351c  0800351c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800351c  0800351c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800351c  0800351c  0001351c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003520  08003520  00013520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003524  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  20000070  08003594  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  08003594  000201b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aac2  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001852  00000000  00000000  0002ab5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000900  00000000  00000000  0002c3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000858  00000000  00000000  0002ccb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001198d  00000000  00000000  0002d508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c071  00000000  00000000  0003ee95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00068f37  00000000  00000000  0004af06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b3e3d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002334  00000000  00000000  000b3e90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080033ac 	.word	0x080033ac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080033ac 	.word	0x080033ac

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000246:	b083      	sub	sp, #12
 8000248:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800024a:	f000 fba9 	bl	80009a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800024e:	f000 f835 	bl	80002bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000252:	f000 f905 	bl	8000460 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000256:	f000 f893 	bl	8000380 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800025a:	f000 f8d1 	bl	8000400 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  print("Welcome to Practical 2: Introduction to BCOS – Delays and I2C\r\n");
 800025e:	4b13      	ldr	r3, [pc, #76]	; (80002ac <main+0x68>)
 8000260:	0018      	movs	r0, r3
 8000262:	f000 f967 	bl	8000534 <print>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  getTime();
 8000266:	f000 f995 	bl	8000594 <getTime>
	  sprintf(buffer, "Time: %02d:%02d:%02d Epoch Time: %d\r", time.hour, time.minutes, time.seconds, epochFromTime(time));
 800026a:	4b11      	ldr	r3, [pc, #68]	; (80002b0 <main+0x6c>)
 800026c:	789b      	ldrb	r3, [r3, #2]
 800026e:	001d      	movs	r5, r3
 8000270:	4b0f      	ldr	r3, [pc, #60]	; (80002b0 <main+0x6c>)
 8000272:	785b      	ldrb	r3, [r3, #1]
 8000274:	001e      	movs	r6, r3
 8000276:	4b0e      	ldr	r3, [pc, #56]	; (80002b0 <main+0x6c>)
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	001c      	movs	r4, r3
 800027c:	4b0c      	ldr	r3, [pc, #48]	; (80002b0 <main+0x6c>)
 800027e:	6818      	ldr	r0, [r3, #0]
 8000280:	6859      	ldr	r1, [r3, #4]
 8000282:	f000 f9e7 	bl	8000654 <epochFromTime>
 8000286:	0003      	movs	r3, r0
 8000288:	490a      	ldr	r1, [pc, #40]	; (80002b4 <main+0x70>)
 800028a:	480b      	ldr	r0, [pc, #44]	; (80002b8 <main+0x74>)
 800028c:	9301      	str	r3, [sp, #4]
 800028e:	9400      	str	r4, [sp, #0]
 8000290:	0033      	movs	r3, r6
 8000292:	002a      	movs	r2, r5
 8000294:	f002 fc20 	bl	8002ad8 <siprintf>
	  print(buffer);
 8000298:	4b07      	ldr	r3, [pc, #28]	; (80002b8 <main+0x74>)
 800029a:	0018      	movs	r0, r3
 800029c:	f000 f94a 	bl	8000534 <print>
	  HAL_Delay(1000);
 80002a0:	23fa      	movs	r3, #250	; 0xfa
 80002a2:	009b      	lsls	r3, r3, #2
 80002a4:	0018      	movs	r0, r3
 80002a6:	f000 fbdf 	bl	8000a68 <HAL_Delay>
  {
 80002aa:	e7dc      	b.n	8000266 <main+0x22>
 80002ac:	080033c4 	.word	0x080033c4
 80002b0:	2000015c 	.word	0x2000015c
 80002b4:	08003408 	.word	0x08003408
 80002b8:	20000164 	.word	0x20000164

080002bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002bc:	b590      	push	{r4, r7, lr}
 80002be:	b097      	sub	sp, #92	; 0x5c
 80002c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c2:	2428      	movs	r4, #40	; 0x28
 80002c4:	193b      	adds	r3, r7, r4
 80002c6:	0018      	movs	r0, r3
 80002c8:	2330      	movs	r3, #48	; 0x30
 80002ca:	001a      	movs	r2, r3
 80002cc:	2100      	movs	r1, #0
 80002ce:	f002 fbfb 	bl	8002ac8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d2:	2318      	movs	r3, #24
 80002d4:	18fb      	adds	r3, r7, r3
 80002d6:	0018      	movs	r0, r3
 80002d8:	2310      	movs	r3, #16
 80002da:	001a      	movs	r2, r3
 80002dc:	2100      	movs	r1, #0
 80002de:	f002 fbf3 	bl	8002ac8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	0018      	movs	r0, r3
 80002e6:	2314      	movs	r3, #20
 80002e8:	001a      	movs	r2, r3
 80002ea:	2100      	movs	r1, #0
 80002ec:	f002 fbec 	bl	8002ac8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002f0:	0021      	movs	r1, r4
 80002f2:	187b      	adds	r3, r7, r1
 80002f4:	2202      	movs	r2, #2
 80002f6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	2201      	movs	r2, #1
 80002fc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	2210      	movs	r2, #16
 8000302:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000304:	187b      	adds	r3, r7, r1
 8000306:	2202      	movs	r2, #2
 8000308:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800030a:	187b      	adds	r3, r7, r1
 800030c:	2200      	movs	r2, #0
 800030e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000310:	187b      	adds	r3, r7, r1
 8000312:	22a0      	movs	r2, #160	; 0xa0
 8000314:	0392      	lsls	r2, r2, #14
 8000316:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000318:	187b      	adds	r3, r7, r1
 800031a:	2200      	movs	r2, #0
 800031c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031e:	187b      	adds	r3, r7, r1
 8000320:	0018      	movs	r0, r3
 8000322:	f001 fa57 	bl	80017d4 <HAL_RCC_OscConfig>
 8000326:	1e03      	subs	r3, r0, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800032a:	f000 f9f7 	bl	800071c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032e:	2118      	movs	r1, #24
 8000330:	187b      	adds	r3, r7, r1
 8000332:	2207      	movs	r2, #7
 8000334:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000336:	187b      	adds	r3, r7, r1
 8000338:	2202      	movs	r2, #2
 800033a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033c:	187b      	adds	r3, r7, r1
 800033e:	2200      	movs	r2, #0
 8000340:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000342:	187b      	adds	r3, r7, r1
 8000344:	2200      	movs	r2, #0
 8000346:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000348:	187b      	adds	r3, r7, r1
 800034a:	2101      	movs	r1, #1
 800034c:	0018      	movs	r0, r3
 800034e:	f001 fd5b 	bl	8001e08 <HAL_RCC_ClockConfig>
 8000352:	1e03      	subs	r3, r0, #0
 8000354:	d001      	beq.n	800035a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000356:	f000 f9e1 	bl	800071c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	2220      	movs	r2, #32
 800035e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000360:	1d3b      	adds	r3, r7, #4
 8000362:	2200      	movs	r2, #0
 8000364:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000366:	1d3b      	adds	r3, r7, #4
 8000368:	0018      	movs	r0, r3
 800036a:	f001 fe9f 	bl	80020ac <HAL_RCCEx_PeriphCLKConfig>
 800036e:	1e03      	subs	r3, r0, #0
 8000370:	d001      	beq.n	8000376 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000372:	f000 f9d3 	bl	800071c <Error_Handler>
  }
}
 8000376:	46c0      	nop			; (mov r8, r8)
 8000378:	46bd      	mov	sp, r7
 800037a:	b017      	add	sp, #92	; 0x5c
 800037c:	bd90      	pop	{r4, r7, pc}
	...

08000380 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000384:	4b1b      	ldr	r3, [pc, #108]	; (80003f4 <MX_I2C1_Init+0x74>)
 8000386:	4a1c      	ldr	r2, [pc, #112]	; (80003f8 <MX_I2C1_Init+0x78>)
 8000388:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800038a:	4b1a      	ldr	r3, [pc, #104]	; (80003f4 <MX_I2C1_Init+0x74>)
 800038c:	4a1b      	ldr	r2, [pc, #108]	; (80003fc <MX_I2C1_Init+0x7c>)
 800038e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000390:	4b18      	ldr	r3, [pc, #96]	; (80003f4 <MX_I2C1_Init+0x74>)
 8000392:	2200      	movs	r2, #0
 8000394:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000396:	4b17      	ldr	r3, [pc, #92]	; (80003f4 <MX_I2C1_Init+0x74>)
 8000398:	2201      	movs	r2, #1
 800039a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800039c:	4b15      	ldr	r3, [pc, #84]	; (80003f4 <MX_I2C1_Init+0x74>)
 800039e:	2200      	movs	r2, #0
 80003a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003a2:	4b14      	ldr	r3, [pc, #80]	; (80003f4 <MX_I2C1_Init+0x74>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003a8:	4b12      	ldr	r3, [pc, #72]	; (80003f4 <MX_I2C1_Init+0x74>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003ae:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <MX_I2C1_Init+0x74>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003b4:	4b0f      	ldr	r3, [pc, #60]	; (80003f4 <MX_I2C1_Init+0x74>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003ba:	4b0e      	ldr	r3, [pc, #56]	; (80003f4 <MX_I2C1_Init+0x74>)
 80003bc:	0018      	movs	r0, r3
 80003be:	f000 fdb9 	bl	8000f34 <HAL_I2C_Init>
 80003c2:	1e03      	subs	r3, r0, #0
 80003c4:	d001      	beq.n	80003ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003c6:	f000 f9a9 	bl	800071c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003ca:	4b0a      	ldr	r3, [pc, #40]	; (80003f4 <MX_I2C1_Init+0x74>)
 80003cc:	2100      	movs	r1, #0
 80003ce:	0018      	movs	r0, r3
 80003d0:	f001 f968 	bl	80016a4 <HAL_I2CEx_ConfigAnalogFilter>
 80003d4:	1e03      	subs	r3, r0, #0
 80003d6:	d001      	beq.n	80003dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003d8:	f000 f9a0 	bl	800071c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003dc:	4b05      	ldr	r3, [pc, #20]	; (80003f4 <MX_I2C1_Init+0x74>)
 80003de:	2100      	movs	r1, #0
 80003e0:	0018      	movs	r0, r3
 80003e2:	f001 f9ab 	bl	800173c <HAL_I2CEx_ConfigDigitalFilter>
 80003e6:	1e03      	subs	r3, r0, #0
 80003e8:	d001      	beq.n	80003ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003ea:	f000 f997 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003ee:	46c0      	nop			; (mov r8, r8)
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	2000008c 	.word	0x2000008c
 80003f8:	40005400 	.word	0x40005400
 80003fc:	2000090e 	.word	0x2000090e

08000400 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000404:	4b14      	ldr	r3, [pc, #80]	; (8000458 <MX_USART2_UART_Init+0x58>)
 8000406:	4a15      	ldr	r2, [pc, #84]	; (800045c <MX_USART2_UART_Init+0x5c>)
 8000408:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800040a:	4b13      	ldr	r3, [pc, #76]	; (8000458 <MX_USART2_UART_Init+0x58>)
 800040c:	2296      	movs	r2, #150	; 0x96
 800040e:	0192      	lsls	r2, r2, #6
 8000410:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000412:	4b11      	ldr	r3, [pc, #68]	; (8000458 <MX_USART2_UART_Init+0x58>)
 8000414:	2200      	movs	r2, #0
 8000416:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000418:	4b0f      	ldr	r3, [pc, #60]	; (8000458 <MX_USART2_UART_Init+0x58>)
 800041a:	2200      	movs	r2, #0
 800041c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800041e:	4b0e      	ldr	r3, [pc, #56]	; (8000458 <MX_USART2_UART_Init+0x58>)
 8000420:	2200      	movs	r2, #0
 8000422:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000424:	4b0c      	ldr	r3, [pc, #48]	; (8000458 <MX_USART2_UART_Init+0x58>)
 8000426:	220c      	movs	r2, #12
 8000428:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800042a:	4b0b      	ldr	r3, [pc, #44]	; (8000458 <MX_USART2_UART_Init+0x58>)
 800042c:	2200      	movs	r2, #0
 800042e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000430:	4b09      	ldr	r3, [pc, #36]	; (8000458 <MX_USART2_UART_Init+0x58>)
 8000432:	2200      	movs	r2, #0
 8000434:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000436:	4b08      	ldr	r3, [pc, #32]	; (8000458 <MX_USART2_UART_Init+0x58>)
 8000438:	2200      	movs	r2, #0
 800043a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800043c:	4b06      	ldr	r3, [pc, #24]	; (8000458 <MX_USART2_UART_Init+0x58>)
 800043e:	2200      	movs	r2, #0
 8000440:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8000442:	4b05      	ldr	r3, [pc, #20]	; (8000458 <MX_USART2_UART_Init+0x58>)
 8000444:	0018      	movs	r0, r3
 8000446:	f001 ff0f 	bl	8002268 <HAL_HalfDuplex_Init>
 800044a:	1e03      	subs	r3, r0, #0
 800044c:	d001      	beq.n	8000452 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800044e:	f000 f965 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000452:	46c0      	nop			; (mov r8, r8)
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	200000d8 	.word	0x200000d8
 800045c:	40004400 	.word	0x40004400

08000460 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000460:	b590      	push	{r4, r7, lr}
 8000462:	b089      	sub	sp, #36	; 0x24
 8000464:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000466:	240c      	movs	r4, #12
 8000468:	193b      	adds	r3, r7, r4
 800046a:	0018      	movs	r0, r3
 800046c:	2314      	movs	r3, #20
 800046e:	001a      	movs	r2, r3
 8000470:	2100      	movs	r1, #0
 8000472:	f002 fb29 	bl	8002ac8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000476:	4b2d      	ldr	r3, [pc, #180]	; (800052c <MX_GPIO_Init+0xcc>)
 8000478:	695a      	ldr	r2, [r3, #20]
 800047a:	4b2c      	ldr	r3, [pc, #176]	; (800052c <MX_GPIO_Init+0xcc>)
 800047c:	2180      	movs	r1, #128	; 0x80
 800047e:	0289      	lsls	r1, r1, #10
 8000480:	430a      	orrs	r2, r1
 8000482:	615a      	str	r2, [r3, #20]
 8000484:	4b29      	ldr	r3, [pc, #164]	; (800052c <MX_GPIO_Init+0xcc>)
 8000486:	695a      	ldr	r2, [r3, #20]
 8000488:	2380      	movs	r3, #128	; 0x80
 800048a:	029b      	lsls	r3, r3, #10
 800048c:	4013      	ands	r3, r2
 800048e:	60bb      	str	r3, [r7, #8]
 8000490:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000492:	4b26      	ldr	r3, [pc, #152]	; (800052c <MX_GPIO_Init+0xcc>)
 8000494:	695a      	ldr	r2, [r3, #20]
 8000496:	4b25      	ldr	r3, [pc, #148]	; (800052c <MX_GPIO_Init+0xcc>)
 8000498:	2180      	movs	r1, #128	; 0x80
 800049a:	0309      	lsls	r1, r1, #12
 800049c:	430a      	orrs	r2, r1
 800049e:	615a      	str	r2, [r3, #20]
 80004a0:	4b22      	ldr	r3, [pc, #136]	; (800052c <MX_GPIO_Init+0xcc>)
 80004a2:	695a      	ldr	r2, [r3, #20]
 80004a4:	2380      	movs	r3, #128	; 0x80
 80004a6:	031b      	lsls	r3, r3, #12
 80004a8:	4013      	ands	r3, r2
 80004aa:	607b      	str	r3, [r7, #4]
 80004ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ae:	4b1f      	ldr	r3, [pc, #124]	; (800052c <MX_GPIO_Init+0xcc>)
 80004b0:	695a      	ldr	r2, [r3, #20]
 80004b2:	4b1e      	ldr	r3, [pc, #120]	; (800052c <MX_GPIO_Init+0xcc>)
 80004b4:	2180      	movs	r1, #128	; 0x80
 80004b6:	02c9      	lsls	r1, r1, #11
 80004b8:	430a      	orrs	r2, r1
 80004ba:	615a      	str	r2, [r3, #20]
 80004bc:	4b1b      	ldr	r3, [pc, #108]	; (800052c <MX_GPIO_Init+0xcc>)
 80004be:	695a      	ldr	r2, [r3, #20]
 80004c0:	2380      	movs	r3, #128	; 0x80
 80004c2:	02db      	lsls	r3, r3, #11
 80004c4:	4013      	ands	r3, r2
 80004c6:	603b      	str	r3, [r7, #0]
 80004c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80004ca:	23c0      	movs	r3, #192	; 0xc0
 80004cc:	009b      	lsls	r3, r3, #2
 80004ce:	4818      	ldr	r0, [pc, #96]	; (8000530 <MX_GPIO_Init+0xd0>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	0019      	movs	r1, r3
 80004d4:	f000 fd10 	bl	8000ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004d8:	193b      	adds	r3, r7, r4
 80004da:	2201      	movs	r2, #1
 80004dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80004de:	193b      	adds	r3, r7, r4
 80004e0:	2290      	movs	r2, #144	; 0x90
 80004e2:	0352      	lsls	r2, r2, #13
 80004e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e6:	193b      	adds	r3, r7, r4
 80004e8:	2200      	movs	r2, #0
 80004ea:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004ec:	193a      	adds	r2, r7, r4
 80004ee:	2390      	movs	r3, #144	; 0x90
 80004f0:	05db      	lsls	r3, r3, #23
 80004f2:	0011      	movs	r1, r2
 80004f4:	0018      	movs	r0, r3
 80004f6:	f000 fb8f 	bl	8000c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 80004fa:	0021      	movs	r1, r4
 80004fc:	187b      	adds	r3, r7, r1
 80004fe:	22c0      	movs	r2, #192	; 0xc0
 8000500:	0092      	lsls	r2, r2, #2
 8000502:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000504:	187b      	adds	r3, r7, r1
 8000506:	2201      	movs	r2, #1
 8000508:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050a:	187b      	adds	r3, r7, r1
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000510:	187b      	adds	r3, r7, r1
 8000512:	2200      	movs	r2, #0
 8000514:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000516:	187b      	adds	r3, r7, r1
 8000518:	4a05      	ldr	r2, [pc, #20]	; (8000530 <MX_GPIO_Init+0xd0>)
 800051a:	0019      	movs	r1, r3
 800051c:	0010      	movs	r0, r2
 800051e:	f000 fb7b 	bl	8000c18 <HAL_GPIO_Init>

}
 8000522:	46c0      	nop			; (mov r8, r8)
 8000524:	46bd      	mov	sp, r7
 8000526:	b009      	add	sp, #36	; 0x24
 8000528:	bd90      	pop	{r4, r7, pc}
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	40021000 	.word	0x40021000
 8000530:	48000800 	.word	0x48000800

08000534 <print>:

/* USER CODE BEGIN 4 */
void print(char message[]){
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	0018      	movs	r0, r3
 8000540:	f7ff fde2 	bl	8000108 <strlen>
 8000544:	0003      	movs	r3, r0
 8000546:	b29a      	uxth	r2, r3
 8000548:	2301      	movs	r3, #1
 800054a:	425b      	negs	r3, r3
 800054c:	6879      	ldr	r1, [r7, #4]
 800054e:	4803      	ldr	r0, [pc, #12]	; (800055c <print+0x28>)
 8000550:	f001 fee6 	bl	8002320 <HAL_UART_Transmit>
}
 8000554:	46c0      	nop			; (mov r8, r8)
 8000556:	46bd      	mov	sp, r7
 8000558:	b002      	add	sp, #8
 800055a:	bd80      	pop	{r7, pc}
 800055c:	200000d8 	.word	0x200000d8

08000560 <bcdToDec>:
	return (uint8_t)((val/10*16)+(val%10));
}


int bcdToDec(uint8_t val)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	0002      	movs	r2, r0
 8000568:	1dfb      	adds	r3, r7, #7
 800056a:	701a      	strb	r2, [r3, #0]
	return (int)((val/16*10)+val%16);
 800056c:	1dfb      	adds	r3, r7, #7
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	091b      	lsrs	r3, r3, #4
 8000572:	b2db      	uxtb	r3, r3
 8000574:	001a      	movs	r2, r3
 8000576:	0013      	movs	r3, r2
 8000578:	009b      	lsls	r3, r3, #2
 800057a:	189b      	adds	r3, r3, r2
 800057c:	005b      	lsls	r3, r3, #1
 800057e:	0019      	movs	r1, r3
 8000580:	1dfb      	adds	r3, r7, #7
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	220f      	movs	r2, #15
 8000586:	4013      	ands	r3, r2
 8000588:	18cb      	adds	r3, r1, r3
}
 800058a:	0018      	movs	r0, r3
 800058c:	46bd      	mov	sp, r7
 800058e:	b002      	add	sp, #8
 8000590:	bd80      	pop	{r7, pc}
	...

08000594 <getTime>:
		print("Something went wrong setting time\r\n");
	}
}

void getTime (void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b086      	sub	sp, #24
 8000598:	af04      	add	r7, sp, #16
	uint8_t get_time[7];

	if(HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, FIRST_REG, REG_SIZE, get_time, 7, 1000)){
 800059a:	482b      	ldr	r0, [pc, #172]	; (8000648 <getTime+0xb4>)
 800059c:	23fa      	movs	r3, #250	; 0xfa
 800059e:	009b      	lsls	r3, r3, #2
 80005a0:	9302      	str	r3, [sp, #8]
 80005a2:	2307      	movs	r3, #7
 80005a4:	9301      	str	r3, [sp, #4]
 80005a6:	003b      	movs	r3, r7
 80005a8:	9300      	str	r3, [sp, #0]
 80005aa:	2301      	movs	r3, #1
 80005ac:	2200      	movs	r2, #0
 80005ae:	21d0      	movs	r1, #208	; 0xd0
 80005b0:	f000 fd56 	bl	8001060 <HAL_I2C_Mem_Read>
 80005b4:	1e03      	subs	r3, r0, #0
 80005b6:	d003      	beq.n	80005c0 <getTime+0x2c>
		print("Something went wrong while getting time\r\n");
 80005b8:	4b24      	ldr	r3, [pc, #144]	; (800064c <getTime+0xb8>)
 80005ba:	0018      	movs	r0, r3
 80005bc:	f7ff ffba 	bl	8000534 <print>
	}
	time.seconds = bcdToDec(get_time[0]);
 80005c0:	003b      	movs	r3, r7
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	0018      	movs	r0, r3
 80005c6:	f7ff ffcb 	bl	8000560 <bcdToDec>
 80005ca:	0003      	movs	r3, r0
 80005cc:	b2da      	uxtb	r2, r3
 80005ce:	4b20      	ldr	r3, [pc, #128]	; (8000650 <getTime+0xbc>)
 80005d0:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(get_time[1]);
 80005d2:	003b      	movs	r3, r7
 80005d4:	785b      	ldrb	r3, [r3, #1]
 80005d6:	0018      	movs	r0, r3
 80005d8:	f7ff ffc2 	bl	8000560 <bcdToDec>
 80005dc:	0003      	movs	r3, r0
 80005de:	b2da      	uxtb	r2, r3
 80005e0:	4b1b      	ldr	r3, [pc, #108]	; (8000650 <getTime+0xbc>)
 80005e2:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(get_time[2]);
 80005e4:	003b      	movs	r3, r7
 80005e6:	789b      	ldrb	r3, [r3, #2]
 80005e8:	0018      	movs	r0, r3
 80005ea:	f7ff ffb9 	bl	8000560 <bcdToDec>
 80005ee:	0003      	movs	r3, r0
 80005f0:	b2da      	uxtb	r2, r3
 80005f2:	4b17      	ldr	r3, [pc, #92]	; (8000650 <getTime+0xbc>)
 80005f4:	709a      	strb	r2, [r3, #2]
	time.dayofweek = bcdToDec(get_time[3]);
 80005f6:	003b      	movs	r3, r7
 80005f8:	78db      	ldrb	r3, [r3, #3]
 80005fa:	0018      	movs	r0, r3
 80005fc:	f7ff ffb0 	bl	8000560 <bcdToDec>
 8000600:	0003      	movs	r3, r0
 8000602:	b2da      	uxtb	r2, r3
 8000604:	4b12      	ldr	r3, [pc, #72]	; (8000650 <getTime+0xbc>)
 8000606:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(get_time[4]);
 8000608:	003b      	movs	r3, r7
 800060a:	791b      	ldrb	r3, [r3, #4]
 800060c:	0018      	movs	r0, r3
 800060e:	f7ff ffa7 	bl	8000560 <bcdToDec>
 8000612:	0003      	movs	r3, r0
 8000614:	b2da      	uxtb	r2, r3
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <getTime+0xbc>)
 8000618:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(get_time[5]);
 800061a:	003b      	movs	r3, r7
 800061c:	795b      	ldrb	r3, [r3, #5]
 800061e:	0018      	movs	r0, r3
 8000620:	f7ff ff9e 	bl	8000560 <bcdToDec>
 8000624:	0003      	movs	r3, r0
 8000626:	b2da      	uxtb	r2, r3
 8000628:	4b09      	ldr	r3, [pc, #36]	; (8000650 <getTime+0xbc>)
 800062a:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(get_time[6]);
 800062c:	003b      	movs	r3, r7
 800062e:	799b      	ldrb	r3, [r3, #6]
 8000630:	0018      	movs	r0, r3
 8000632:	f7ff ff95 	bl	8000560 <bcdToDec>
 8000636:	0003      	movs	r3, r0
 8000638:	b2da      	uxtb	r2, r3
 800063a:	4b05      	ldr	r3, [pc, #20]	; (8000650 <getTime+0xbc>)
 800063c:	719a      	strb	r2, [r3, #6]
}
 800063e:	46c0      	nop			; (mov r8, r8)
 8000640:	46bd      	mov	sp, r7
 8000642:	b002      	add	sp, #8
 8000644:	bd80      	pop	{r7, pc}
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	2000008c 	.word	0x2000008c
 800064c:	08003454 	.word	0x08003454
 8000650:	2000015c 	.word	0x2000015c

08000654 <epochFromTime>:

int epochFromTime(TIME time){
 8000654:	b590      	push	{r4, r7, lr}
 8000656:	b097      	sub	sp, #92	; 0x5c
 8000658:	af00      	add	r7, sp, #0
 800065a:	003b      	movs	r3, r7
 800065c:	6018      	str	r0, [r3, #0]
 800065e:	6059      	str	r1, [r3, #4]

	int years = time.year - 22;
 8000660:	003b      	movs	r3, r7
 8000662:	799b      	ldrb	r3, [r3, #6]
 8000664:	3b16      	subs	r3, #22
 8000666:	64fb      	str	r3, [r7, #76]	; 0x4c
	int days_num[] = {31, 28, 31, 30, 31, 30 ,31,31,30,31,30,31};
 8000668:	230c      	movs	r3, #12
 800066a:	18fb      	adds	r3, r7, r3
 800066c:	4a29      	ldr	r2, [pc, #164]	; (8000714 <epochFromTime+0xc0>)
 800066e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000670:	c313      	stmia	r3!, {r0, r1, r4}
 8000672:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000674:	c313      	stmia	r3!, {r0, r1, r4}
 8000676:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000678:	c313      	stmia	r3!, {r0, r1, r4}
 800067a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800067c:	c313      	stmia	r3!, {r0, r1, r4}
	int days = years*365;
 800067e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000680:	0013      	movs	r3, r2
 8000682:	00db      	lsls	r3, r3, #3
 8000684:	189b      	adds	r3, r3, r2
 8000686:	00db      	lsls	r3, r3, #3
 8000688:	189b      	adds	r3, r3, r2
 800068a:	009a      	lsls	r2, r3, #2
 800068c:	189b      	adds	r3, r3, r2
 800068e:	657b      	str	r3, [r7, #84]	; 0x54
	int months = time.month-1;
 8000690:	003b      	movs	r3, r7
 8000692:	795b      	ldrb	r3, [r3, #5]
 8000694:	3b01      	subs	r3, #1
 8000696:	64bb      	str	r3, [r7, #72]	; 0x48
	for(int i = 0; i < months; i++)
 8000698:	2300      	movs	r3, #0
 800069a:	653b      	str	r3, [r7, #80]	; 0x50
 800069c:	e00a      	b.n	80006b4 <epochFromTime+0x60>
	{
		days += days_num[i];
 800069e:	230c      	movs	r3, #12
 80006a0:	18fb      	adds	r3, r7, r3
 80006a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80006a4:	0092      	lsls	r2, r2, #2
 80006a6:	58d3      	ldr	r3, [r2, r3]
 80006a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80006aa:	18d3      	adds	r3, r2, r3
 80006ac:	657b      	str	r3, [r7, #84]	; 0x54
	for(int i = 0; i < months; i++)
 80006ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80006b0:	3301      	adds	r3, #1
 80006b2:	653b      	str	r3, [r7, #80]	; 0x50
 80006b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80006b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80006b8:	429a      	cmp	r2, r3
 80006ba:	dbf0      	blt.n	800069e <epochFromTime+0x4a>
	}
	days += time.dayofmonth -1;
 80006bc:	003b      	movs	r3, r7
 80006be:	791b      	ldrb	r3, [r3, #4]
 80006c0:	3b01      	subs	r3, #1
 80006c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80006c4:	18d3      	adds	r3, r2, r3
 80006c6:	657b      	str	r3, [r7, #84]	; 0x54

	int hours = days * 24 + time.hour;
 80006c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80006ca:	0013      	movs	r3, r2
 80006cc:	005b      	lsls	r3, r3, #1
 80006ce:	189b      	adds	r3, r3, r2
 80006d0:	00db      	lsls	r3, r3, #3
 80006d2:	001a      	movs	r2, r3
 80006d4:	003b      	movs	r3, r7
 80006d6:	789b      	ldrb	r3, [r3, #2]
 80006d8:	18d3      	adds	r3, r2, r3
 80006da:	647b      	str	r3, [r7, #68]	; 0x44
	int minutes = hours*60 +time.minutes;
 80006dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80006de:	0013      	movs	r3, r2
 80006e0:	011b      	lsls	r3, r3, #4
 80006e2:	1a9b      	subs	r3, r3, r2
 80006e4:	009b      	lsls	r3, r3, #2
 80006e6:	001a      	movs	r2, r3
 80006e8:	003b      	movs	r3, r7
 80006ea:	785b      	ldrb	r3, [r3, #1]
 80006ec:	18d3      	adds	r3, r2, r3
 80006ee:	643b      	str	r3, [r7, #64]	; 0x40
	int seconds = 60*minutes + time.seconds;
 80006f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80006f2:	0013      	movs	r3, r2
 80006f4:	011b      	lsls	r3, r3, #4
 80006f6:	1a9b      	subs	r3, r3, r2
 80006f8:	009b      	lsls	r3, r3, #2
 80006fa:	001a      	movs	r2, r3
 80006fc:	003b      	movs	r3, r7
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	18d3      	adds	r3, r2, r3
 8000702:	63fb      	str	r3, [r7, #60]	; 0x3c

	return EPOCH_2022 + seconds;
 8000704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000706:	4a04      	ldr	r2, [pc, #16]	; (8000718 <epochFromTime+0xc4>)
 8000708:	4694      	mov	ip, r2
 800070a:	4463      	add	r3, ip
}
 800070c:	0018      	movs	r0, r3
 800070e:	46bd      	mov	sp, r7
 8000710:	b017      	add	sp, #92	; 0x5c
 8000712:	bd90      	pop	{r4, r7, pc}
 8000714:	08003480 	.word	0x08003480
 8000718:	61cf7d60 	.word	0x61cf7d60

0800071c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000720:	b672      	cpsid	i
}
 8000722:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000724:	e7fe      	b.n	8000724 <Error_Handler+0x8>
	...

08000728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072e:	4b0f      	ldr	r3, [pc, #60]	; (800076c <HAL_MspInit+0x44>)
 8000730:	699a      	ldr	r2, [r3, #24]
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <HAL_MspInit+0x44>)
 8000734:	2101      	movs	r1, #1
 8000736:	430a      	orrs	r2, r1
 8000738:	619a      	str	r2, [r3, #24]
 800073a:	4b0c      	ldr	r3, [pc, #48]	; (800076c <HAL_MspInit+0x44>)
 800073c:	699b      	ldr	r3, [r3, #24]
 800073e:	2201      	movs	r2, #1
 8000740:	4013      	ands	r3, r2
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <HAL_MspInit+0x44>)
 8000748:	69da      	ldr	r2, [r3, #28]
 800074a:	4b08      	ldr	r3, [pc, #32]	; (800076c <HAL_MspInit+0x44>)
 800074c:	2180      	movs	r1, #128	; 0x80
 800074e:	0549      	lsls	r1, r1, #21
 8000750:	430a      	orrs	r2, r1
 8000752:	61da      	str	r2, [r3, #28]
 8000754:	4b05      	ldr	r3, [pc, #20]	; (800076c <HAL_MspInit+0x44>)
 8000756:	69da      	ldr	r2, [r3, #28]
 8000758:	2380      	movs	r3, #128	; 0x80
 800075a:	055b      	lsls	r3, r3, #21
 800075c:	4013      	ands	r3, r2
 800075e:	603b      	str	r3, [r7, #0]
 8000760:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	46bd      	mov	sp, r7
 8000766:	b002      	add	sp, #8
 8000768:	bd80      	pop	{r7, pc}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	40021000 	.word	0x40021000

08000770 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000770:	b590      	push	{r4, r7, lr}
 8000772:	b08b      	sub	sp, #44	; 0x2c
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000778:	2414      	movs	r4, #20
 800077a:	193b      	adds	r3, r7, r4
 800077c:	0018      	movs	r0, r3
 800077e:	2314      	movs	r3, #20
 8000780:	001a      	movs	r2, r3
 8000782:	2100      	movs	r1, #0
 8000784:	f002 f9a0 	bl	8002ac8 <memset>
  if(hi2c->Instance==I2C1)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a1c      	ldr	r2, [pc, #112]	; (8000800 <HAL_I2C_MspInit+0x90>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d131      	bne.n	80007f6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <HAL_I2C_MspInit+0x94>)
 8000794:	695a      	ldr	r2, [r3, #20]
 8000796:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <HAL_I2C_MspInit+0x94>)
 8000798:	2180      	movs	r1, #128	; 0x80
 800079a:	02c9      	lsls	r1, r1, #11
 800079c:	430a      	orrs	r2, r1
 800079e:	615a      	str	r2, [r3, #20]
 80007a0:	4b18      	ldr	r3, [pc, #96]	; (8000804 <HAL_I2C_MspInit+0x94>)
 80007a2:	695a      	ldr	r2, [r3, #20]
 80007a4:	2380      	movs	r3, #128	; 0x80
 80007a6:	02db      	lsls	r3, r3, #11
 80007a8:	4013      	ands	r3, r2
 80007aa:	613b      	str	r3, [r7, #16]
 80007ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007ae:	0021      	movs	r1, r4
 80007b0:	187b      	adds	r3, r7, r1
 80007b2:	22c0      	movs	r2, #192	; 0xc0
 80007b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007b6:	187b      	adds	r3, r7, r1
 80007b8:	2212      	movs	r2, #18
 80007ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	187b      	adds	r3, r7, r1
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007c2:	187b      	adds	r3, r7, r1
 80007c4:	2203      	movs	r2, #3
 80007c6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	2201      	movs	r2, #1
 80007cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	4a0d      	ldr	r2, [pc, #52]	; (8000808 <HAL_I2C_MspInit+0x98>)
 80007d2:	0019      	movs	r1, r3
 80007d4:	0010      	movs	r0, r2
 80007d6:	f000 fa1f 	bl	8000c18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007da:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <HAL_I2C_MspInit+0x94>)
 80007dc:	69da      	ldr	r2, [r3, #28]
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <HAL_I2C_MspInit+0x94>)
 80007e0:	2180      	movs	r1, #128	; 0x80
 80007e2:	0389      	lsls	r1, r1, #14
 80007e4:	430a      	orrs	r2, r1
 80007e6:	61da      	str	r2, [r3, #28]
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <HAL_I2C_MspInit+0x94>)
 80007ea:	69da      	ldr	r2, [r3, #28]
 80007ec:	2380      	movs	r3, #128	; 0x80
 80007ee:	039b      	lsls	r3, r3, #14
 80007f0:	4013      	ands	r3, r2
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	46bd      	mov	sp, r7
 80007fa:	b00b      	add	sp, #44	; 0x2c
 80007fc:	bd90      	pop	{r4, r7, pc}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	40005400 	.word	0x40005400
 8000804:	40021000 	.word	0x40021000
 8000808:	48000400 	.word	0x48000400

0800080c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800080c:	b590      	push	{r4, r7, lr}
 800080e:	b08b      	sub	sp, #44	; 0x2c
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000814:	2414      	movs	r4, #20
 8000816:	193b      	adds	r3, r7, r4
 8000818:	0018      	movs	r0, r3
 800081a:	2314      	movs	r3, #20
 800081c:	001a      	movs	r2, r3
 800081e:	2100      	movs	r1, #0
 8000820:	f002 f952 	bl	8002ac8 <memset>
  if(huart->Instance==USART2)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a1c      	ldr	r2, [pc, #112]	; (800089c <HAL_UART_MspInit+0x90>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d132      	bne.n	8000894 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800082e:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <HAL_UART_MspInit+0x94>)
 8000830:	69da      	ldr	r2, [r3, #28]
 8000832:	4b1b      	ldr	r3, [pc, #108]	; (80008a0 <HAL_UART_MspInit+0x94>)
 8000834:	2180      	movs	r1, #128	; 0x80
 8000836:	0289      	lsls	r1, r1, #10
 8000838:	430a      	orrs	r2, r1
 800083a:	61da      	str	r2, [r3, #28]
 800083c:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <HAL_UART_MspInit+0x94>)
 800083e:	69da      	ldr	r2, [r3, #28]
 8000840:	2380      	movs	r3, #128	; 0x80
 8000842:	029b      	lsls	r3, r3, #10
 8000844:	4013      	ands	r3, r2
 8000846:	613b      	str	r3, [r7, #16]
 8000848:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <HAL_UART_MspInit+0x94>)
 800084c:	695a      	ldr	r2, [r3, #20]
 800084e:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <HAL_UART_MspInit+0x94>)
 8000850:	2180      	movs	r1, #128	; 0x80
 8000852:	0289      	lsls	r1, r1, #10
 8000854:	430a      	orrs	r2, r1
 8000856:	615a      	str	r2, [r3, #20]
 8000858:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <HAL_UART_MspInit+0x94>)
 800085a:	695a      	ldr	r2, [r3, #20]
 800085c:	2380      	movs	r3, #128	; 0x80
 800085e:	029b      	lsls	r3, r3, #10
 8000860:	4013      	ands	r3, r2
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000866:	0021      	movs	r1, r4
 8000868:	187b      	adds	r3, r7, r1
 800086a:	2204      	movs	r2, #4
 800086c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800086e:	187b      	adds	r3, r7, r1
 8000870:	2212      	movs	r2, #18
 8000872:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000874:	187b      	adds	r3, r7, r1
 8000876:	2201      	movs	r2, #1
 8000878:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800087a:	187b      	adds	r3, r7, r1
 800087c:	2203      	movs	r2, #3
 800087e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000880:	187b      	adds	r3, r7, r1
 8000882:	2201      	movs	r2, #1
 8000884:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000886:	187a      	adds	r2, r7, r1
 8000888:	2390      	movs	r3, #144	; 0x90
 800088a:	05db      	lsls	r3, r3, #23
 800088c:	0011      	movs	r1, r2
 800088e:	0018      	movs	r0, r3
 8000890:	f000 f9c2 	bl	8000c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000894:	46c0      	nop			; (mov r8, r8)
 8000896:	46bd      	mov	sp, r7
 8000898:	b00b      	add	sp, #44	; 0x2c
 800089a:	bd90      	pop	{r4, r7, pc}
 800089c:	40004400 	.word	0x40004400
 80008a0:	40021000 	.word	0x40021000

080008a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <NMI_Handler+0x4>

080008aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ae:	e7fe      	b.n	80008ae <HardFault_Handler+0x4>

080008b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008b4:	46c0      	nop			; (mov r8, r8)
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}

080008ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c8:	f000 f8b2 	bl	8000a30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008cc:	46c0      	nop			; (mov r8, r8)
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
	...

080008d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b086      	sub	sp, #24
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008dc:	4a14      	ldr	r2, [pc, #80]	; (8000930 <_sbrk+0x5c>)
 80008de:	4b15      	ldr	r3, [pc, #84]	; (8000934 <_sbrk+0x60>)
 80008e0:	1ad3      	subs	r3, r2, r3
 80008e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008e8:	4b13      	ldr	r3, [pc, #76]	; (8000938 <_sbrk+0x64>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d102      	bne.n	80008f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008f0:	4b11      	ldr	r3, [pc, #68]	; (8000938 <_sbrk+0x64>)
 80008f2:	4a12      	ldr	r2, [pc, #72]	; (800093c <_sbrk+0x68>)
 80008f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008f6:	4b10      	ldr	r3, [pc, #64]	; (8000938 <_sbrk+0x64>)
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	18d3      	adds	r3, r2, r3
 80008fe:	693a      	ldr	r2, [r7, #16]
 8000900:	429a      	cmp	r2, r3
 8000902:	d207      	bcs.n	8000914 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000904:	f002 f8b6 	bl	8002a74 <__errno>
 8000908:	0003      	movs	r3, r0
 800090a:	220c      	movs	r2, #12
 800090c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800090e:	2301      	movs	r3, #1
 8000910:	425b      	negs	r3, r3
 8000912:	e009      	b.n	8000928 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000914:	4b08      	ldr	r3, [pc, #32]	; (8000938 <_sbrk+0x64>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800091a:	4b07      	ldr	r3, [pc, #28]	; (8000938 <_sbrk+0x64>)
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	18d2      	adds	r2, r2, r3
 8000922:	4b05      	ldr	r3, [pc, #20]	; (8000938 <_sbrk+0x64>)
 8000924:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000926:	68fb      	ldr	r3, [r7, #12]
}
 8000928:	0018      	movs	r0, r3
 800092a:	46bd      	mov	sp, r7
 800092c:	b006      	add	sp, #24
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20002000 	.word	0x20002000
 8000934:	00000400 	.word	0x00000400
 8000938:	20000198 	.word	0x20000198
 800093c:	200001b0 	.word	0x200001b0

08000940 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000944:	46c0      	nop			; (mov r8, r8)
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
	...

0800094c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800094c:	480d      	ldr	r0, [pc, #52]	; (8000984 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800094e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000950:	480d      	ldr	r0, [pc, #52]	; (8000988 <LoopForever+0x6>)
  ldr r1, =_edata
 8000952:	490e      	ldr	r1, [pc, #56]	; (800098c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000954:	4a0e      	ldr	r2, [pc, #56]	; (8000990 <LoopForever+0xe>)
  movs r3, #0
 8000956:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000958:	e002      	b.n	8000960 <LoopCopyDataInit>

0800095a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800095a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800095c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800095e:	3304      	adds	r3, #4

08000960 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000960:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000962:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000964:	d3f9      	bcc.n	800095a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000966:	4a0b      	ldr	r2, [pc, #44]	; (8000994 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000968:	4c0b      	ldr	r4, [pc, #44]	; (8000998 <LoopForever+0x16>)
  movs r3, #0
 800096a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800096c:	e001      	b.n	8000972 <LoopFillZerobss>

0800096e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800096e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000970:	3204      	adds	r2, #4

08000972 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000972:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000974:	d3fb      	bcc.n	800096e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000976:	f7ff ffe3 	bl	8000940 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800097a:	f002 f881 	bl	8002a80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800097e:	f7ff fc61 	bl	8000244 <main>

08000982 <LoopForever>:

LoopForever:
    b LoopForever
 8000982:	e7fe      	b.n	8000982 <LoopForever>
  ldr   r0, =_estack
 8000984:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800098c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000990:	08003524 	.word	0x08003524
  ldr r2, =_sbss
 8000994:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000998:	200001b0 	.word	0x200001b0

0800099c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800099c:	e7fe      	b.n	800099c <ADC1_COMP_IRQHandler>
	...

080009a0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009a4:	4b07      	ldr	r3, [pc, #28]	; (80009c4 <HAL_Init+0x24>)
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <HAL_Init+0x24>)
 80009aa:	2110      	movs	r1, #16
 80009ac:	430a      	orrs	r2, r1
 80009ae:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80009b0:	2000      	movs	r0, #0
 80009b2:	f000 f809 	bl	80009c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009b6:	f7ff feb7 	bl	8000728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009ba:	2300      	movs	r3, #0
}
 80009bc:	0018      	movs	r0, r3
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	46c0      	nop			; (mov r8, r8)
 80009c4:	40022000 	.word	0x40022000

080009c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c8:	b590      	push	{r4, r7, lr}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009d0:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <HAL_InitTick+0x5c>)
 80009d2:	681c      	ldr	r4, [r3, #0]
 80009d4:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <HAL_InitTick+0x60>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	0019      	movs	r1, r3
 80009da:	23fa      	movs	r3, #250	; 0xfa
 80009dc:	0098      	lsls	r0, r3, #2
 80009de:	f7ff fba5 	bl	800012c <__udivsi3>
 80009e2:	0003      	movs	r3, r0
 80009e4:	0019      	movs	r1, r3
 80009e6:	0020      	movs	r0, r4
 80009e8:	f7ff fba0 	bl	800012c <__udivsi3>
 80009ec:	0003      	movs	r3, r0
 80009ee:	0018      	movs	r0, r3
 80009f0:	f000 f905 	bl	8000bfe <HAL_SYSTICK_Config>
 80009f4:	1e03      	subs	r3, r0, #0
 80009f6:	d001      	beq.n	80009fc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80009f8:	2301      	movs	r3, #1
 80009fa:	e00f      	b.n	8000a1c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2b03      	cmp	r3, #3
 8000a00:	d80b      	bhi.n	8000a1a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a02:	6879      	ldr	r1, [r7, #4]
 8000a04:	2301      	movs	r3, #1
 8000a06:	425b      	negs	r3, r3
 8000a08:	2200      	movs	r2, #0
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f000 f8e2 	bl	8000bd4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <HAL_InitTick+0x64>)
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a16:	2300      	movs	r3, #0
 8000a18:	e000      	b.n	8000a1c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a1a:	2301      	movs	r3, #1
}
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	b003      	add	sp, #12
 8000a22:	bd90      	pop	{r4, r7, pc}
 8000a24:	20000000 	.word	0x20000000
 8000a28:	20000008 	.word	0x20000008
 8000a2c:	20000004 	.word	0x20000004

08000a30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a34:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <HAL_IncTick+0x1c>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	001a      	movs	r2, r3
 8000a3a:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <HAL_IncTick+0x20>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	18d2      	adds	r2, r2, r3
 8000a40:	4b03      	ldr	r3, [pc, #12]	; (8000a50 <HAL_IncTick+0x20>)
 8000a42:	601a      	str	r2, [r3, #0]
}
 8000a44:	46c0      	nop			; (mov r8, r8)
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	20000008 	.word	0x20000008
 8000a50:	2000019c 	.word	0x2000019c

08000a54 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  return uwTick;
 8000a58:	4b02      	ldr	r3, [pc, #8]	; (8000a64 <HAL_GetTick+0x10>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
}
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	2000019c 	.word	0x2000019c

08000a68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a70:	f7ff fff0 	bl	8000a54 <HAL_GetTick>
 8000a74:	0003      	movs	r3, r0
 8000a76:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	d005      	beq.n	8000a8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a82:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <HAL_Delay+0x44>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	001a      	movs	r2, r3
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	189b      	adds	r3, r3, r2
 8000a8c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	f7ff ffe0 	bl	8000a54 <HAL_GetTick>
 8000a94:	0002      	movs	r2, r0
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	1ad3      	subs	r3, r2, r3
 8000a9a:	68fa      	ldr	r2, [r7, #12]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d8f7      	bhi.n	8000a90 <HAL_Delay+0x28>
  {
  }
}
 8000aa0:	46c0      	nop			; (mov r8, r8)
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	b004      	add	sp, #16
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	20000008 	.word	0x20000008

08000ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ab0:	b590      	push	{r4, r7, lr}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	0002      	movs	r2, r0
 8000ab8:	6039      	str	r1, [r7, #0]
 8000aba:	1dfb      	adds	r3, r7, #7
 8000abc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000abe:	1dfb      	adds	r3, r7, #7
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	2b7f      	cmp	r3, #127	; 0x7f
 8000ac4:	d828      	bhi.n	8000b18 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ac6:	4a2f      	ldr	r2, [pc, #188]	; (8000b84 <__NVIC_SetPriority+0xd4>)
 8000ac8:	1dfb      	adds	r3, r7, #7
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	b25b      	sxtb	r3, r3
 8000ace:	089b      	lsrs	r3, r3, #2
 8000ad0:	33c0      	adds	r3, #192	; 0xc0
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	589b      	ldr	r3, [r3, r2]
 8000ad6:	1dfa      	adds	r2, r7, #7
 8000ad8:	7812      	ldrb	r2, [r2, #0]
 8000ada:	0011      	movs	r1, r2
 8000adc:	2203      	movs	r2, #3
 8000ade:	400a      	ands	r2, r1
 8000ae0:	00d2      	lsls	r2, r2, #3
 8000ae2:	21ff      	movs	r1, #255	; 0xff
 8000ae4:	4091      	lsls	r1, r2
 8000ae6:	000a      	movs	r2, r1
 8000ae8:	43d2      	mvns	r2, r2
 8000aea:	401a      	ands	r2, r3
 8000aec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	019b      	lsls	r3, r3, #6
 8000af2:	22ff      	movs	r2, #255	; 0xff
 8000af4:	401a      	ands	r2, r3
 8000af6:	1dfb      	adds	r3, r7, #7
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	0018      	movs	r0, r3
 8000afc:	2303      	movs	r3, #3
 8000afe:	4003      	ands	r3, r0
 8000b00:	00db      	lsls	r3, r3, #3
 8000b02:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b04:	481f      	ldr	r0, [pc, #124]	; (8000b84 <__NVIC_SetPriority+0xd4>)
 8000b06:	1dfb      	adds	r3, r7, #7
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	b25b      	sxtb	r3, r3
 8000b0c:	089b      	lsrs	r3, r3, #2
 8000b0e:	430a      	orrs	r2, r1
 8000b10:	33c0      	adds	r3, #192	; 0xc0
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b16:	e031      	b.n	8000b7c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b18:	4a1b      	ldr	r2, [pc, #108]	; (8000b88 <__NVIC_SetPriority+0xd8>)
 8000b1a:	1dfb      	adds	r3, r7, #7
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	0019      	movs	r1, r3
 8000b20:	230f      	movs	r3, #15
 8000b22:	400b      	ands	r3, r1
 8000b24:	3b08      	subs	r3, #8
 8000b26:	089b      	lsrs	r3, r3, #2
 8000b28:	3306      	adds	r3, #6
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	18d3      	adds	r3, r2, r3
 8000b2e:	3304      	adds	r3, #4
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	1dfa      	adds	r2, r7, #7
 8000b34:	7812      	ldrb	r2, [r2, #0]
 8000b36:	0011      	movs	r1, r2
 8000b38:	2203      	movs	r2, #3
 8000b3a:	400a      	ands	r2, r1
 8000b3c:	00d2      	lsls	r2, r2, #3
 8000b3e:	21ff      	movs	r1, #255	; 0xff
 8000b40:	4091      	lsls	r1, r2
 8000b42:	000a      	movs	r2, r1
 8000b44:	43d2      	mvns	r2, r2
 8000b46:	401a      	ands	r2, r3
 8000b48:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	019b      	lsls	r3, r3, #6
 8000b4e:	22ff      	movs	r2, #255	; 0xff
 8000b50:	401a      	ands	r2, r3
 8000b52:	1dfb      	adds	r3, r7, #7
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	0018      	movs	r0, r3
 8000b58:	2303      	movs	r3, #3
 8000b5a:	4003      	ands	r3, r0
 8000b5c:	00db      	lsls	r3, r3, #3
 8000b5e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b60:	4809      	ldr	r0, [pc, #36]	; (8000b88 <__NVIC_SetPriority+0xd8>)
 8000b62:	1dfb      	adds	r3, r7, #7
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	001c      	movs	r4, r3
 8000b68:	230f      	movs	r3, #15
 8000b6a:	4023      	ands	r3, r4
 8000b6c:	3b08      	subs	r3, #8
 8000b6e:	089b      	lsrs	r3, r3, #2
 8000b70:	430a      	orrs	r2, r1
 8000b72:	3306      	adds	r3, #6
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	18c3      	adds	r3, r0, r3
 8000b78:	3304      	adds	r3, #4
 8000b7a:	601a      	str	r2, [r3, #0]
}
 8000b7c:	46c0      	nop			; (mov r8, r8)
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	b003      	add	sp, #12
 8000b82:	bd90      	pop	{r4, r7, pc}
 8000b84:	e000e100 	.word	0xe000e100
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	1e5a      	subs	r2, r3, #1
 8000b98:	2380      	movs	r3, #128	; 0x80
 8000b9a:	045b      	lsls	r3, r3, #17
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d301      	bcc.n	8000ba4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	e010      	b.n	8000bc6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ba4:	4b0a      	ldr	r3, [pc, #40]	; (8000bd0 <SysTick_Config+0x44>)
 8000ba6:	687a      	ldr	r2, [r7, #4]
 8000ba8:	3a01      	subs	r2, #1
 8000baa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bac:	2301      	movs	r3, #1
 8000bae:	425b      	negs	r3, r3
 8000bb0:	2103      	movs	r1, #3
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f7ff ff7c 	bl	8000ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bb8:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <SysTick_Config+0x44>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bbe:	4b04      	ldr	r3, [pc, #16]	; (8000bd0 <SysTick_Config+0x44>)
 8000bc0:	2207      	movs	r2, #7
 8000bc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bc4:	2300      	movs	r3, #0
}
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	b002      	add	sp, #8
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	e000e010 	.word	0xe000e010

08000bd4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60b9      	str	r1, [r7, #8]
 8000bdc:	607a      	str	r2, [r7, #4]
 8000bde:	210f      	movs	r1, #15
 8000be0:	187b      	adds	r3, r7, r1
 8000be2:	1c02      	adds	r2, r0, #0
 8000be4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000be6:	68ba      	ldr	r2, [r7, #8]
 8000be8:	187b      	adds	r3, r7, r1
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	b25b      	sxtb	r3, r3
 8000bee:	0011      	movs	r1, r2
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f7ff ff5d 	bl	8000ab0 <__NVIC_SetPriority>
}
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	b004      	add	sp, #16
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b082      	sub	sp, #8
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f7ff ffbf 	bl	8000b8c <SysTick_Config>
 8000c0e:	0003      	movs	r3, r0
}
 8000c10:	0018      	movs	r0, r3
 8000c12:	46bd      	mov	sp, r7
 8000c14:	b002      	add	sp, #8
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c22:	2300      	movs	r3, #0
 8000c24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c26:	e14f      	b.n	8000ec8 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	697a      	ldr	r2, [r7, #20]
 8000c30:	4091      	lsls	r1, r2
 8000c32:	000a      	movs	r2, r1
 8000c34:	4013      	ands	r3, r2
 8000c36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d100      	bne.n	8000c40 <HAL_GPIO_Init+0x28>
 8000c3e:	e140      	b.n	8000ec2 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	2203      	movs	r2, #3
 8000c46:	4013      	ands	r3, r2
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d005      	beq.n	8000c58 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	2203      	movs	r2, #3
 8000c52:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c54:	2b02      	cmp	r3, #2
 8000c56:	d130      	bne.n	8000cba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	689b      	ldr	r3, [r3, #8]
 8000c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	2203      	movs	r2, #3
 8000c64:	409a      	lsls	r2, r3
 8000c66:	0013      	movs	r3, r2
 8000c68:	43da      	mvns	r2, r3
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	68da      	ldr	r2, [r3, #12]
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	409a      	lsls	r2, r3
 8000c7a:	0013      	movs	r3, r2
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c8e:	2201      	movs	r2, #1
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	409a      	lsls	r2, r3
 8000c94:	0013      	movs	r3, r2
 8000c96:	43da      	mvns	r2, r3
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	091b      	lsrs	r3, r3, #4
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	401a      	ands	r2, r3
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	409a      	lsls	r2, r3
 8000cac:	0013      	movs	r3, r2
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	2203      	movs	r2, #3
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	2b03      	cmp	r3, #3
 8000cc4:	d017      	beq.n	8000cf6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	68db      	ldr	r3, [r3, #12]
 8000cca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	2203      	movs	r2, #3
 8000cd2:	409a      	lsls	r2, r3
 8000cd4:	0013      	movs	r3, r2
 8000cd6:	43da      	mvns	r2, r3
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	4013      	ands	r3, r2
 8000cdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	689a      	ldr	r2, [r3, #8]
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	409a      	lsls	r2, r3
 8000ce8:	0013      	movs	r3, r2
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	2203      	movs	r2, #3
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	2b02      	cmp	r3, #2
 8000d00:	d123      	bne.n	8000d4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	08da      	lsrs	r2, r3, #3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	3208      	adds	r2, #8
 8000d0a:	0092      	lsls	r2, r2, #2
 8000d0c:	58d3      	ldr	r3, [r2, r3]
 8000d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	2207      	movs	r2, #7
 8000d14:	4013      	ands	r3, r2
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	220f      	movs	r2, #15
 8000d1a:	409a      	lsls	r2, r3
 8000d1c:	0013      	movs	r3, r2
 8000d1e:	43da      	mvns	r2, r3
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	4013      	ands	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	691a      	ldr	r2, [r3, #16]
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	2107      	movs	r1, #7
 8000d2e:	400b      	ands	r3, r1
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	409a      	lsls	r2, r3
 8000d34:	0013      	movs	r3, r2
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	08da      	lsrs	r2, r3, #3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3208      	adds	r2, #8
 8000d44:	0092      	lsls	r2, r2, #2
 8000d46:	6939      	ldr	r1, [r7, #16]
 8000d48:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	2203      	movs	r2, #3
 8000d56:	409a      	lsls	r2, r3
 8000d58:	0013      	movs	r3, r2
 8000d5a:	43da      	mvns	r2, r3
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	2203      	movs	r2, #3
 8000d68:	401a      	ands	r2, r3
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	409a      	lsls	r2, r3
 8000d70:	0013      	movs	r3, r2
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685a      	ldr	r2, [r3, #4]
 8000d82:	23c0      	movs	r3, #192	; 0xc0
 8000d84:	029b      	lsls	r3, r3, #10
 8000d86:	4013      	ands	r3, r2
 8000d88:	d100      	bne.n	8000d8c <HAL_GPIO_Init+0x174>
 8000d8a:	e09a      	b.n	8000ec2 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8c:	4b54      	ldr	r3, [pc, #336]	; (8000ee0 <HAL_GPIO_Init+0x2c8>)
 8000d8e:	699a      	ldr	r2, [r3, #24]
 8000d90:	4b53      	ldr	r3, [pc, #332]	; (8000ee0 <HAL_GPIO_Init+0x2c8>)
 8000d92:	2101      	movs	r1, #1
 8000d94:	430a      	orrs	r2, r1
 8000d96:	619a      	str	r2, [r3, #24]
 8000d98:	4b51      	ldr	r3, [pc, #324]	; (8000ee0 <HAL_GPIO_Init+0x2c8>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	4013      	ands	r3, r2
 8000da0:	60bb      	str	r3, [r7, #8]
 8000da2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000da4:	4a4f      	ldr	r2, [pc, #316]	; (8000ee4 <HAL_GPIO_Init+0x2cc>)
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	089b      	lsrs	r3, r3, #2
 8000daa:	3302      	adds	r3, #2
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	589b      	ldr	r3, [r3, r2]
 8000db0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	2203      	movs	r2, #3
 8000db6:	4013      	ands	r3, r2
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	220f      	movs	r2, #15
 8000dbc:	409a      	lsls	r2, r3
 8000dbe:	0013      	movs	r3, r2
 8000dc0:	43da      	mvns	r2, r3
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000dc8:	687a      	ldr	r2, [r7, #4]
 8000dca:	2390      	movs	r3, #144	; 0x90
 8000dcc:	05db      	lsls	r3, r3, #23
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d013      	beq.n	8000dfa <HAL_GPIO_Init+0x1e2>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a44      	ldr	r2, [pc, #272]	; (8000ee8 <HAL_GPIO_Init+0x2d0>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d00d      	beq.n	8000df6 <HAL_GPIO_Init+0x1de>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a43      	ldr	r2, [pc, #268]	; (8000eec <HAL_GPIO_Init+0x2d4>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d007      	beq.n	8000df2 <HAL_GPIO_Init+0x1da>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a42      	ldr	r2, [pc, #264]	; (8000ef0 <HAL_GPIO_Init+0x2d8>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d101      	bne.n	8000dee <HAL_GPIO_Init+0x1d6>
 8000dea:	2303      	movs	r3, #3
 8000dec:	e006      	b.n	8000dfc <HAL_GPIO_Init+0x1e4>
 8000dee:	2305      	movs	r3, #5
 8000df0:	e004      	b.n	8000dfc <HAL_GPIO_Init+0x1e4>
 8000df2:	2302      	movs	r3, #2
 8000df4:	e002      	b.n	8000dfc <HAL_GPIO_Init+0x1e4>
 8000df6:	2301      	movs	r3, #1
 8000df8:	e000      	b.n	8000dfc <HAL_GPIO_Init+0x1e4>
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	697a      	ldr	r2, [r7, #20]
 8000dfe:	2103      	movs	r1, #3
 8000e00:	400a      	ands	r2, r1
 8000e02:	0092      	lsls	r2, r2, #2
 8000e04:	4093      	lsls	r3, r2
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e0c:	4935      	ldr	r1, [pc, #212]	; (8000ee4 <HAL_GPIO_Init+0x2cc>)
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	089b      	lsrs	r3, r3, #2
 8000e12:	3302      	adds	r3, #2
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e1a:	4b36      	ldr	r3, [pc, #216]	; (8000ef4 <HAL_GPIO_Init+0x2dc>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	43da      	mvns	r2, r3
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	4013      	ands	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685a      	ldr	r2, [r3, #4]
 8000e2e:	2380      	movs	r3, #128	; 0x80
 8000e30:	025b      	lsls	r3, r3, #9
 8000e32:	4013      	ands	r3, r2
 8000e34:	d003      	beq.n	8000e3e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e3e:	4b2d      	ldr	r3, [pc, #180]	; (8000ef4 <HAL_GPIO_Init+0x2dc>)
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000e44:	4b2b      	ldr	r3, [pc, #172]	; (8000ef4 <HAL_GPIO_Init+0x2dc>)
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	43da      	mvns	r2, r3
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	4013      	ands	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685a      	ldr	r2, [r3, #4]
 8000e58:	2380      	movs	r3, #128	; 0x80
 8000e5a:	029b      	lsls	r3, r3, #10
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	d003      	beq.n	8000e68 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e68:	4b22      	ldr	r3, [pc, #136]	; (8000ef4 <HAL_GPIO_Init+0x2dc>)
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e6e:	4b21      	ldr	r3, [pc, #132]	; (8000ef4 <HAL_GPIO_Init+0x2dc>)
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	43da      	mvns	r2, r3
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685a      	ldr	r2, [r3, #4]
 8000e82:	2380      	movs	r3, #128	; 0x80
 8000e84:	035b      	lsls	r3, r3, #13
 8000e86:	4013      	ands	r3, r2
 8000e88:	d003      	beq.n	8000e92 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e92:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <HAL_GPIO_Init+0x2dc>)
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000e98:	4b16      	ldr	r3, [pc, #88]	; (8000ef4 <HAL_GPIO_Init+0x2dc>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	43da      	mvns	r2, r3
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685a      	ldr	r2, [r3, #4]
 8000eac:	2380      	movs	r3, #128	; 0x80
 8000eae:	039b      	lsls	r3, r3, #14
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	d003      	beq.n	8000ebc <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ebc:	4b0d      	ldr	r3, [pc, #52]	; (8000ef4 <HAL_GPIO_Init+0x2dc>)
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	40da      	lsrs	r2, r3
 8000ed0:	1e13      	subs	r3, r2, #0
 8000ed2:	d000      	beq.n	8000ed6 <HAL_GPIO_Init+0x2be>
 8000ed4:	e6a8      	b.n	8000c28 <HAL_GPIO_Init+0x10>
  } 
}
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	46c0      	nop			; (mov r8, r8)
 8000eda:	46bd      	mov	sp, r7
 8000edc:	b006      	add	sp, #24
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	40010000 	.word	0x40010000
 8000ee8:	48000400 	.word	0x48000400
 8000eec:	48000800 	.word	0x48000800
 8000ef0:	48000c00 	.word	0x48000c00
 8000ef4:	40010400 	.word	0x40010400

08000ef8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	0008      	movs	r0, r1
 8000f02:	0011      	movs	r1, r2
 8000f04:	1cbb      	adds	r3, r7, #2
 8000f06:	1c02      	adds	r2, r0, #0
 8000f08:	801a      	strh	r2, [r3, #0]
 8000f0a:	1c7b      	adds	r3, r7, #1
 8000f0c:	1c0a      	adds	r2, r1, #0
 8000f0e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f10:	1c7b      	adds	r3, r7, #1
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d004      	beq.n	8000f22 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f18:	1cbb      	adds	r3, r7, #2
 8000f1a:	881a      	ldrh	r2, [r3, #0]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f20:	e003      	b.n	8000f2a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f22:	1cbb      	adds	r3, r7, #2
 8000f24:	881a      	ldrh	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	b002      	add	sp, #8
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d101      	bne.n	8000f46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e082      	b.n	800104c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2241      	movs	r2, #65	; 0x41
 8000f4a:	5c9b      	ldrb	r3, [r3, r2]
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d107      	bne.n	8000f62 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2240      	movs	r2, #64	; 0x40
 8000f56:	2100      	movs	r1, #0
 8000f58:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	f7ff fc07 	bl	8000770 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2241      	movs	r2, #65	; 0x41
 8000f66:	2124      	movs	r1, #36	; 0x24
 8000f68:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2101      	movs	r1, #1
 8000f76:	438a      	bics	r2, r1
 8000f78:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	685a      	ldr	r2, [r3, #4]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4934      	ldr	r1, [pc, #208]	; (8001054 <HAL_I2C_Init+0x120>)
 8000f84:	400a      	ands	r2, r1
 8000f86:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	689a      	ldr	r2, [r3, #8]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4931      	ldr	r1, [pc, #196]	; (8001058 <HAL_I2C_Init+0x124>)
 8000f94:	400a      	ands	r2, r1
 8000f96:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d108      	bne.n	8000fb2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	689a      	ldr	r2, [r3, #8]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2180      	movs	r1, #128	; 0x80
 8000faa:	0209      	lsls	r1, r1, #8
 8000fac:	430a      	orrs	r2, r1
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	e007      	b.n	8000fc2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	689a      	ldr	r2, [r3, #8]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	2184      	movs	r1, #132	; 0x84
 8000fbc:	0209      	lsls	r1, r1, #8
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	68db      	ldr	r3, [r3, #12]
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d104      	bne.n	8000fd4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2280      	movs	r2, #128	; 0x80
 8000fd0:	0112      	lsls	r2, r2, #4
 8000fd2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	685a      	ldr	r2, [r3, #4]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	491f      	ldr	r1, [pc, #124]	; (800105c <HAL_I2C_Init+0x128>)
 8000fe0:	430a      	orrs	r2, r1
 8000fe2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	68da      	ldr	r2, [r3, #12]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	491a      	ldr	r1, [pc, #104]	; (8001058 <HAL_I2C_Init+0x124>)
 8000ff0:	400a      	ands	r2, r1
 8000ff2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	691a      	ldr	r2, [r3, #16]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	695b      	ldr	r3, [r3, #20]
 8000ffc:	431a      	orrs	r2, r3
 8000ffe:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	430a      	orrs	r2, r1
 800100c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	69d9      	ldr	r1, [r3, #28]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6a1a      	ldr	r2, [r3, #32]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	430a      	orrs	r2, r1
 800101c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2101      	movs	r1, #1
 800102a:	430a      	orrs	r2, r1
 800102c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2200      	movs	r2, #0
 8001032:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2241      	movs	r2, #65	; 0x41
 8001038:	2120      	movs	r1, #32
 800103a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2200      	movs	r2, #0
 8001040:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2242      	movs	r2, #66	; 0x42
 8001046:	2100      	movs	r1, #0
 8001048:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800104a:	2300      	movs	r3, #0
}
 800104c:	0018      	movs	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	b002      	add	sp, #8
 8001052:	bd80      	pop	{r7, pc}
 8001054:	f0ffffff 	.word	0xf0ffffff
 8001058:	ffff7fff 	.word	0xffff7fff
 800105c:	02008000 	.word	0x02008000

08001060 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001060:	b590      	push	{r4, r7, lr}
 8001062:	b089      	sub	sp, #36	; 0x24
 8001064:	af02      	add	r7, sp, #8
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	000c      	movs	r4, r1
 800106a:	0010      	movs	r0, r2
 800106c:	0019      	movs	r1, r3
 800106e:	230a      	movs	r3, #10
 8001070:	18fb      	adds	r3, r7, r3
 8001072:	1c22      	adds	r2, r4, #0
 8001074:	801a      	strh	r2, [r3, #0]
 8001076:	2308      	movs	r3, #8
 8001078:	18fb      	adds	r3, r7, r3
 800107a:	1c02      	adds	r2, r0, #0
 800107c:	801a      	strh	r2, [r3, #0]
 800107e:	1dbb      	adds	r3, r7, #6
 8001080:	1c0a      	adds	r2, r1, #0
 8001082:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2241      	movs	r2, #65	; 0x41
 8001088:	5c9b      	ldrb	r3, [r3, r2]
 800108a:	b2db      	uxtb	r3, r3
 800108c:	2b20      	cmp	r3, #32
 800108e:	d000      	beq.n	8001092 <HAL_I2C_Mem_Read+0x32>
 8001090:	e110      	b.n	80012b4 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8001092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001094:	2b00      	cmp	r3, #0
 8001096:	d004      	beq.n	80010a2 <HAL_I2C_Mem_Read+0x42>
 8001098:	232c      	movs	r3, #44	; 0x2c
 800109a:	18fb      	adds	r3, r7, r3
 800109c:	881b      	ldrh	r3, [r3, #0]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d105      	bne.n	80010ae <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	2280      	movs	r2, #128	; 0x80
 80010a6:	0092      	lsls	r2, r2, #2
 80010a8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e103      	b.n	80012b6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	2240      	movs	r2, #64	; 0x40
 80010b2:	5c9b      	ldrb	r3, [r3, r2]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d101      	bne.n	80010bc <HAL_I2C_Mem_Read+0x5c>
 80010b8:	2302      	movs	r3, #2
 80010ba:	e0fc      	b.n	80012b6 <HAL_I2C_Mem_Read+0x256>
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	2240      	movs	r2, #64	; 0x40
 80010c0:	2101      	movs	r1, #1
 80010c2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80010c4:	f7ff fcc6 	bl	8000a54 <HAL_GetTick>
 80010c8:	0003      	movs	r3, r0
 80010ca:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80010cc:	2380      	movs	r3, #128	; 0x80
 80010ce:	0219      	lsls	r1, r3, #8
 80010d0:	68f8      	ldr	r0, [r7, #12]
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	2319      	movs	r3, #25
 80010d8:	2201      	movs	r2, #1
 80010da:	f000 f979 	bl	80013d0 <I2C_WaitOnFlagUntilTimeout>
 80010de:	1e03      	subs	r3, r0, #0
 80010e0:	d001      	beq.n	80010e6 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e0e7      	b.n	80012b6 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	2241      	movs	r2, #65	; 0x41
 80010ea:	2122      	movs	r1, #34	; 0x22
 80010ec:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	2242      	movs	r2, #66	; 0x42
 80010f2:	2140      	movs	r1, #64	; 0x40
 80010f4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	2200      	movs	r2, #0
 80010fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001100:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	222c      	movs	r2, #44	; 0x2c
 8001106:	18ba      	adds	r2, r7, r2
 8001108:	8812      	ldrh	r2, [r2, #0]
 800110a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2200      	movs	r2, #0
 8001110:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001112:	1dbb      	adds	r3, r7, #6
 8001114:	881c      	ldrh	r4, [r3, #0]
 8001116:	2308      	movs	r3, #8
 8001118:	18fb      	adds	r3, r7, r3
 800111a:	881a      	ldrh	r2, [r3, #0]
 800111c:	230a      	movs	r3, #10
 800111e:	18fb      	adds	r3, r7, r3
 8001120:	8819      	ldrh	r1, [r3, #0]
 8001122:	68f8      	ldr	r0, [r7, #12]
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	9301      	str	r3, [sp, #4]
 8001128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	0023      	movs	r3, r4
 800112e:	f000 f8cb 	bl	80012c8 <I2C_RequestMemoryRead>
 8001132:	1e03      	subs	r3, r0, #0
 8001134:	d005      	beq.n	8001142 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2240      	movs	r2, #64	; 0x40
 800113a:	2100      	movs	r1, #0
 800113c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e0b9      	b.n	80012b6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001146:	b29b      	uxth	r3, r3
 8001148:	2bff      	cmp	r3, #255	; 0xff
 800114a:	d911      	bls.n	8001170 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	22ff      	movs	r2, #255	; 0xff
 8001150:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001156:	b2da      	uxtb	r2, r3
 8001158:	2380      	movs	r3, #128	; 0x80
 800115a:	045c      	lsls	r4, r3, #17
 800115c:	230a      	movs	r3, #10
 800115e:	18fb      	adds	r3, r7, r3
 8001160:	8819      	ldrh	r1, [r3, #0]
 8001162:	68f8      	ldr	r0, [r7, #12]
 8001164:	4b56      	ldr	r3, [pc, #344]	; (80012c0 <HAL_I2C_Mem_Read+0x260>)
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	0023      	movs	r3, r4
 800116a:	f000 fa65 	bl	8001638 <I2C_TransferConfig>
 800116e:	e012      	b.n	8001196 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001174:	b29a      	uxth	r2, r3
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800117e:	b2da      	uxtb	r2, r3
 8001180:	2380      	movs	r3, #128	; 0x80
 8001182:	049c      	lsls	r4, r3, #18
 8001184:	230a      	movs	r3, #10
 8001186:	18fb      	adds	r3, r7, r3
 8001188:	8819      	ldrh	r1, [r3, #0]
 800118a:	68f8      	ldr	r0, [r7, #12]
 800118c:	4b4c      	ldr	r3, [pc, #304]	; (80012c0 <HAL_I2C_Mem_Read+0x260>)
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	0023      	movs	r3, r4
 8001192:	f000 fa51 	bl	8001638 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001196:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001198:	68f8      	ldr	r0, [r7, #12]
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	0013      	movs	r3, r2
 80011a0:	2200      	movs	r2, #0
 80011a2:	2104      	movs	r1, #4
 80011a4:	f000 f914 	bl	80013d0 <I2C_WaitOnFlagUntilTimeout>
 80011a8:	1e03      	subs	r3, r0, #0
 80011aa:	d001      	beq.n	80011b0 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e082      	b.n	80012b6 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ba:	b2d2      	uxtb	r2, r2
 80011bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c2:	1c5a      	adds	r2, r3, #1
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011cc:	3b01      	subs	r3, #1
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011d8:	b29b      	uxth	r3, r3
 80011da:	3b01      	subs	r3, #1
 80011dc:	b29a      	uxth	r2, r3
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d03a      	beq.n	8001262 <HAL_I2C_Mem_Read+0x202>
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d136      	bne.n	8001262 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80011f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	0013      	movs	r3, r2
 80011fe:	2200      	movs	r2, #0
 8001200:	2180      	movs	r1, #128	; 0x80
 8001202:	f000 f8e5 	bl	80013d0 <I2C_WaitOnFlagUntilTimeout>
 8001206:	1e03      	subs	r3, r0, #0
 8001208:	d001      	beq.n	800120e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e053      	b.n	80012b6 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001212:	b29b      	uxth	r3, r3
 8001214:	2bff      	cmp	r3, #255	; 0xff
 8001216:	d911      	bls.n	800123c <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	22ff      	movs	r2, #255	; 0xff
 800121c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001222:	b2da      	uxtb	r2, r3
 8001224:	2380      	movs	r3, #128	; 0x80
 8001226:	045c      	lsls	r4, r3, #17
 8001228:	230a      	movs	r3, #10
 800122a:	18fb      	adds	r3, r7, r3
 800122c:	8819      	ldrh	r1, [r3, #0]
 800122e:	68f8      	ldr	r0, [r7, #12]
 8001230:	2300      	movs	r3, #0
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	0023      	movs	r3, r4
 8001236:	f000 f9ff 	bl	8001638 <I2C_TransferConfig>
 800123a:	e012      	b.n	8001262 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001240:	b29a      	uxth	r2, r3
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800124a:	b2da      	uxtb	r2, r3
 800124c:	2380      	movs	r3, #128	; 0x80
 800124e:	049c      	lsls	r4, r3, #18
 8001250:	230a      	movs	r3, #10
 8001252:	18fb      	adds	r3, r7, r3
 8001254:	8819      	ldrh	r1, [r3, #0]
 8001256:	68f8      	ldr	r0, [r7, #12]
 8001258:	2300      	movs	r3, #0
 800125a:	9300      	str	r3, [sp, #0]
 800125c:	0023      	movs	r3, r4
 800125e:	f000 f9eb 	bl	8001638 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001266:	b29b      	uxth	r3, r3
 8001268:	2b00      	cmp	r3, #0
 800126a:	d194      	bne.n	8001196 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800126c:	697a      	ldr	r2, [r7, #20]
 800126e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	0018      	movs	r0, r3
 8001274:	f000 f92a 	bl	80014cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8001278:	1e03      	subs	r3, r0, #0
 800127a:	d001      	beq.n	8001280 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e01a      	b.n	80012b6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2220      	movs	r2, #32
 8001286:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	685a      	ldr	r2, [r3, #4]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	490c      	ldr	r1, [pc, #48]	; (80012c4 <HAL_I2C_Mem_Read+0x264>)
 8001294:	400a      	ands	r2, r1
 8001296:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2241      	movs	r2, #65	; 0x41
 800129c:	2120      	movs	r1, #32
 800129e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2242      	movs	r2, #66	; 0x42
 80012a4:	2100      	movs	r1, #0
 80012a6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2240      	movs	r2, #64	; 0x40
 80012ac:	2100      	movs	r1, #0
 80012ae:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80012b0:	2300      	movs	r3, #0
 80012b2:	e000      	b.n	80012b6 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80012b4:	2302      	movs	r3, #2
  }
}
 80012b6:	0018      	movs	r0, r3
 80012b8:	46bd      	mov	sp, r7
 80012ba:	b007      	add	sp, #28
 80012bc:	bd90      	pop	{r4, r7, pc}
 80012be:	46c0      	nop			; (mov r8, r8)
 80012c0:	80002400 	.word	0x80002400
 80012c4:	fe00e800 	.word	0xfe00e800

080012c8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80012c8:	b5b0      	push	{r4, r5, r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af02      	add	r7, sp, #8
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	000c      	movs	r4, r1
 80012d2:	0010      	movs	r0, r2
 80012d4:	0019      	movs	r1, r3
 80012d6:	250a      	movs	r5, #10
 80012d8:	197b      	adds	r3, r7, r5
 80012da:	1c22      	adds	r2, r4, #0
 80012dc:	801a      	strh	r2, [r3, #0]
 80012de:	2308      	movs	r3, #8
 80012e0:	18fb      	adds	r3, r7, r3
 80012e2:	1c02      	adds	r2, r0, #0
 80012e4:	801a      	strh	r2, [r3, #0]
 80012e6:	1dbb      	adds	r3, r7, #6
 80012e8:	1c0a      	adds	r2, r1, #0
 80012ea:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80012ec:	1dbb      	adds	r3, r7, #6
 80012ee:	881b      	ldrh	r3, [r3, #0]
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	197b      	adds	r3, r7, r5
 80012f4:	8819      	ldrh	r1, [r3, #0]
 80012f6:	68f8      	ldr	r0, [r7, #12]
 80012f8:	4b23      	ldr	r3, [pc, #140]	; (8001388 <I2C_RequestMemoryRead+0xc0>)
 80012fa:	9300      	str	r3, [sp, #0]
 80012fc:	2300      	movs	r3, #0
 80012fe:	f000 f99b 	bl	8001638 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001304:	6a39      	ldr	r1, [r7, #32]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	0018      	movs	r0, r3
 800130a:	f000 f8a0 	bl	800144e <I2C_WaitOnTXISFlagUntilTimeout>
 800130e:	1e03      	subs	r3, r0, #0
 8001310:	d001      	beq.n	8001316 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e033      	b.n	800137e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001316:	1dbb      	adds	r3, r7, #6
 8001318:	881b      	ldrh	r3, [r3, #0]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d107      	bne.n	800132e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800131e:	2308      	movs	r3, #8
 8001320:	18fb      	adds	r3, r7, r3
 8001322:	881b      	ldrh	r3, [r3, #0]
 8001324:	b2da      	uxtb	r2, r3
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	629a      	str	r2, [r3, #40]	; 0x28
 800132c:	e019      	b.n	8001362 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800132e:	2308      	movs	r3, #8
 8001330:	18fb      	adds	r3, r7, r3
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	0a1b      	lsrs	r3, r3, #8
 8001336:	b29b      	uxth	r3, r3
 8001338:	b2da      	uxtb	r2, r3
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001342:	6a39      	ldr	r1, [r7, #32]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	0018      	movs	r0, r3
 8001348:	f000 f881 	bl	800144e <I2C_WaitOnTXISFlagUntilTimeout>
 800134c:	1e03      	subs	r3, r0, #0
 800134e:	d001      	beq.n	8001354 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e014      	b.n	800137e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001354:	2308      	movs	r3, #8
 8001356:	18fb      	adds	r3, r7, r3
 8001358:	881b      	ldrh	r3, [r3, #0]
 800135a:	b2da      	uxtb	r2, r3
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001362:	6a3a      	ldr	r2, [r7, #32]
 8001364:	68f8      	ldr	r0, [r7, #12]
 8001366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	0013      	movs	r3, r2
 800136c:	2200      	movs	r2, #0
 800136e:	2140      	movs	r1, #64	; 0x40
 8001370:	f000 f82e 	bl	80013d0 <I2C_WaitOnFlagUntilTimeout>
 8001374:	1e03      	subs	r3, r0, #0
 8001376:	d001      	beq.n	800137c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e000      	b.n	800137e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	0018      	movs	r0, r3
 8001380:	46bd      	mov	sp, r7
 8001382:	b004      	add	sp, #16
 8001384:	bdb0      	pop	{r4, r5, r7, pc}
 8001386:	46c0      	nop			; (mov r8, r8)
 8001388:	80002000 	.word	0x80002000

0800138c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	699b      	ldr	r3, [r3, #24]
 800139a:	2202      	movs	r2, #2
 800139c:	4013      	ands	r3, r2
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d103      	bne.n	80013aa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2200      	movs	r2, #0
 80013a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	2201      	movs	r2, #1
 80013b2:	4013      	ands	r3, r2
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d007      	beq.n	80013c8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	699a      	ldr	r2, [r3, #24]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2101      	movs	r1, #1
 80013c4:	430a      	orrs	r2, r1
 80013c6:	619a      	str	r2, [r3, #24]
  }
}
 80013c8:	46c0      	nop			; (mov r8, r8)
 80013ca:	46bd      	mov	sp, r7
 80013cc:	b002      	add	sp, #8
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	603b      	str	r3, [r7, #0]
 80013dc:	1dfb      	adds	r3, r7, #7
 80013de:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80013e0:	e021      	b.n	8001426 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	3301      	adds	r3, #1
 80013e6:	d01e      	beq.n	8001426 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013e8:	f7ff fb34 	bl	8000a54 <HAL_GetTick>
 80013ec:	0002      	movs	r2, r0
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	683a      	ldr	r2, [r7, #0]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d302      	bcc.n	80013fe <I2C_WaitOnFlagUntilTimeout+0x2e>
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d113      	bne.n	8001426 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001402:	2220      	movs	r2, #32
 8001404:	431a      	orrs	r2, r3
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2241      	movs	r2, #65	; 0x41
 800140e:	2120      	movs	r1, #32
 8001410:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2242      	movs	r2, #66	; 0x42
 8001416:	2100      	movs	r1, #0
 8001418:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2240      	movs	r2, #64	; 0x40
 800141e:	2100      	movs	r1, #0
 8001420:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e00f      	b.n	8001446 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	68ba      	ldr	r2, [r7, #8]
 800142e:	4013      	ands	r3, r2
 8001430:	68ba      	ldr	r2, [r7, #8]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	425a      	negs	r2, r3
 8001436:	4153      	adcs	r3, r2
 8001438:	b2db      	uxtb	r3, r3
 800143a:	001a      	movs	r2, r3
 800143c:	1dfb      	adds	r3, r7, #7
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	429a      	cmp	r2, r3
 8001442:	d0ce      	beq.n	80013e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001444:	2300      	movs	r3, #0
}
 8001446:	0018      	movs	r0, r3
 8001448:	46bd      	mov	sp, r7
 800144a:	b004      	add	sp, #16
 800144c:	bd80      	pop	{r7, pc}

0800144e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b084      	sub	sp, #16
 8001452:	af00      	add	r7, sp, #0
 8001454:	60f8      	str	r0, [r7, #12]
 8001456:	60b9      	str	r1, [r7, #8]
 8001458:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800145a:	e02b      	b.n	80014b4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	68b9      	ldr	r1, [r7, #8]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	0018      	movs	r0, r3
 8001464:	f000 f86e 	bl	8001544 <I2C_IsAcknowledgeFailed>
 8001468:	1e03      	subs	r3, r0, #0
 800146a:	d001      	beq.n	8001470 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e029      	b.n	80014c4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	3301      	adds	r3, #1
 8001474:	d01e      	beq.n	80014b4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001476:	f7ff faed 	bl	8000a54 <HAL_GetTick>
 800147a:	0002      	movs	r2, r0
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	68ba      	ldr	r2, [r7, #8]
 8001482:	429a      	cmp	r2, r3
 8001484:	d302      	bcc.n	800148c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d113      	bne.n	80014b4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001490:	2220      	movs	r2, #32
 8001492:	431a      	orrs	r2, r3
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2241      	movs	r2, #65	; 0x41
 800149c:	2120      	movs	r1, #32
 800149e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2242      	movs	r2, #66	; 0x42
 80014a4:	2100      	movs	r1, #0
 80014a6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2240      	movs	r2, #64	; 0x40
 80014ac:	2100      	movs	r1, #0
 80014ae:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e007      	b.n	80014c4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	699b      	ldr	r3, [r3, #24]
 80014ba:	2202      	movs	r2, #2
 80014bc:	4013      	ands	r3, r2
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d1cc      	bne.n	800145c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80014c2:	2300      	movs	r3, #0
}
 80014c4:	0018      	movs	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	b004      	add	sp, #16
 80014ca:	bd80      	pop	{r7, pc}

080014cc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80014d8:	e028      	b.n	800152c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	68b9      	ldr	r1, [r7, #8]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	0018      	movs	r0, r3
 80014e2:	f000 f82f 	bl	8001544 <I2C_IsAcknowledgeFailed>
 80014e6:	1e03      	subs	r3, r0, #0
 80014e8:	d001      	beq.n	80014ee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e026      	b.n	800153c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014ee:	f7ff fab1 	bl	8000a54 <HAL_GetTick>
 80014f2:	0002      	movs	r2, r0
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	68ba      	ldr	r2, [r7, #8]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d302      	bcc.n	8001504 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d113      	bne.n	800152c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001508:	2220      	movs	r2, #32
 800150a:	431a      	orrs	r2, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2241      	movs	r2, #65	; 0x41
 8001514:	2120      	movs	r1, #32
 8001516:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2242      	movs	r2, #66	; 0x42
 800151c:	2100      	movs	r1, #0
 800151e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2240      	movs	r2, #64	; 0x40
 8001524:	2100      	movs	r1, #0
 8001526:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e007      	b.n	800153c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	2220      	movs	r2, #32
 8001534:	4013      	ands	r3, r2
 8001536:	2b20      	cmp	r3, #32
 8001538:	d1cf      	bne.n	80014da <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800153a:	2300      	movs	r3, #0
}
 800153c:	0018      	movs	r0, r3
 800153e:	46bd      	mov	sp, r7
 8001540:	b004      	add	sp, #16
 8001542:	bd80      	pop	{r7, pc}

08001544 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	2210      	movs	r2, #16
 8001558:	4013      	ands	r3, r2
 800155a:	2b10      	cmp	r3, #16
 800155c:	d164      	bne.n	8001628 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	2380      	movs	r3, #128	; 0x80
 8001566:	049b      	lsls	r3, r3, #18
 8001568:	401a      	ands	r2, r3
 800156a:	2380      	movs	r3, #128	; 0x80
 800156c:	049b      	lsls	r3, r3, #18
 800156e:	429a      	cmp	r2, r3
 8001570:	d02b      	beq.n	80015ca <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2180      	movs	r1, #128	; 0x80
 800157e:	01c9      	lsls	r1, r1, #7
 8001580:	430a      	orrs	r2, r1
 8001582:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001584:	e021      	b.n	80015ca <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	3301      	adds	r3, #1
 800158a:	d01e      	beq.n	80015ca <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800158c:	f7ff fa62 	bl	8000a54 <HAL_GetTick>
 8001590:	0002      	movs	r2, r0
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	68ba      	ldr	r2, [r7, #8]
 8001598:	429a      	cmp	r2, r3
 800159a:	d302      	bcc.n	80015a2 <I2C_IsAcknowledgeFailed+0x5e>
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d113      	bne.n	80015ca <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	2220      	movs	r2, #32
 80015a8:	431a      	orrs	r2, r3
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2241      	movs	r2, #65	; 0x41
 80015b2:	2120      	movs	r1, #32
 80015b4:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2242      	movs	r2, #66	; 0x42
 80015ba:	2100      	movs	r1, #0
 80015bc:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	2240      	movs	r2, #64	; 0x40
 80015c2:	2100      	movs	r1, #0
 80015c4:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e02f      	b.n	800162a <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	2220      	movs	r2, #32
 80015d2:	4013      	ands	r3, r2
 80015d4:	2b20      	cmp	r3, #32
 80015d6:	d1d6      	bne.n	8001586 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2210      	movs	r2, #16
 80015de:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2220      	movs	r2, #32
 80015e6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	0018      	movs	r0, r3
 80015ec:	f7ff fece 	bl	800138c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	490e      	ldr	r1, [pc, #56]	; (8001634 <I2C_IsAcknowledgeFailed+0xf0>)
 80015fc:	400a      	ands	r2, r1
 80015fe:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001604:	2204      	movs	r2, #4
 8001606:	431a      	orrs	r2, r3
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2241      	movs	r2, #65	; 0x41
 8001610:	2120      	movs	r1, #32
 8001612:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2242      	movs	r2, #66	; 0x42
 8001618:	2100      	movs	r1, #0
 800161a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2240      	movs	r2, #64	; 0x40
 8001620:	2100      	movs	r1, #0
 8001622:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e000      	b.n	800162a <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	0018      	movs	r0, r3
 800162c:	46bd      	mov	sp, r7
 800162e:	b004      	add	sp, #16
 8001630:	bd80      	pop	{r7, pc}
 8001632:	46c0      	nop			; (mov r8, r8)
 8001634:	fe00e800 	.word	0xfe00e800

08001638 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001638:	b590      	push	{r4, r7, lr}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	0008      	movs	r0, r1
 8001642:	0011      	movs	r1, r2
 8001644:	607b      	str	r3, [r7, #4]
 8001646:	240a      	movs	r4, #10
 8001648:	193b      	adds	r3, r7, r4
 800164a:	1c02      	adds	r2, r0, #0
 800164c:	801a      	strh	r2, [r3, #0]
 800164e:	2009      	movs	r0, #9
 8001650:	183b      	adds	r3, r7, r0
 8001652:	1c0a      	adds	r2, r1, #0
 8001654:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	6a3a      	ldr	r2, [r7, #32]
 800165e:	0d51      	lsrs	r1, r2, #21
 8001660:	2280      	movs	r2, #128	; 0x80
 8001662:	00d2      	lsls	r2, r2, #3
 8001664:	400a      	ands	r2, r1
 8001666:	490e      	ldr	r1, [pc, #56]	; (80016a0 <I2C_TransferConfig+0x68>)
 8001668:	430a      	orrs	r2, r1
 800166a:	43d2      	mvns	r2, r2
 800166c:	401a      	ands	r2, r3
 800166e:	0011      	movs	r1, r2
 8001670:	193b      	adds	r3, r7, r4
 8001672:	881b      	ldrh	r3, [r3, #0]
 8001674:	059b      	lsls	r3, r3, #22
 8001676:	0d9a      	lsrs	r2, r3, #22
 8001678:	183b      	adds	r3, r7, r0
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	0418      	lsls	r0, r3, #16
 800167e:	23ff      	movs	r3, #255	; 0xff
 8001680:	041b      	lsls	r3, r3, #16
 8001682:	4003      	ands	r3, r0
 8001684:	431a      	orrs	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	431a      	orrs	r2, r3
 800168a:	6a3b      	ldr	r3, [r7, #32]
 800168c:	431a      	orrs	r2, r3
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	430a      	orrs	r2, r1
 8001694:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8001696:	46c0      	nop			; (mov r8, r8)
 8001698:	46bd      	mov	sp, r7
 800169a:	b005      	add	sp, #20
 800169c:	bd90      	pop	{r4, r7, pc}
 800169e:	46c0      	nop			; (mov r8, r8)
 80016a0:	03ff63ff 	.word	0x03ff63ff

080016a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2241      	movs	r2, #65	; 0x41
 80016b2:	5c9b      	ldrb	r3, [r3, r2]
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	2b20      	cmp	r3, #32
 80016b8:	d138      	bne.n	800172c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2240      	movs	r2, #64	; 0x40
 80016be:	5c9b      	ldrb	r3, [r3, r2]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d101      	bne.n	80016c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80016c4:	2302      	movs	r3, #2
 80016c6:	e032      	b.n	800172e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2240      	movs	r2, #64	; 0x40
 80016cc:	2101      	movs	r1, #1
 80016ce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2241      	movs	r2, #65	; 0x41
 80016d4:	2124      	movs	r1, #36	; 0x24
 80016d6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2101      	movs	r1, #1
 80016e4:	438a      	bics	r2, r1
 80016e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4911      	ldr	r1, [pc, #68]	; (8001738 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80016f4:	400a      	ands	r2, r1
 80016f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6819      	ldr	r1, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	683a      	ldr	r2, [r7, #0]
 8001704:	430a      	orrs	r2, r1
 8001706:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2101      	movs	r1, #1
 8001714:	430a      	orrs	r2, r1
 8001716:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2241      	movs	r2, #65	; 0x41
 800171c:	2120      	movs	r1, #32
 800171e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2240      	movs	r2, #64	; 0x40
 8001724:	2100      	movs	r1, #0
 8001726:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001728:	2300      	movs	r3, #0
 800172a:	e000      	b.n	800172e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800172c:	2302      	movs	r3, #2
  }
}
 800172e:	0018      	movs	r0, r3
 8001730:	46bd      	mov	sp, r7
 8001732:	b002      	add	sp, #8
 8001734:	bd80      	pop	{r7, pc}
 8001736:	46c0      	nop			; (mov r8, r8)
 8001738:	ffffefff 	.word	0xffffefff

0800173c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2241      	movs	r2, #65	; 0x41
 800174a:	5c9b      	ldrb	r3, [r3, r2]
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b20      	cmp	r3, #32
 8001750:	d139      	bne.n	80017c6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2240      	movs	r2, #64	; 0x40
 8001756:	5c9b      	ldrb	r3, [r3, r2]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d101      	bne.n	8001760 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800175c:	2302      	movs	r3, #2
 800175e:	e033      	b.n	80017c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2240      	movs	r2, #64	; 0x40
 8001764:	2101      	movs	r1, #1
 8001766:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2241      	movs	r2, #65	; 0x41
 800176c:	2124      	movs	r1, #36	; 0x24
 800176e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2101      	movs	r1, #1
 800177c:	438a      	bics	r2, r1
 800177e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	4a11      	ldr	r2, [pc, #68]	; (80017d0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800178c:	4013      	ands	r3, r2
 800178e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	021b      	lsls	r3, r3, #8
 8001794:	68fa      	ldr	r2, [r7, #12]
 8001796:	4313      	orrs	r3, r2
 8001798:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2101      	movs	r1, #1
 80017ae:	430a      	orrs	r2, r1
 80017b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2241      	movs	r2, #65	; 0x41
 80017b6:	2120      	movs	r1, #32
 80017b8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2240      	movs	r2, #64	; 0x40
 80017be:	2100      	movs	r1, #0
 80017c0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80017c2:	2300      	movs	r3, #0
 80017c4:	e000      	b.n	80017c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80017c6:	2302      	movs	r3, #2
  }
}
 80017c8:	0018      	movs	r0, r3
 80017ca:	46bd      	mov	sp, r7
 80017cc:	b004      	add	sp, #16
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	fffff0ff 	.word	0xfffff0ff

080017d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b088      	sub	sp, #32
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d101      	bne.n	80017e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e301      	b.n	8001dea <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2201      	movs	r2, #1
 80017ec:	4013      	ands	r3, r2
 80017ee:	d100      	bne.n	80017f2 <HAL_RCC_OscConfig+0x1e>
 80017f0:	e08d      	b.n	800190e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80017f2:	4bc3      	ldr	r3, [pc, #780]	; (8001b00 <HAL_RCC_OscConfig+0x32c>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	220c      	movs	r2, #12
 80017f8:	4013      	ands	r3, r2
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	d00e      	beq.n	800181c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017fe:	4bc0      	ldr	r3, [pc, #768]	; (8001b00 <HAL_RCC_OscConfig+0x32c>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	220c      	movs	r2, #12
 8001804:	4013      	ands	r3, r2
 8001806:	2b08      	cmp	r3, #8
 8001808:	d116      	bne.n	8001838 <HAL_RCC_OscConfig+0x64>
 800180a:	4bbd      	ldr	r3, [pc, #756]	; (8001b00 <HAL_RCC_OscConfig+0x32c>)
 800180c:	685a      	ldr	r2, [r3, #4]
 800180e:	2380      	movs	r3, #128	; 0x80
 8001810:	025b      	lsls	r3, r3, #9
 8001812:	401a      	ands	r2, r3
 8001814:	2380      	movs	r3, #128	; 0x80
 8001816:	025b      	lsls	r3, r3, #9
 8001818:	429a      	cmp	r2, r3
 800181a:	d10d      	bne.n	8001838 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800181c:	4bb8      	ldr	r3, [pc, #736]	; (8001b00 <HAL_RCC_OscConfig+0x32c>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	2380      	movs	r3, #128	; 0x80
 8001822:	029b      	lsls	r3, r3, #10
 8001824:	4013      	ands	r3, r2
 8001826:	d100      	bne.n	800182a <HAL_RCC_OscConfig+0x56>
 8001828:	e070      	b.n	800190c <HAL_RCC_OscConfig+0x138>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d000      	beq.n	8001834 <HAL_RCC_OscConfig+0x60>
 8001832:	e06b      	b.n	800190c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e2d8      	b.n	8001dea <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d107      	bne.n	8001850 <HAL_RCC_OscConfig+0x7c>
 8001840:	4baf      	ldr	r3, [pc, #700]	; (8001b00 <HAL_RCC_OscConfig+0x32c>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	4bae      	ldr	r3, [pc, #696]	; (8001b00 <HAL_RCC_OscConfig+0x32c>)
 8001846:	2180      	movs	r1, #128	; 0x80
 8001848:	0249      	lsls	r1, r1, #9
 800184a:	430a      	orrs	r2, r1
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	e02f      	b.n	80018b0 <HAL_RCC_OscConfig+0xdc>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d10c      	bne.n	8001872 <HAL_RCC_OscConfig+0x9e>
 8001858:	4ba9      	ldr	r3, [pc, #676]	; (8001b00 <HAL_RCC_OscConfig+0x32c>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	4ba8      	ldr	r3, [pc, #672]	; (8001b00 <HAL_RCC_OscConfig+0x32c>)
 800185e:	49a9      	ldr	r1, [pc, #676]	; (8001b04 <HAL_RCC_OscConfig+0x330>)
 8001860:	400a      	ands	r2, r1
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	4ba6      	ldr	r3, [pc, #664]	; (8001b00 <HAL_RCC_OscConfig+0x32c>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	4ba5      	ldr	r3, [pc, #660]	; (8001b00 <HAL_RCC_OscConfig+0x32c>)
 800186a:	49a7      	ldr	r1, [pc, #668]	; (8001b08 <HAL_RCC_OscConfig+0x334>)
 800186c:	400a      	ands	r2, r1
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	e01e      	b.n	80018b0 <HAL_RCC_OscConfig+0xdc>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b05      	cmp	r3, #5
 8001878:	d10e      	bne.n	8001898 <HAL_RCC_OscConfig+0xc4>
 800187a:	4ba1      	ldr	r3, [pc, #644]	; (8001b00 <HAL_RCC_OscConfig+0x32c>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	4ba0      	ldr	r3, [pc, #640]	; (8001b00 <HAL_RCC_OscConfig+0x32c>)
 8001880:	2180      	movs	r1, #128	; 0x80
 8001882:	02c9      	lsls	r1, r1, #11
 8001884:	430a      	orrs	r2, r1
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	4b9d      	ldr	r3, [pc, #628]	; (8001b00 <HAL_RCC_OscConfig+0x32c>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	4b9c      	ldr	r3, [pc, #624]	; (8001b00 <HAL_RCC_OscConfig+0x32c>)
 800188e:	2180      	movs	r1, #128	; 0x80
 8001890:	0249      	lsls	r1, r1, #9
 8001892:	430a      	orrs	r2, r1
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	e00b      	b.n	80018b0 <HAL_RCC_OscConfig+0xdc>
 8001898:	4b99      	ldr	r3, [pc, #612]	; (8001b00 <HAL_RCC_OscConfig+0x32c>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4b98      	ldr	r3, [pc, #608]	; (8001b00 <HAL_RCC_OscConfig+0x32c>)
 800189e:	4999      	ldr	r1, [pc, #612]	; (8001b04 <HAL_RCC_OscConfig+0x330>)
 80018a0:	400a      	ands	r2, r1
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	4b96      	ldr	r3, [pc, #600]	; (8001b00 <HAL_RCC_OscConfig+0x32c>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4b95      	ldr	r3, [pc, #596]	; (8001b00 <HAL_RCC_OscConfig+0x32c>)
 80018aa:	4997      	ldr	r1, [pc, #604]	; (8001b08 <HAL_RCC_OscConfig+0x334>)
 80018ac:	400a      	ands	r2, r1
 80018ae:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d014      	beq.n	80018e2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b8:	f7ff f8cc 	bl	8000a54 <HAL_GetTick>
 80018bc:	0003      	movs	r3, r0
 80018be:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018c2:	f7ff f8c7 	bl	8000a54 <HAL_GetTick>
 80018c6:	0002      	movs	r2, r0
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b64      	cmp	r3, #100	; 0x64
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e28a      	b.n	8001dea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018d4:	4b8a      	ldr	r3, [pc, #552]	; (8001b00 <HAL_RCC_OscConfig+0x32c>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	2380      	movs	r3, #128	; 0x80
 80018da:	029b      	lsls	r3, r3, #10
 80018dc:	4013      	ands	r3, r2
 80018de:	d0f0      	beq.n	80018c2 <HAL_RCC_OscConfig+0xee>
 80018e0:	e015      	b.n	800190e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e2:	f7ff f8b7 	bl	8000a54 <HAL_GetTick>
 80018e6:	0003      	movs	r3, r0
 80018e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018ec:	f7ff f8b2 	bl	8000a54 <HAL_GetTick>
 80018f0:	0002      	movs	r2, r0
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b64      	cmp	r3, #100	; 0x64
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e275      	b.n	8001dea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018fe:	4b80      	ldr	r3, [pc, #512]	; (8001b00 <HAL_RCC_OscConfig+0x32c>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	2380      	movs	r3, #128	; 0x80
 8001904:	029b      	lsls	r3, r3, #10
 8001906:	4013      	ands	r3, r2
 8001908:	d1f0      	bne.n	80018ec <HAL_RCC_OscConfig+0x118>
 800190a:	e000      	b.n	800190e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800190c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2202      	movs	r2, #2
 8001914:	4013      	ands	r3, r2
 8001916:	d100      	bne.n	800191a <HAL_RCC_OscConfig+0x146>
 8001918:	e069      	b.n	80019ee <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800191a:	4b79      	ldr	r3, [pc, #484]	; (8001b00 <HAL_RCC_OscConfig+0x32c>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	220c      	movs	r2, #12
 8001920:	4013      	ands	r3, r2
 8001922:	d00b      	beq.n	800193c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001924:	4b76      	ldr	r3, [pc, #472]	; (8001b00 <HAL_RCC_OscConfig+0x32c>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	220c      	movs	r2, #12
 800192a:	4013      	ands	r3, r2
 800192c:	2b08      	cmp	r3, #8
 800192e:	d11c      	bne.n	800196a <HAL_RCC_OscConfig+0x196>
 8001930:	4b73      	ldr	r3, [pc, #460]	; (8001b00 <HAL_RCC_OscConfig+0x32c>)
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	2380      	movs	r3, #128	; 0x80
 8001936:	025b      	lsls	r3, r3, #9
 8001938:	4013      	ands	r3, r2
 800193a:	d116      	bne.n	800196a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800193c:	4b70      	ldr	r3, [pc, #448]	; (8001b00 <HAL_RCC_OscConfig+0x32c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2202      	movs	r2, #2
 8001942:	4013      	ands	r3, r2
 8001944:	d005      	beq.n	8001952 <HAL_RCC_OscConfig+0x17e>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d001      	beq.n	8001952 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e24b      	b.n	8001dea <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001952:	4b6b      	ldr	r3, [pc, #428]	; (8001b00 <HAL_RCC_OscConfig+0x32c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	22f8      	movs	r2, #248	; 0xf8
 8001958:	4393      	bics	r3, r2
 800195a:	0019      	movs	r1, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	691b      	ldr	r3, [r3, #16]
 8001960:	00da      	lsls	r2, r3, #3
 8001962:	4b67      	ldr	r3, [pc, #412]	; (8001b00 <HAL_RCC_OscConfig+0x32c>)
 8001964:	430a      	orrs	r2, r1
 8001966:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001968:	e041      	b.n	80019ee <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d024      	beq.n	80019bc <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001972:	4b63      	ldr	r3, [pc, #396]	; (8001b00 <HAL_RCC_OscConfig+0x32c>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	4b62      	ldr	r3, [pc, #392]	; (8001b00 <HAL_RCC_OscConfig+0x32c>)
 8001978:	2101      	movs	r1, #1
 800197a:	430a      	orrs	r2, r1
 800197c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197e:	f7ff f869 	bl	8000a54 <HAL_GetTick>
 8001982:	0003      	movs	r3, r0
 8001984:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001988:	f7ff f864 	bl	8000a54 <HAL_GetTick>
 800198c:	0002      	movs	r2, r0
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e227      	b.n	8001dea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800199a:	4b59      	ldr	r3, [pc, #356]	; (8001b00 <HAL_RCC_OscConfig+0x32c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2202      	movs	r2, #2
 80019a0:	4013      	ands	r3, r2
 80019a2:	d0f1      	beq.n	8001988 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a4:	4b56      	ldr	r3, [pc, #344]	; (8001b00 <HAL_RCC_OscConfig+0x32c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	22f8      	movs	r2, #248	; 0xf8
 80019aa:	4393      	bics	r3, r2
 80019ac:	0019      	movs	r1, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	00da      	lsls	r2, r3, #3
 80019b4:	4b52      	ldr	r3, [pc, #328]	; (8001b00 <HAL_RCC_OscConfig+0x32c>)
 80019b6:	430a      	orrs	r2, r1
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	e018      	b.n	80019ee <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019bc:	4b50      	ldr	r3, [pc, #320]	; (8001b00 <HAL_RCC_OscConfig+0x32c>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	4b4f      	ldr	r3, [pc, #316]	; (8001b00 <HAL_RCC_OscConfig+0x32c>)
 80019c2:	2101      	movs	r1, #1
 80019c4:	438a      	bics	r2, r1
 80019c6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c8:	f7ff f844 	bl	8000a54 <HAL_GetTick>
 80019cc:	0003      	movs	r3, r0
 80019ce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019d2:	f7ff f83f 	bl	8000a54 <HAL_GetTick>
 80019d6:	0002      	movs	r2, r0
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e202      	b.n	8001dea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019e4:	4b46      	ldr	r3, [pc, #280]	; (8001b00 <HAL_RCC_OscConfig+0x32c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2202      	movs	r2, #2
 80019ea:	4013      	ands	r3, r2
 80019ec:	d1f1      	bne.n	80019d2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2208      	movs	r2, #8
 80019f4:	4013      	ands	r3, r2
 80019f6:	d036      	beq.n	8001a66 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	69db      	ldr	r3, [r3, #28]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d019      	beq.n	8001a34 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a00:	4b3f      	ldr	r3, [pc, #252]	; (8001b00 <HAL_RCC_OscConfig+0x32c>)
 8001a02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a04:	4b3e      	ldr	r3, [pc, #248]	; (8001b00 <HAL_RCC_OscConfig+0x32c>)
 8001a06:	2101      	movs	r1, #1
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a0c:	f7ff f822 	bl	8000a54 <HAL_GetTick>
 8001a10:	0003      	movs	r3, r0
 8001a12:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a14:	e008      	b.n	8001a28 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a16:	f7ff f81d 	bl	8000a54 <HAL_GetTick>
 8001a1a:	0002      	movs	r2, r0
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e1e0      	b.n	8001dea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a28:	4b35      	ldr	r3, [pc, #212]	; (8001b00 <HAL_RCC_OscConfig+0x32c>)
 8001a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2c:	2202      	movs	r2, #2
 8001a2e:	4013      	ands	r3, r2
 8001a30:	d0f1      	beq.n	8001a16 <HAL_RCC_OscConfig+0x242>
 8001a32:	e018      	b.n	8001a66 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a34:	4b32      	ldr	r3, [pc, #200]	; (8001b00 <HAL_RCC_OscConfig+0x32c>)
 8001a36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a38:	4b31      	ldr	r3, [pc, #196]	; (8001b00 <HAL_RCC_OscConfig+0x32c>)
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	438a      	bics	r2, r1
 8001a3e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a40:	f7ff f808 	bl	8000a54 <HAL_GetTick>
 8001a44:	0003      	movs	r3, r0
 8001a46:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a4a:	f7ff f803 	bl	8000a54 <HAL_GetTick>
 8001a4e:	0002      	movs	r2, r0
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e1c6      	b.n	8001dea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a5c:	4b28      	ldr	r3, [pc, #160]	; (8001b00 <HAL_RCC_OscConfig+0x32c>)
 8001a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a60:	2202      	movs	r2, #2
 8001a62:	4013      	ands	r3, r2
 8001a64:	d1f1      	bne.n	8001a4a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2204      	movs	r2, #4
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	d100      	bne.n	8001a72 <HAL_RCC_OscConfig+0x29e>
 8001a70:	e0b4      	b.n	8001bdc <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a72:	201f      	movs	r0, #31
 8001a74:	183b      	adds	r3, r7, r0
 8001a76:	2200      	movs	r2, #0
 8001a78:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a7a:	4b21      	ldr	r3, [pc, #132]	; (8001b00 <HAL_RCC_OscConfig+0x32c>)
 8001a7c:	69da      	ldr	r2, [r3, #28]
 8001a7e:	2380      	movs	r3, #128	; 0x80
 8001a80:	055b      	lsls	r3, r3, #21
 8001a82:	4013      	ands	r3, r2
 8001a84:	d110      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a86:	4b1e      	ldr	r3, [pc, #120]	; (8001b00 <HAL_RCC_OscConfig+0x32c>)
 8001a88:	69da      	ldr	r2, [r3, #28]
 8001a8a:	4b1d      	ldr	r3, [pc, #116]	; (8001b00 <HAL_RCC_OscConfig+0x32c>)
 8001a8c:	2180      	movs	r1, #128	; 0x80
 8001a8e:	0549      	lsls	r1, r1, #21
 8001a90:	430a      	orrs	r2, r1
 8001a92:	61da      	str	r2, [r3, #28]
 8001a94:	4b1a      	ldr	r3, [pc, #104]	; (8001b00 <HAL_RCC_OscConfig+0x32c>)
 8001a96:	69da      	ldr	r2, [r3, #28]
 8001a98:	2380      	movs	r3, #128	; 0x80
 8001a9a:	055b      	lsls	r3, r3, #21
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001aa2:	183b      	adds	r3, r7, r0
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa8:	4b18      	ldr	r3, [pc, #96]	; (8001b0c <HAL_RCC_OscConfig+0x338>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	2380      	movs	r3, #128	; 0x80
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	d11a      	bne.n	8001aea <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ab4:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <HAL_RCC_OscConfig+0x338>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	4b14      	ldr	r3, [pc, #80]	; (8001b0c <HAL_RCC_OscConfig+0x338>)
 8001aba:	2180      	movs	r1, #128	; 0x80
 8001abc:	0049      	lsls	r1, r1, #1
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ac2:	f7fe ffc7 	bl	8000a54 <HAL_GetTick>
 8001ac6:	0003      	movs	r3, r0
 8001ac8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001acc:	f7fe ffc2 	bl	8000a54 <HAL_GetTick>
 8001ad0:	0002      	movs	r2, r0
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b64      	cmp	r3, #100	; 0x64
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e185      	b.n	8001dea <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ade:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <HAL_RCC_OscConfig+0x338>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	2380      	movs	r3, #128	; 0x80
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d0f0      	beq.n	8001acc <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d10e      	bne.n	8001b10 <HAL_RCC_OscConfig+0x33c>
 8001af2:	4b03      	ldr	r3, [pc, #12]	; (8001b00 <HAL_RCC_OscConfig+0x32c>)
 8001af4:	6a1a      	ldr	r2, [r3, #32]
 8001af6:	4b02      	ldr	r3, [pc, #8]	; (8001b00 <HAL_RCC_OscConfig+0x32c>)
 8001af8:	2101      	movs	r1, #1
 8001afa:	430a      	orrs	r2, r1
 8001afc:	621a      	str	r2, [r3, #32]
 8001afe:	e035      	b.n	8001b6c <HAL_RCC_OscConfig+0x398>
 8001b00:	40021000 	.word	0x40021000
 8001b04:	fffeffff 	.word	0xfffeffff
 8001b08:	fffbffff 	.word	0xfffbffff
 8001b0c:	40007000 	.word	0x40007000
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d10c      	bne.n	8001b32 <HAL_RCC_OscConfig+0x35e>
 8001b18:	4bb6      	ldr	r3, [pc, #728]	; (8001df4 <HAL_RCC_OscConfig+0x620>)
 8001b1a:	6a1a      	ldr	r2, [r3, #32]
 8001b1c:	4bb5      	ldr	r3, [pc, #724]	; (8001df4 <HAL_RCC_OscConfig+0x620>)
 8001b1e:	2101      	movs	r1, #1
 8001b20:	438a      	bics	r2, r1
 8001b22:	621a      	str	r2, [r3, #32]
 8001b24:	4bb3      	ldr	r3, [pc, #716]	; (8001df4 <HAL_RCC_OscConfig+0x620>)
 8001b26:	6a1a      	ldr	r2, [r3, #32]
 8001b28:	4bb2      	ldr	r3, [pc, #712]	; (8001df4 <HAL_RCC_OscConfig+0x620>)
 8001b2a:	2104      	movs	r1, #4
 8001b2c:	438a      	bics	r2, r1
 8001b2e:	621a      	str	r2, [r3, #32]
 8001b30:	e01c      	b.n	8001b6c <HAL_RCC_OscConfig+0x398>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	2b05      	cmp	r3, #5
 8001b38:	d10c      	bne.n	8001b54 <HAL_RCC_OscConfig+0x380>
 8001b3a:	4bae      	ldr	r3, [pc, #696]	; (8001df4 <HAL_RCC_OscConfig+0x620>)
 8001b3c:	6a1a      	ldr	r2, [r3, #32]
 8001b3e:	4bad      	ldr	r3, [pc, #692]	; (8001df4 <HAL_RCC_OscConfig+0x620>)
 8001b40:	2104      	movs	r1, #4
 8001b42:	430a      	orrs	r2, r1
 8001b44:	621a      	str	r2, [r3, #32]
 8001b46:	4bab      	ldr	r3, [pc, #684]	; (8001df4 <HAL_RCC_OscConfig+0x620>)
 8001b48:	6a1a      	ldr	r2, [r3, #32]
 8001b4a:	4baa      	ldr	r3, [pc, #680]	; (8001df4 <HAL_RCC_OscConfig+0x620>)
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	621a      	str	r2, [r3, #32]
 8001b52:	e00b      	b.n	8001b6c <HAL_RCC_OscConfig+0x398>
 8001b54:	4ba7      	ldr	r3, [pc, #668]	; (8001df4 <HAL_RCC_OscConfig+0x620>)
 8001b56:	6a1a      	ldr	r2, [r3, #32]
 8001b58:	4ba6      	ldr	r3, [pc, #664]	; (8001df4 <HAL_RCC_OscConfig+0x620>)
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	438a      	bics	r2, r1
 8001b5e:	621a      	str	r2, [r3, #32]
 8001b60:	4ba4      	ldr	r3, [pc, #656]	; (8001df4 <HAL_RCC_OscConfig+0x620>)
 8001b62:	6a1a      	ldr	r2, [r3, #32]
 8001b64:	4ba3      	ldr	r3, [pc, #652]	; (8001df4 <HAL_RCC_OscConfig+0x620>)
 8001b66:	2104      	movs	r1, #4
 8001b68:	438a      	bics	r2, r1
 8001b6a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d014      	beq.n	8001b9e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b74:	f7fe ff6e 	bl	8000a54 <HAL_GetTick>
 8001b78:	0003      	movs	r3, r0
 8001b7a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b7c:	e009      	b.n	8001b92 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b7e:	f7fe ff69 	bl	8000a54 <HAL_GetTick>
 8001b82:	0002      	movs	r2, r0
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	4a9b      	ldr	r2, [pc, #620]	; (8001df8 <HAL_RCC_OscConfig+0x624>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e12b      	b.n	8001dea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b92:	4b98      	ldr	r3, [pc, #608]	; (8001df4 <HAL_RCC_OscConfig+0x620>)
 8001b94:	6a1b      	ldr	r3, [r3, #32]
 8001b96:	2202      	movs	r2, #2
 8001b98:	4013      	ands	r3, r2
 8001b9a:	d0f0      	beq.n	8001b7e <HAL_RCC_OscConfig+0x3aa>
 8001b9c:	e013      	b.n	8001bc6 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b9e:	f7fe ff59 	bl	8000a54 <HAL_GetTick>
 8001ba2:	0003      	movs	r3, r0
 8001ba4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ba6:	e009      	b.n	8001bbc <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ba8:	f7fe ff54 	bl	8000a54 <HAL_GetTick>
 8001bac:	0002      	movs	r2, r0
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	4a91      	ldr	r2, [pc, #580]	; (8001df8 <HAL_RCC_OscConfig+0x624>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e116      	b.n	8001dea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bbc:	4b8d      	ldr	r3, [pc, #564]	; (8001df4 <HAL_RCC_OscConfig+0x620>)
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	2202      	movs	r2, #2
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d1f0      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bc6:	231f      	movs	r3, #31
 8001bc8:	18fb      	adds	r3, r7, r3
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d105      	bne.n	8001bdc <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bd0:	4b88      	ldr	r3, [pc, #544]	; (8001df4 <HAL_RCC_OscConfig+0x620>)
 8001bd2:	69da      	ldr	r2, [r3, #28]
 8001bd4:	4b87      	ldr	r3, [pc, #540]	; (8001df4 <HAL_RCC_OscConfig+0x620>)
 8001bd6:	4989      	ldr	r1, [pc, #548]	; (8001dfc <HAL_RCC_OscConfig+0x628>)
 8001bd8:	400a      	ands	r2, r1
 8001bda:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2210      	movs	r2, #16
 8001be2:	4013      	ands	r3, r2
 8001be4:	d063      	beq.n	8001cae <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d12a      	bne.n	8001c44 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001bee:	4b81      	ldr	r3, [pc, #516]	; (8001df4 <HAL_RCC_OscConfig+0x620>)
 8001bf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bf2:	4b80      	ldr	r3, [pc, #512]	; (8001df4 <HAL_RCC_OscConfig+0x620>)
 8001bf4:	2104      	movs	r1, #4
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001bfa:	4b7e      	ldr	r3, [pc, #504]	; (8001df4 <HAL_RCC_OscConfig+0x620>)
 8001bfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bfe:	4b7d      	ldr	r3, [pc, #500]	; (8001df4 <HAL_RCC_OscConfig+0x620>)
 8001c00:	2101      	movs	r1, #1
 8001c02:	430a      	orrs	r2, r1
 8001c04:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c06:	f7fe ff25 	bl	8000a54 <HAL_GetTick>
 8001c0a:	0003      	movs	r3, r0
 8001c0c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001c10:	f7fe ff20 	bl	8000a54 <HAL_GetTick>
 8001c14:	0002      	movs	r2, r0
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e0e3      	b.n	8001dea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001c22:	4b74      	ldr	r3, [pc, #464]	; (8001df4 <HAL_RCC_OscConfig+0x620>)
 8001c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c26:	2202      	movs	r2, #2
 8001c28:	4013      	ands	r3, r2
 8001c2a:	d0f1      	beq.n	8001c10 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001c2c:	4b71      	ldr	r3, [pc, #452]	; (8001df4 <HAL_RCC_OscConfig+0x620>)
 8001c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c30:	22f8      	movs	r2, #248	; 0xf8
 8001c32:	4393      	bics	r3, r2
 8001c34:	0019      	movs	r1, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	00da      	lsls	r2, r3, #3
 8001c3c:	4b6d      	ldr	r3, [pc, #436]	; (8001df4 <HAL_RCC_OscConfig+0x620>)
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	635a      	str	r2, [r3, #52]	; 0x34
 8001c42:	e034      	b.n	8001cae <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	695b      	ldr	r3, [r3, #20]
 8001c48:	3305      	adds	r3, #5
 8001c4a:	d111      	bne.n	8001c70 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001c4c:	4b69      	ldr	r3, [pc, #420]	; (8001df4 <HAL_RCC_OscConfig+0x620>)
 8001c4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c50:	4b68      	ldr	r3, [pc, #416]	; (8001df4 <HAL_RCC_OscConfig+0x620>)
 8001c52:	2104      	movs	r1, #4
 8001c54:	438a      	bics	r2, r1
 8001c56:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001c58:	4b66      	ldr	r3, [pc, #408]	; (8001df4 <HAL_RCC_OscConfig+0x620>)
 8001c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c5c:	22f8      	movs	r2, #248	; 0xf8
 8001c5e:	4393      	bics	r3, r2
 8001c60:	0019      	movs	r1, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	00da      	lsls	r2, r3, #3
 8001c68:	4b62      	ldr	r3, [pc, #392]	; (8001df4 <HAL_RCC_OscConfig+0x620>)
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	635a      	str	r2, [r3, #52]	; 0x34
 8001c6e:	e01e      	b.n	8001cae <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001c70:	4b60      	ldr	r3, [pc, #384]	; (8001df4 <HAL_RCC_OscConfig+0x620>)
 8001c72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c74:	4b5f      	ldr	r3, [pc, #380]	; (8001df4 <HAL_RCC_OscConfig+0x620>)
 8001c76:	2104      	movs	r1, #4
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001c7c:	4b5d      	ldr	r3, [pc, #372]	; (8001df4 <HAL_RCC_OscConfig+0x620>)
 8001c7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c80:	4b5c      	ldr	r3, [pc, #368]	; (8001df4 <HAL_RCC_OscConfig+0x620>)
 8001c82:	2101      	movs	r1, #1
 8001c84:	438a      	bics	r2, r1
 8001c86:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c88:	f7fe fee4 	bl	8000a54 <HAL_GetTick>
 8001c8c:	0003      	movs	r3, r0
 8001c8e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001c92:	f7fe fedf 	bl	8000a54 <HAL_GetTick>
 8001c96:	0002      	movs	r2, r0
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e0a2      	b.n	8001dea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001ca4:	4b53      	ldr	r3, [pc, #332]	; (8001df4 <HAL_RCC_OscConfig+0x620>)
 8001ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ca8:	2202      	movs	r2, #2
 8001caa:	4013      	ands	r3, r2
 8001cac:	d1f1      	bne.n	8001c92 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d100      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x4e4>
 8001cb6:	e097      	b.n	8001de8 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cb8:	4b4e      	ldr	r3, [pc, #312]	; (8001df4 <HAL_RCC_OscConfig+0x620>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	220c      	movs	r2, #12
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	2b08      	cmp	r3, #8
 8001cc2:	d100      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x4f2>
 8001cc4:	e06b      	b.n	8001d9e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d14c      	bne.n	8001d68 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cce:	4b49      	ldr	r3, [pc, #292]	; (8001df4 <HAL_RCC_OscConfig+0x620>)
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	4b48      	ldr	r3, [pc, #288]	; (8001df4 <HAL_RCC_OscConfig+0x620>)
 8001cd4:	494a      	ldr	r1, [pc, #296]	; (8001e00 <HAL_RCC_OscConfig+0x62c>)
 8001cd6:	400a      	ands	r2, r1
 8001cd8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cda:	f7fe febb 	bl	8000a54 <HAL_GetTick>
 8001cde:	0003      	movs	r3, r0
 8001ce0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ce4:	f7fe feb6 	bl	8000a54 <HAL_GetTick>
 8001ce8:	0002      	movs	r2, r0
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e079      	b.n	8001dea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cf6:	4b3f      	ldr	r3, [pc, #252]	; (8001df4 <HAL_RCC_OscConfig+0x620>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	2380      	movs	r3, #128	; 0x80
 8001cfc:	049b      	lsls	r3, r3, #18
 8001cfe:	4013      	ands	r3, r2
 8001d00:	d1f0      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d02:	4b3c      	ldr	r3, [pc, #240]	; (8001df4 <HAL_RCC_OscConfig+0x620>)
 8001d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d06:	220f      	movs	r2, #15
 8001d08:	4393      	bics	r3, r2
 8001d0a:	0019      	movs	r1, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d10:	4b38      	ldr	r3, [pc, #224]	; (8001df4 <HAL_RCC_OscConfig+0x620>)
 8001d12:	430a      	orrs	r2, r1
 8001d14:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d16:	4b37      	ldr	r3, [pc, #220]	; (8001df4 <HAL_RCC_OscConfig+0x620>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	4a3a      	ldr	r2, [pc, #232]	; (8001e04 <HAL_RCC_OscConfig+0x630>)
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	0019      	movs	r1, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d28:	431a      	orrs	r2, r3
 8001d2a:	4b32      	ldr	r3, [pc, #200]	; (8001df4 <HAL_RCC_OscConfig+0x620>)
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d30:	4b30      	ldr	r3, [pc, #192]	; (8001df4 <HAL_RCC_OscConfig+0x620>)
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	4b2f      	ldr	r3, [pc, #188]	; (8001df4 <HAL_RCC_OscConfig+0x620>)
 8001d36:	2180      	movs	r1, #128	; 0x80
 8001d38:	0449      	lsls	r1, r1, #17
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3e:	f7fe fe89 	bl	8000a54 <HAL_GetTick>
 8001d42:	0003      	movs	r3, r0
 8001d44:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d48:	f7fe fe84 	bl	8000a54 <HAL_GetTick>
 8001d4c:	0002      	movs	r2, r0
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e047      	b.n	8001dea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d5a:	4b26      	ldr	r3, [pc, #152]	; (8001df4 <HAL_RCC_OscConfig+0x620>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	2380      	movs	r3, #128	; 0x80
 8001d60:	049b      	lsls	r3, r3, #18
 8001d62:	4013      	ands	r3, r2
 8001d64:	d0f0      	beq.n	8001d48 <HAL_RCC_OscConfig+0x574>
 8001d66:	e03f      	b.n	8001de8 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d68:	4b22      	ldr	r3, [pc, #136]	; (8001df4 <HAL_RCC_OscConfig+0x620>)
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	4b21      	ldr	r3, [pc, #132]	; (8001df4 <HAL_RCC_OscConfig+0x620>)
 8001d6e:	4924      	ldr	r1, [pc, #144]	; (8001e00 <HAL_RCC_OscConfig+0x62c>)
 8001d70:	400a      	ands	r2, r1
 8001d72:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d74:	f7fe fe6e 	bl	8000a54 <HAL_GetTick>
 8001d78:	0003      	movs	r3, r0
 8001d7a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d7e:	f7fe fe69 	bl	8000a54 <HAL_GetTick>
 8001d82:	0002      	movs	r2, r0
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e02c      	b.n	8001dea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d90:	4b18      	ldr	r3, [pc, #96]	; (8001df4 <HAL_RCC_OscConfig+0x620>)
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	2380      	movs	r3, #128	; 0x80
 8001d96:	049b      	lsls	r3, r3, #18
 8001d98:	4013      	ands	r3, r2
 8001d9a:	d1f0      	bne.n	8001d7e <HAL_RCC_OscConfig+0x5aa>
 8001d9c:	e024      	b.n	8001de8 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a1b      	ldr	r3, [r3, #32]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d101      	bne.n	8001daa <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e01f      	b.n	8001dea <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001daa:	4b12      	ldr	r3, [pc, #72]	; (8001df4 <HAL_RCC_OscConfig+0x620>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001db0:	4b10      	ldr	r3, [pc, #64]	; (8001df4 <HAL_RCC_OscConfig+0x620>)
 8001db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	2380      	movs	r3, #128	; 0x80
 8001dba:	025b      	lsls	r3, r3, #9
 8001dbc:	401a      	ands	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d10e      	bne.n	8001de4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	220f      	movs	r2, #15
 8001dca:	401a      	ands	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d107      	bne.n	8001de4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001dd4:	697a      	ldr	r2, [r7, #20]
 8001dd6:	23f0      	movs	r3, #240	; 0xf0
 8001dd8:	039b      	lsls	r3, r3, #14
 8001dda:	401a      	ands	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d001      	beq.n	8001de8 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e000      	b.n	8001dea <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	0018      	movs	r0, r3
 8001dec:	46bd      	mov	sp, r7
 8001dee:	b008      	add	sp, #32
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	46c0      	nop			; (mov r8, r8)
 8001df4:	40021000 	.word	0x40021000
 8001df8:	00001388 	.word	0x00001388
 8001dfc:	efffffff 	.word	0xefffffff
 8001e00:	feffffff 	.word	0xfeffffff
 8001e04:	ffc2ffff 	.word	0xffc2ffff

08001e08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d101      	bne.n	8001e1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e0b3      	b.n	8001f84 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e1c:	4b5b      	ldr	r3, [pc, #364]	; (8001f8c <HAL_RCC_ClockConfig+0x184>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2201      	movs	r2, #1
 8001e22:	4013      	ands	r3, r2
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d911      	bls.n	8001e4e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e2a:	4b58      	ldr	r3, [pc, #352]	; (8001f8c <HAL_RCC_ClockConfig+0x184>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	4393      	bics	r3, r2
 8001e32:	0019      	movs	r1, r3
 8001e34:	4b55      	ldr	r3, [pc, #340]	; (8001f8c <HAL_RCC_ClockConfig+0x184>)
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e3c:	4b53      	ldr	r3, [pc, #332]	; (8001f8c <HAL_RCC_ClockConfig+0x184>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2201      	movs	r2, #1
 8001e42:	4013      	ands	r3, r2
 8001e44:	683a      	ldr	r2, [r7, #0]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d001      	beq.n	8001e4e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e09a      	b.n	8001f84 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2202      	movs	r2, #2
 8001e54:	4013      	ands	r3, r2
 8001e56:	d015      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2204      	movs	r2, #4
 8001e5e:	4013      	ands	r3, r2
 8001e60:	d006      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001e62:	4b4b      	ldr	r3, [pc, #300]	; (8001f90 <HAL_RCC_ClockConfig+0x188>)
 8001e64:	685a      	ldr	r2, [r3, #4]
 8001e66:	4b4a      	ldr	r3, [pc, #296]	; (8001f90 <HAL_RCC_ClockConfig+0x188>)
 8001e68:	21e0      	movs	r1, #224	; 0xe0
 8001e6a:	00c9      	lsls	r1, r1, #3
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e70:	4b47      	ldr	r3, [pc, #284]	; (8001f90 <HAL_RCC_ClockConfig+0x188>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	22f0      	movs	r2, #240	; 0xf0
 8001e76:	4393      	bics	r3, r2
 8001e78:	0019      	movs	r1, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689a      	ldr	r2, [r3, #8]
 8001e7e:	4b44      	ldr	r3, [pc, #272]	; (8001f90 <HAL_RCC_ClockConfig+0x188>)
 8001e80:	430a      	orrs	r2, r1
 8001e82:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	d040      	beq.n	8001f10 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d107      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e96:	4b3e      	ldr	r3, [pc, #248]	; (8001f90 <HAL_RCC_ClockConfig+0x188>)
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	2380      	movs	r3, #128	; 0x80
 8001e9c:	029b      	lsls	r3, r3, #10
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	d114      	bne.n	8001ecc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e06e      	b.n	8001f84 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d107      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eae:	4b38      	ldr	r3, [pc, #224]	; (8001f90 <HAL_RCC_ClockConfig+0x188>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	2380      	movs	r3, #128	; 0x80
 8001eb4:	049b      	lsls	r3, r3, #18
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d108      	bne.n	8001ecc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e062      	b.n	8001f84 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ebe:	4b34      	ldr	r3, [pc, #208]	; (8001f90 <HAL_RCC_ClockConfig+0x188>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	d101      	bne.n	8001ecc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e05b      	b.n	8001f84 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ecc:	4b30      	ldr	r3, [pc, #192]	; (8001f90 <HAL_RCC_ClockConfig+0x188>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2203      	movs	r2, #3
 8001ed2:	4393      	bics	r3, r2
 8001ed4:	0019      	movs	r1, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	4b2d      	ldr	r3, [pc, #180]	; (8001f90 <HAL_RCC_ClockConfig+0x188>)
 8001edc:	430a      	orrs	r2, r1
 8001ede:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ee0:	f7fe fdb8 	bl	8000a54 <HAL_GetTick>
 8001ee4:	0003      	movs	r3, r0
 8001ee6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee8:	e009      	b.n	8001efe <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eea:	f7fe fdb3 	bl	8000a54 <HAL_GetTick>
 8001eee:	0002      	movs	r2, r0
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	4a27      	ldr	r2, [pc, #156]	; (8001f94 <HAL_RCC_ClockConfig+0x18c>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e042      	b.n	8001f84 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efe:	4b24      	ldr	r3, [pc, #144]	; (8001f90 <HAL_RCC_ClockConfig+0x188>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	220c      	movs	r2, #12
 8001f04:	401a      	ands	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d1ec      	bne.n	8001eea <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f10:	4b1e      	ldr	r3, [pc, #120]	; (8001f8c <HAL_RCC_ClockConfig+0x184>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2201      	movs	r2, #1
 8001f16:	4013      	ands	r3, r2
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d211      	bcs.n	8001f42 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1e:	4b1b      	ldr	r3, [pc, #108]	; (8001f8c <HAL_RCC_ClockConfig+0x184>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2201      	movs	r2, #1
 8001f24:	4393      	bics	r3, r2
 8001f26:	0019      	movs	r1, r3
 8001f28:	4b18      	ldr	r3, [pc, #96]	; (8001f8c <HAL_RCC_ClockConfig+0x184>)
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f30:	4b16      	ldr	r3, [pc, #88]	; (8001f8c <HAL_RCC_ClockConfig+0x184>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2201      	movs	r2, #1
 8001f36:	4013      	ands	r3, r2
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d001      	beq.n	8001f42 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e020      	b.n	8001f84 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2204      	movs	r2, #4
 8001f48:	4013      	ands	r3, r2
 8001f4a:	d009      	beq.n	8001f60 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001f4c:	4b10      	ldr	r3, [pc, #64]	; (8001f90 <HAL_RCC_ClockConfig+0x188>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	4a11      	ldr	r2, [pc, #68]	; (8001f98 <HAL_RCC_ClockConfig+0x190>)
 8001f52:	4013      	ands	r3, r2
 8001f54:	0019      	movs	r1, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	68da      	ldr	r2, [r3, #12]
 8001f5a:	4b0d      	ldr	r3, [pc, #52]	; (8001f90 <HAL_RCC_ClockConfig+0x188>)
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001f60:	f000 f820 	bl	8001fa4 <HAL_RCC_GetSysClockFreq>
 8001f64:	0001      	movs	r1, r0
 8001f66:	4b0a      	ldr	r3, [pc, #40]	; (8001f90 <HAL_RCC_ClockConfig+0x188>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	091b      	lsrs	r3, r3, #4
 8001f6c:	220f      	movs	r2, #15
 8001f6e:	4013      	ands	r3, r2
 8001f70:	4a0a      	ldr	r2, [pc, #40]	; (8001f9c <HAL_RCC_ClockConfig+0x194>)
 8001f72:	5cd3      	ldrb	r3, [r2, r3]
 8001f74:	000a      	movs	r2, r1
 8001f76:	40da      	lsrs	r2, r3
 8001f78:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <HAL_RCC_ClockConfig+0x198>)
 8001f7a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001f7c:	2000      	movs	r0, #0
 8001f7e:	f7fe fd23 	bl	80009c8 <HAL_InitTick>
  
  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	0018      	movs	r0, r3
 8001f86:	46bd      	mov	sp, r7
 8001f88:	b004      	add	sp, #16
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40022000 	.word	0x40022000
 8001f90:	40021000 	.word	0x40021000
 8001f94:	00001388 	.word	0x00001388
 8001f98:	fffff8ff 	.word	0xfffff8ff
 8001f9c:	080034d0 	.word	0x080034d0
 8001fa0:	20000000 	.word	0x20000000

08001fa4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fa4:	b590      	push	{r4, r7, lr}
 8001fa6:	b08f      	sub	sp, #60	; 0x3c
 8001fa8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001faa:	2314      	movs	r3, #20
 8001fac:	18fb      	adds	r3, r7, r3
 8001fae:	4a2b      	ldr	r2, [pc, #172]	; (800205c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fb0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001fb2:	c313      	stmia	r3!, {r0, r1, r4}
 8001fb4:	6812      	ldr	r2, [r2, #0]
 8001fb6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001fb8:	1d3b      	adds	r3, r7, #4
 8001fba:	4a29      	ldr	r2, [pc, #164]	; (8002060 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fbc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001fbe:	c313      	stmia	r3!, {r0, r1, r4}
 8001fc0:	6812      	ldr	r2, [r2, #0]
 8001fc2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fc8:	2300      	movs	r3, #0
 8001fca:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fcc:	2300      	movs	r3, #0
 8001fce:	637b      	str	r3, [r7, #52]	; 0x34
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001fd8:	4b22      	ldr	r3, [pc, #136]	; (8002064 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe0:	220c      	movs	r2, #12
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	2b04      	cmp	r3, #4
 8001fe6:	d002      	beq.n	8001fee <HAL_RCC_GetSysClockFreq+0x4a>
 8001fe8:	2b08      	cmp	r3, #8
 8001fea:	d003      	beq.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x50>
 8001fec:	e02d      	b.n	800204a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fee:	4b1e      	ldr	r3, [pc, #120]	; (8002068 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ff0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ff2:	e02d      	b.n	8002050 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff6:	0c9b      	lsrs	r3, r3, #18
 8001ff8:	220f      	movs	r2, #15
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	2214      	movs	r2, #20
 8001ffe:	18ba      	adds	r2, r7, r2
 8002000:	5cd3      	ldrb	r3, [r2, r3]
 8002002:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002004:	4b17      	ldr	r3, [pc, #92]	; (8002064 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002008:	220f      	movs	r2, #15
 800200a:	4013      	ands	r3, r2
 800200c:	1d3a      	adds	r2, r7, #4
 800200e:	5cd3      	ldrb	r3, [r2, r3]
 8002010:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002012:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002014:	2380      	movs	r3, #128	; 0x80
 8002016:	025b      	lsls	r3, r3, #9
 8002018:	4013      	ands	r3, r2
 800201a:	d009      	beq.n	8002030 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800201c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800201e:	4812      	ldr	r0, [pc, #72]	; (8002068 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002020:	f7fe f884 	bl	800012c <__udivsi3>
 8002024:	0003      	movs	r3, r0
 8002026:	001a      	movs	r2, r3
 8002028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202a:	4353      	muls	r3, r2
 800202c:	637b      	str	r3, [r7, #52]	; 0x34
 800202e:	e009      	b.n	8002044 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002030:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002032:	000a      	movs	r2, r1
 8002034:	0152      	lsls	r2, r2, #5
 8002036:	1a52      	subs	r2, r2, r1
 8002038:	0193      	lsls	r3, r2, #6
 800203a:	1a9b      	subs	r3, r3, r2
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	185b      	adds	r3, r3, r1
 8002040:	021b      	lsls	r3, r3, #8
 8002042:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002046:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002048:	e002      	b.n	8002050 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800204a:	4b07      	ldr	r3, [pc, #28]	; (8002068 <HAL_RCC_GetSysClockFreq+0xc4>)
 800204c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800204e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002052:	0018      	movs	r0, r3
 8002054:	46bd      	mov	sp, r7
 8002056:	b00f      	add	sp, #60	; 0x3c
 8002058:	bd90      	pop	{r4, r7, pc}
 800205a:	46c0      	nop			; (mov r8, r8)
 800205c:	080034b0 	.word	0x080034b0
 8002060:	080034c0 	.word	0x080034c0
 8002064:	40021000 	.word	0x40021000
 8002068:	007a1200 	.word	0x007a1200

0800206c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002070:	4b02      	ldr	r3, [pc, #8]	; (800207c <HAL_RCC_GetHCLKFreq+0x10>)
 8002072:	681b      	ldr	r3, [r3, #0]
}
 8002074:	0018      	movs	r0, r3
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	46c0      	nop			; (mov r8, r8)
 800207c:	20000000 	.word	0x20000000

08002080 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002084:	f7ff fff2 	bl	800206c <HAL_RCC_GetHCLKFreq>
 8002088:	0001      	movs	r1, r0
 800208a:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	0a1b      	lsrs	r3, r3, #8
 8002090:	2207      	movs	r2, #7
 8002092:	4013      	ands	r3, r2
 8002094:	4a04      	ldr	r2, [pc, #16]	; (80020a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002096:	5cd3      	ldrb	r3, [r2, r3]
 8002098:	40d9      	lsrs	r1, r3
 800209a:	000b      	movs	r3, r1
}    
 800209c:	0018      	movs	r0, r3
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	46c0      	nop			; (mov r8, r8)
 80020a4:	40021000 	.word	0x40021000
 80020a8:	080034e0 	.word	0x080034e0

080020ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020b4:	2300      	movs	r3, #0
 80020b6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80020b8:	2300      	movs	r3, #0
 80020ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	2380      	movs	r3, #128	; 0x80
 80020c2:	025b      	lsls	r3, r3, #9
 80020c4:	4013      	ands	r3, r2
 80020c6:	d100      	bne.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80020c8:	e08e      	b.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80020ca:	2017      	movs	r0, #23
 80020cc:	183b      	adds	r3, r7, r0
 80020ce:	2200      	movs	r2, #0
 80020d0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020d2:	4b5f      	ldr	r3, [pc, #380]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80020d4:	69da      	ldr	r2, [r3, #28]
 80020d6:	2380      	movs	r3, #128	; 0x80
 80020d8:	055b      	lsls	r3, r3, #21
 80020da:	4013      	ands	r3, r2
 80020dc:	d110      	bne.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020de:	4b5c      	ldr	r3, [pc, #368]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80020e0:	69da      	ldr	r2, [r3, #28]
 80020e2:	4b5b      	ldr	r3, [pc, #364]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80020e4:	2180      	movs	r1, #128	; 0x80
 80020e6:	0549      	lsls	r1, r1, #21
 80020e8:	430a      	orrs	r2, r1
 80020ea:	61da      	str	r2, [r3, #28]
 80020ec:	4b58      	ldr	r3, [pc, #352]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80020ee:	69da      	ldr	r2, [r3, #28]
 80020f0:	2380      	movs	r3, #128	; 0x80
 80020f2:	055b      	lsls	r3, r3, #21
 80020f4:	4013      	ands	r3, r2
 80020f6:	60bb      	str	r3, [r7, #8]
 80020f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020fa:	183b      	adds	r3, r7, r0
 80020fc:	2201      	movs	r2, #1
 80020fe:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002100:	4b54      	ldr	r3, [pc, #336]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	2380      	movs	r3, #128	; 0x80
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	4013      	ands	r3, r2
 800210a:	d11a      	bne.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800210c:	4b51      	ldr	r3, [pc, #324]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	4b50      	ldr	r3, [pc, #320]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002112:	2180      	movs	r1, #128	; 0x80
 8002114:	0049      	lsls	r1, r1, #1
 8002116:	430a      	orrs	r2, r1
 8002118:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800211a:	f7fe fc9b 	bl	8000a54 <HAL_GetTick>
 800211e:	0003      	movs	r3, r0
 8002120:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002122:	e008      	b.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002124:	f7fe fc96 	bl	8000a54 <HAL_GetTick>
 8002128:	0002      	movs	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b64      	cmp	r3, #100	; 0x64
 8002130:	d901      	bls.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e087      	b.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002136:	4b47      	ldr	r3, [pc, #284]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	2380      	movs	r3, #128	; 0x80
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	4013      	ands	r3, r2
 8002140:	d0f0      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002142:	4b43      	ldr	r3, [pc, #268]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002144:	6a1a      	ldr	r2, [r3, #32]
 8002146:	23c0      	movs	r3, #192	; 0xc0
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4013      	ands	r3, r2
 800214c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d034      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	23c0      	movs	r3, #192	; 0xc0
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4013      	ands	r3, r2
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	429a      	cmp	r2, r3
 8002162:	d02c      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002164:	4b3a      	ldr	r3, [pc, #232]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	4a3b      	ldr	r2, [pc, #236]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800216a:	4013      	ands	r3, r2
 800216c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800216e:	4b38      	ldr	r3, [pc, #224]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002170:	6a1a      	ldr	r2, [r3, #32]
 8002172:	4b37      	ldr	r3, [pc, #220]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002174:	2180      	movs	r1, #128	; 0x80
 8002176:	0249      	lsls	r1, r1, #9
 8002178:	430a      	orrs	r2, r1
 800217a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800217c:	4b34      	ldr	r3, [pc, #208]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800217e:	6a1a      	ldr	r2, [r3, #32]
 8002180:	4b33      	ldr	r3, [pc, #204]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002182:	4936      	ldr	r1, [pc, #216]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002184:	400a      	ands	r2, r1
 8002186:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002188:	4b31      	ldr	r3, [pc, #196]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2201      	movs	r2, #1
 8002192:	4013      	ands	r3, r2
 8002194:	d013      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002196:	f7fe fc5d 	bl	8000a54 <HAL_GetTick>
 800219a:	0003      	movs	r3, r0
 800219c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800219e:	e009      	b.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a0:	f7fe fc58 	bl	8000a54 <HAL_GetTick>
 80021a4:	0002      	movs	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	4a2d      	ldr	r2, [pc, #180]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e048      	b.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b4:	4b26      	ldr	r3, [pc, #152]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	2202      	movs	r2, #2
 80021ba:	4013      	ands	r3, r2
 80021bc:	d0f0      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021be:	4b24      	ldr	r3, [pc, #144]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	4a25      	ldr	r2, [pc, #148]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021c4:	4013      	ands	r3, r2
 80021c6:	0019      	movs	r1, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685a      	ldr	r2, [r3, #4]
 80021cc:	4b20      	ldr	r3, [pc, #128]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80021ce:	430a      	orrs	r2, r1
 80021d0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021d2:	2317      	movs	r3, #23
 80021d4:	18fb      	adds	r3, r7, r3
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d105      	bne.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021dc:	4b1c      	ldr	r3, [pc, #112]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80021de:	69da      	ldr	r2, [r3, #28]
 80021e0:	4b1b      	ldr	r3, [pc, #108]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80021e2:	4920      	ldr	r1, [pc, #128]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80021e4:	400a      	ands	r2, r1
 80021e6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2201      	movs	r2, #1
 80021ee:	4013      	ands	r3, r2
 80021f0:	d009      	beq.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021f2:	4b17      	ldr	r3, [pc, #92]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	2203      	movs	r2, #3
 80021f8:	4393      	bics	r3, r2
 80021fa:	0019      	movs	r1, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	4b13      	ldr	r3, [pc, #76]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002202:	430a      	orrs	r2, r1
 8002204:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2220      	movs	r2, #32
 800220c:	4013      	ands	r3, r2
 800220e:	d009      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002210:	4b0f      	ldr	r3, [pc, #60]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002214:	2210      	movs	r2, #16
 8002216:	4393      	bics	r3, r2
 8002218:	0019      	movs	r1, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	68da      	ldr	r2, [r3, #12]
 800221e:	4b0c      	ldr	r3, [pc, #48]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002220:	430a      	orrs	r2, r1
 8002222:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	2380      	movs	r3, #128	; 0x80
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	4013      	ands	r3, r2
 800222e:	d009      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002230:	4b07      	ldr	r3, [pc, #28]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002234:	2240      	movs	r2, #64	; 0x40
 8002236:	4393      	bics	r3, r2
 8002238:	0019      	movs	r1, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	691a      	ldr	r2, [r3, #16]
 800223e:	4b04      	ldr	r3, [pc, #16]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002240:	430a      	orrs	r2, r1
 8002242:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	0018      	movs	r0, r3
 8002248:	46bd      	mov	sp, r7
 800224a:	b006      	add	sp, #24
 800224c:	bd80      	pop	{r7, pc}
 800224e:	46c0      	nop			; (mov r8, r8)
 8002250:	40021000 	.word	0x40021000
 8002254:	40007000 	.word	0x40007000
 8002258:	fffffcff 	.word	0xfffffcff
 800225c:	fffeffff 	.word	0xfffeffff
 8002260:	00001388 	.word	0x00001388
 8002264:	efffffff 	.word	0xefffffff

08002268 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e04c      	b.n	8002314 <HAL_HalfDuplex_Init+0xac>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800227e:	2b00      	cmp	r3, #0
 8002280:	d107      	bne.n	8002292 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2274      	movs	r2, #116	; 0x74
 8002286:	2100      	movs	r1, #0
 8002288:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	0018      	movs	r0, r3
 800228e:	f7fe fabd 	bl	800080c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2224      	movs	r2, #36	; 0x24
 8002296:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2101      	movs	r1, #1
 80022a4:	438a      	bics	r2, r1
 80022a6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	0018      	movs	r0, r3
 80022ac:	f000 f8e2 	bl	8002474 <UART_SetConfig>
 80022b0:	0003      	movs	r3, r0
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d101      	bne.n	80022ba <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e02c      	b.n	8002314 <HAL_HalfDuplex_Init+0xac>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <HAL_HalfDuplex_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	0018      	movs	r0, r3
 80022c6:	f000 fa15 	bl	80026f4 <UART_AdvFeatureConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported) and IREN (if IrDA is supported) bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	685a      	ldr	r2, [r3, #4]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4911      	ldr	r1, [pc, #68]	; (800231c <HAL_HalfDuplex_Init+0xb4>)
 80022d6:	400a      	ands	r2, r1
 80022d8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2122      	movs	r1, #34	; 0x22
 80022e6:	438a      	bics	r2, r1
 80022e8:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_IREN);
#endif /* USART_CR3_IREN */
#endif /* USART_CR3_SCEN */

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2108      	movs	r1, #8
 80022f6:	430a      	orrs	r2, r1
 80022f8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2101      	movs	r1, #1
 8002306:	430a      	orrs	r2, r1
 8002308:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	0018      	movs	r0, r3
 800230e:	f000 faa5 	bl	800285c <UART_CheckIdleState>
 8002312:	0003      	movs	r3, r0
}
 8002314:	0018      	movs	r0, r3
 8002316:	46bd      	mov	sp, r7
 8002318:	b002      	add	sp, #8
 800231a:	bd80      	pop	{r7, pc}
 800231c:	ffffb7ff 	.word	0xffffb7ff

08002320 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b08a      	sub	sp, #40	; 0x28
 8002324:	af02      	add	r7, sp, #8
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	603b      	str	r3, [r7, #0]
 800232c:	1dbb      	adds	r3, r7, #6
 800232e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002334:	2b20      	cmp	r3, #32
 8002336:	d000      	beq.n	800233a <HAL_UART_Transmit+0x1a>
 8002338:	e096      	b.n	8002468 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d003      	beq.n	8002348 <HAL_UART_Transmit+0x28>
 8002340:	1dbb      	adds	r3, r7, #6
 8002342:	881b      	ldrh	r3, [r3, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e08e      	b.n	800246a <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	2380      	movs	r3, #128	; 0x80
 8002352:	015b      	lsls	r3, r3, #5
 8002354:	429a      	cmp	r2, r3
 8002356:	d109      	bne.n	800236c <HAL_UART_Transmit+0x4c>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d105      	bne.n	800236c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	2201      	movs	r2, #1
 8002364:	4013      	ands	r3, r2
 8002366:	d001      	beq.n	800236c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e07e      	b.n	800246a <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2274      	movs	r2, #116	; 0x74
 8002370:	5c9b      	ldrb	r3, [r3, r2]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d101      	bne.n	800237a <HAL_UART_Transmit+0x5a>
 8002376:	2302      	movs	r3, #2
 8002378:	e077      	b.n	800246a <HAL_UART_Transmit+0x14a>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2274      	movs	r2, #116	; 0x74
 800237e:	2101      	movs	r1, #1
 8002380:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2280      	movs	r2, #128	; 0x80
 8002386:	2100      	movs	r1, #0
 8002388:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2221      	movs	r2, #33	; 0x21
 800238e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002390:	f7fe fb60 	bl	8000a54 <HAL_GetTick>
 8002394:	0003      	movs	r3, r0
 8002396:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	1dba      	adds	r2, r7, #6
 800239c:	2150      	movs	r1, #80	; 0x50
 800239e:	8812      	ldrh	r2, [r2, #0]
 80023a0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	1dba      	adds	r2, r7, #6
 80023a6:	2152      	movs	r1, #82	; 0x52
 80023a8:	8812      	ldrh	r2, [r2, #0]
 80023aa:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	2380      	movs	r3, #128	; 0x80
 80023b2:	015b      	lsls	r3, r3, #5
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d108      	bne.n	80023ca <HAL_UART_Transmit+0xaa>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d104      	bne.n	80023ca <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	61bb      	str	r3, [r7, #24]
 80023c8:	e003      	b.n	80023d2 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2274      	movs	r2, #116	; 0x74
 80023d6:	2100      	movs	r1, #0
 80023d8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80023da:	e02d      	b.n	8002438 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023dc:	697a      	ldr	r2, [r7, #20]
 80023de:	68f8      	ldr	r0, [r7, #12]
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	0013      	movs	r3, r2
 80023e6:	2200      	movs	r2, #0
 80023e8:	2180      	movs	r1, #128	; 0x80
 80023ea:	f000 fa7f 	bl	80028ec <UART_WaitOnFlagUntilTimeout>
 80023ee:	1e03      	subs	r3, r0, #0
 80023f0:	d001      	beq.n	80023f6 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e039      	b.n	800246a <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10b      	bne.n	8002414 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	881a      	ldrh	r2, [r3, #0]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	05d2      	lsls	r2, r2, #23
 8002406:	0dd2      	lsrs	r2, r2, #23
 8002408:	b292      	uxth	r2, r2
 800240a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	3302      	adds	r3, #2
 8002410:	61bb      	str	r3, [r7, #24]
 8002412:	e008      	b.n	8002426 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	781a      	ldrb	r2, [r3, #0]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	b292      	uxth	r2, r2
 800241e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	3301      	adds	r3, #1
 8002424:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2252      	movs	r2, #82	; 0x52
 800242a:	5a9b      	ldrh	r3, [r3, r2]
 800242c:	b29b      	uxth	r3, r3
 800242e:	3b01      	subs	r3, #1
 8002430:	b299      	uxth	r1, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2252      	movs	r2, #82	; 0x52
 8002436:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2252      	movs	r2, #82	; 0x52
 800243c:	5a9b      	ldrh	r3, [r3, r2]
 800243e:	b29b      	uxth	r3, r3
 8002440:	2b00      	cmp	r3, #0
 8002442:	d1cb      	bne.n	80023dc <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	9300      	str	r3, [sp, #0]
 800244c:	0013      	movs	r3, r2
 800244e:	2200      	movs	r2, #0
 8002450:	2140      	movs	r1, #64	; 0x40
 8002452:	f000 fa4b 	bl	80028ec <UART_WaitOnFlagUntilTimeout>
 8002456:	1e03      	subs	r3, r0, #0
 8002458:	d001      	beq.n	800245e <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e005      	b.n	800246a <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2220      	movs	r2, #32
 8002462:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002464:	2300      	movs	r3, #0
 8002466:	e000      	b.n	800246a <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002468:	2302      	movs	r3, #2
  }
}
 800246a:	0018      	movs	r0, r3
 800246c:	46bd      	mov	sp, r7
 800246e:	b008      	add	sp, #32
 8002470:	bd80      	pop	{r7, pc}
	...

08002474 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b088      	sub	sp, #32
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800247c:	231e      	movs	r3, #30
 800247e:	18fb      	adds	r3, r7, r3
 8002480:	2200      	movs	r2, #0
 8002482:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	431a      	orrs	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	431a      	orrs	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	69db      	ldr	r3, [r3, #28]
 8002498:	4313      	orrs	r3, r2
 800249a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a8d      	ldr	r2, [pc, #564]	; (80026d8 <UART_SetConfig+0x264>)
 80024a4:	4013      	ands	r3, r2
 80024a6:	0019      	movs	r1, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	697a      	ldr	r2, [r7, #20]
 80024ae:	430a      	orrs	r2, r1
 80024b0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	4a88      	ldr	r2, [pc, #544]	; (80026dc <UART_SetConfig+0x268>)
 80024ba:	4013      	ands	r3, r2
 80024bc:	0019      	movs	r1, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	697a      	ldr	r2, [r7, #20]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	4a7f      	ldr	r2, [pc, #508]	; (80026e0 <UART_SetConfig+0x26c>)
 80024e2:	4013      	ands	r3, r2
 80024e4:	0019      	movs	r1, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	430a      	orrs	r2, r1
 80024ee:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a7b      	ldr	r2, [pc, #492]	; (80026e4 <UART_SetConfig+0x270>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d127      	bne.n	800254a <UART_SetConfig+0xd6>
 80024fa:	4b7b      	ldr	r3, [pc, #492]	; (80026e8 <UART_SetConfig+0x274>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	2203      	movs	r2, #3
 8002500:	4013      	ands	r3, r2
 8002502:	2b03      	cmp	r3, #3
 8002504:	d00d      	beq.n	8002522 <UART_SetConfig+0xae>
 8002506:	d81b      	bhi.n	8002540 <UART_SetConfig+0xcc>
 8002508:	2b02      	cmp	r3, #2
 800250a:	d014      	beq.n	8002536 <UART_SetConfig+0xc2>
 800250c:	d818      	bhi.n	8002540 <UART_SetConfig+0xcc>
 800250e:	2b00      	cmp	r3, #0
 8002510:	d002      	beq.n	8002518 <UART_SetConfig+0xa4>
 8002512:	2b01      	cmp	r3, #1
 8002514:	d00a      	beq.n	800252c <UART_SetConfig+0xb8>
 8002516:	e013      	b.n	8002540 <UART_SetConfig+0xcc>
 8002518:	231f      	movs	r3, #31
 800251a:	18fb      	adds	r3, r7, r3
 800251c:	2200      	movs	r2, #0
 800251e:	701a      	strb	r2, [r3, #0]
 8002520:	e021      	b.n	8002566 <UART_SetConfig+0xf2>
 8002522:	231f      	movs	r3, #31
 8002524:	18fb      	adds	r3, r7, r3
 8002526:	2202      	movs	r2, #2
 8002528:	701a      	strb	r2, [r3, #0]
 800252a:	e01c      	b.n	8002566 <UART_SetConfig+0xf2>
 800252c:	231f      	movs	r3, #31
 800252e:	18fb      	adds	r3, r7, r3
 8002530:	2204      	movs	r2, #4
 8002532:	701a      	strb	r2, [r3, #0]
 8002534:	e017      	b.n	8002566 <UART_SetConfig+0xf2>
 8002536:	231f      	movs	r3, #31
 8002538:	18fb      	adds	r3, r7, r3
 800253a:	2208      	movs	r2, #8
 800253c:	701a      	strb	r2, [r3, #0]
 800253e:	e012      	b.n	8002566 <UART_SetConfig+0xf2>
 8002540:	231f      	movs	r3, #31
 8002542:	18fb      	adds	r3, r7, r3
 8002544:	2210      	movs	r2, #16
 8002546:	701a      	strb	r2, [r3, #0]
 8002548:	e00d      	b.n	8002566 <UART_SetConfig+0xf2>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a67      	ldr	r2, [pc, #412]	; (80026ec <UART_SetConfig+0x278>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d104      	bne.n	800255e <UART_SetConfig+0xea>
 8002554:	231f      	movs	r3, #31
 8002556:	18fb      	adds	r3, r7, r3
 8002558:	2200      	movs	r2, #0
 800255a:	701a      	strb	r2, [r3, #0]
 800255c:	e003      	b.n	8002566 <UART_SetConfig+0xf2>
 800255e:	231f      	movs	r3, #31
 8002560:	18fb      	adds	r3, r7, r3
 8002562:	2210      	movs	r2, #16
 8002564:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69da      	ldr	r2, [r3, #28]
 800256a:	2380      	movs	r3, #128	; 0x80
 800256c:	021b      	lsls	r3, r3, #8
 800256e:	429a      	cmp	r2, r3
 8002570:	d15d      	bne.n	800262e <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8002572:	231f      	movs	r3, #31
 8002574:	18fb      	adds	r3, r7, r3
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b08      	cmp	r3, #8
 800257a:	d015      	beq.n	80025a8 <UART_SetConfig+0x134>
 800257c:	dc18      	bgt.n	80025b0 <UART_SetConfig+0x13c>
 800257e:	2b04      	cmp	r3, #4
 8002580:	d00d      	beq.n	800259e <UART_SetConfig+0x12a>
 8002582:	dc15      	bgt.n	80025b0 <UART_SetConfig+0x13c>
 8002584:	2b00      	cmp	r3, #0
 8002586:	d002      	beq.n	800258e <UART_SetConfig+0x11a>
 8002588:	2b02      	cmp	r3, #2
 800258a:	d005      	beq.n	8002598 <UART_SetConfig+0x124>
 800258c:	e010      	b.n	80025b0 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800258e:	f7ff fd77 	bl	8002080 <HAL_RCC_GetPCLK1Freq>
 8002592:	0003      	movs	r3, r0
 8002594:	61bb      	str	r3, [r7, #24]
        break;
 8002596:	e012      	b.n	80025be <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002598:	4b55      	ldr	r3, [pc, #340]	; (80026f0 <UART_SetConfig+0x27c>)
 800259a:	61bb      	str	r3, [r7, #24]
        break;
 800259c:	e00f      	b.n	80025be <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800259e:	f7ff fd01 	bl	8001fa4 <HAL_RCC_GetSysClockFreq>
 80025a2:	0003      	movs	r3, r0
 80025a4:	61bb      	str	r3, [r7, #24]
        break;
 80025a6:	e00a      	b.n	80025be <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025a8:	2380      	movs	r3, #128	; 0x80
 80025aa:	021b      	lsls	r3, r3, #8
 80025ac:	61bb      	str	r3, [r7, #24]
        break;
 80025ae:	e006      	b.n	80025be <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80025b0:	2300      	movs	r3, #0
 80025b2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80025b4:	231e      	movs	r3, #30
 80025b6:	18fb      	adds	r3, r7, r3
 80025b8:	2201      	movs	r2, #1
 80025ba:	701a      	strb	r2, [r3, #0]
        break;
 80025bc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d100      	bne.n	80025c6 <UART_SetConfig+0x152>
 80025c4:	e07b      	b.n	80026be <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	005a      	lsls	r2, r3, #1
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	085b      	lsrs	r3, r3, #1
 80025d0:	18d2      	adds	r2, r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	0019      	movs	r1, r3
 80025d8:	0010      	movs	r0, r2
 80025da:	f7fd fda7 	bl	800012c <__udivsi3>
 80025de:	0003      	movs	r3, r0
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	2b0f      	cmp	r3, #15
 80025e8:	d91c      	bls.n	8002624 <UART_SetConfig+0x1b0>
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	2380      	movs	r3, #128	; 0x80
 80025ee:	025b      	lsls	r3, r3, #9
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d217      	bcs.n	8002624 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	200e      	movs	r0, #14
 80025fa:	183b      	adds	r3, r7, r0
 80025fc:	210f      	movs	r1, #15
 80025fe:	438a      	bics	r2, r1
 8002600:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	085b      	lsrs	r3, r3, #1
 8002606:	b29b      	uxth	r3, r3
 8002608:	2207      	movs	r2, #7
 800260a:	4013      	ands	r3, r2
 800260c:	b299      	uxth	r1, r3
 800260e:	183b      	adds	r3, r7, r0
 8002610:	183a      	adds	r2, r7, r0
 8002612:	8812      	ldrh	r2, [r2, #0]
 8002614:	430a      	orrs	r2, r1
 8002616:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	183a      	adds	r2, r7, r0
 800261e:	8812      	ldrh	r2, [r2, #0]
 8002620:	60da      	str	r2, [r3, #12]
 8002622:	e04c      	b.n	80026be <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002624:	231e      	movs	r3, #30
 8002626:	18fb      	adds	r3, r7, r3
 8002628:	2201      	movs	r2, #1
 800262a:	701a      	strb	r2, [r3, #0]
 800262c:	e047      	b.n	80026be <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800262e:	231f      	movs	r3, #31
 8002630:	18fb      	adds	r3, r7, r3
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b08      	cmp	r3, #8
 8002636:	d015      	beq.n	8002664 <UART_SetConfig+0x1f0>
 8002638:	dc18      	bgt.n	800266c <UART_SetConfig+0x1f8>
 800263a:	2b04      	cmp	r3, #4
 800263c:	d00d      	beq.n	800265a <UART_SetConfig+0x1e6>
 800263e:	dc15      	bgt.n	800266c <UART_SetConfig+0x1f8>
 8002640:	2b00      	cmp	r3, #0
 8002642:	d002      	beq.n	800264a <UART_SetConfig+0x1d6>
 8002644:	2b02      	cmp	r3, #2
 8002646:	d005      	beq.n	8002654 <UART_SetConfig+0x1e0>
 8002648:	e010      	b.n	800266c <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800264a:	f7ff fd19 	bl	8002080 <HAL_RCC_GetPCLK1Freq>
 800264e:	0003      	movs	r3, r0
 8002650:	61bb      	str	r3, [r7, #24]
        break;
 8002652:	e012      	b.n	800267a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002654:	4b26      	ldr	r3, [pc, #152]	; (80026f0 <UART_SetConfig+0x27c>)
 8002656:	61bb      	str	r3, [r7, #24]
        break;
 8002658:	e00f      	b.n	800267a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800265a:	f7ff fca3 	bl	8001fa4 <HAL_RCC_GetSysClockFreq>
 800265e:	0003      	movs	r3, r0
 8002660:	61bb      	str	r3, [r7, #24]
        break;
 8002662:	e00a      	b.n	800267a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002664:	2380      	movs	r3, #128	; 0x80
 8002666:	021b      	lsls	r3, r3, #8
 8002668:	61bb      	str	r3, [r7, #24]
        break;
 800266a:	e006      	b.n	800267a <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 800266c:	2300      	movs	r3, #0
 800266e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002670:	231e      	movs	r3, #30
 8002672:	18fb      	adds	r3, r7, r3
 8002674:	2201      	movs	r2, #1
 8002676:	701a      	strb	r2, [r3, #0]
        break;
 8002678:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d01e      	beq.n	80026be <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	085a      	lsrs	r2, r3, #1
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	18d2      	adds	r2, r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	0019      	movs	r1, r3
 8002690:	0010      	movs	r0, r2
 8002692:	f7fd fd4b 	bl	800012c <__udivsi3>
 8002696:	0003      	movs	r3, r0
 8002698:	b29b      	uxth	r3, r3
 800269a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	2b0f      	cmp	r3, #15
 80026a0:	d909      	bls.n	80026b6 <UART_SetConfig+0x242>
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	2380      	movs	r3, #128	; 0x80
 80026a6:	025b      	lsls	r3, r3, #9
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d204      	bcs.n	80026b6 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	60da      	str	r2, [r3, #12]
 80026b4:	e003      	b.n	80026be <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80026b6:	231e      	movs	r3, #30
 80026b8:	18fb      	adds	r3, r7, r3
 80026ba:	2201      	movs	r2, #1
 80026bc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80026ca:	231e      	movs	r3, #30
 80026cc:	18fb      	adds	r3, r7, r3
 80026ce:	781b      	ldrb	r3, [r3, #0]
}
 80026d0:	0018      	movs	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	b008      	add	sp, #32
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	ffff69f3 	.word	0xffff69f3
 80026dc:	ffffcfff 	.word	0xffffcfff
 80026e0:	fffff4ff 	.word	0xfffff4ff
 80026e4:	40013800 	.word	0x40013800
 80026e8:	40021000 	.word	0x40021000
 80026ec:	40004400 	.word	0x40004400
 80026f0:	007a1200 	.word	0x007a1200

080026f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	2201      	movs	r2, #1
 8002702:	4013      	ands	r3, r2
 8002704:	d00b      	beq.n	800271e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	4a4a      	ldr	r2, [pc, #296]	; (8002838 <UART_AdvFeatureConfig+0x144>)
 800270e:	4013      	ands	r3, r2
 8002710:	0019      	movs	r1, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	430a      	orrs	r2, r1
 800271c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002722:	2202      	movs	r2, #2
 8002724:	4013      	ands	r3, r2
 8002726:	d00b      	beq.n	8002740 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	4a43      	ldr	r2, [pc, #268]	; (800283c <UART_AdvFeatureConfig+0x148>)
 8002730:	4013      	ands	r3, r2
 8002732:	0019      	movs	r1, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	430a      	orrs	r2, r1
 800273e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002744:	2204      	movs	r2, #4
 8002746:	4013      	ands	r3, r2
 8002748:	d00b      	beq.n	8002762 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	4a3b      	ldr	r2, [pc, #236]	; (8002840 <UART_AdvFeatureConfig+0x14c>)
 8002752:	4013      	ands	r3, r2
 8002754:	0019      	movs	r1, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	430a      	orrs	r2, r1
 8002760:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002766:	2208      	movs	r2, #8
 8002768:	4013      	ands	r3, r2
 800276a:	d00b      	beq.n	8002784 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	4a34      	ldr	r2, [pc, #208]	; (8002844 <UART_AdvFeatureConfig+0x150>)
 8002774:	4013      	ands	r3, r2
 8002776:	0019      	movs	r1, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	430a      	orrs	r2, r1
 8002782:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002788:	2210      	movs	r2, #16
 800278a:	4013      	ands	r3, r2
 800278c:	d00b      	beq.n	80027a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	4a2c      	ldr	r2, [pc, #176]	; (8002848 <UART_AdvFeatureConfig+0x154>)
 8002796:	4013      	ands	r3, r2
 8002798:	0019      	movs	r1, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	430a      	orrs	r2, r1
 80027a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027aa:	2220      	movs	r2, #32
 80027ac:	4013      	ands	r3, r2
 80027ae:	d00b      	beq.n	80027c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	4a25      	ldr	r2, [pc, #148]	; (800284c <UART_AdvFeatureConfig+0x158>)
 80027b8:	4013      	ands	r3, r2
 80027ba:	0019      	movs	r1, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	430a      	orrs	r2, r1
 80027c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027cc:	2240      	movs	r2, #64	; 0x40
 80027ce:	4013      	ands	r3, r2
 80027d0:	d01d      	beq.n	800280e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	4a1d      	ldr	r2, [pc, #116]	; (8002850 <UART_AdvFeatureConfig+0x15c>)
 80027da:	4013      	ands	r3, r2
 80027dc:	0019      	movs	r1, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	430a      	orrs	r2, r1
 80027e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027ee:	2380      	movs	r3, #128	; 0x80
 80027f0:	035b      	lsls	r3, r3, #13
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d10b      	bne.n	800280e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	4a15      	ldr	r2, [pc, #84]	; (8002854 <UART_AdvFeatureConfig+0x160>)
 80027fe:	4013      	ands	r3, r2
 8002800:	0019      	movs	r1, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	430a      	orrs	r2, r1
 800280c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002812:	2280      	movs	r2, #128	; 0x80
 8002814:	4013      	ands	r3, r2
 8002816:	d00b      	beq.n	8002830 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	4a0e      	ldr	r2, [pc, #56]	; (8002858 <UART_AdvFeatureConfig+0x164>)
 8002820:	4013      	ands	r3, r2
 8002822:	0019      	movs	r1, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	430a      	orrs	r2, r1
 800282e:	605a      	str	r2, [r3, #4]
  }
}
 8002830:	46c0      	nop			; (mov r8, r8)
 8002832:	46bd      	mov	sp, r7
 8002834:	b002      	add	sp, #8
 8002836:	bd80      	pop	{r7, pc}
 8002838:	fffdffff 	.word	0xfffdffff
 800283c:	fffeffff 	.word	0xfffeffff
 8002840:	fffbffff 	.word	0xfffbffff
 8002844:	ffff7fff 	.word	0xffff7fff
 8002848:	ffffefff 	.word	0xffffefff
 800284c:	ffffdfff 	.word	0xffffdfff
 8002850:	ffefffff 	.word	0xffefffff
 8002854:	ff9fffff 	.word	0xff9fffff
 8002858:	fff7ffff 	.word	0xfff7ffff

0800285c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af02      	add	r7, sp, #8
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2280      	movs	r2, #128	; 0x80
 8002868:	2100      	movs	r1, #0
 800286a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800286c:	f7fe f8f2 	bl	8000a54 <HAL_GetTick>
 8002870:	0003      	movs	r3, r0
 8002872:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2208      	movs	r2, #8
 800287c:	4013      	ands	r3, r2
 800287e:	2b08      	cmp	r3, #8
 8002880:	d10c      	bne.n	800289c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2280      	movs	r2, #128	; 0x80
 8002886:	0391      	lsls	r1, r2, #14
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	4a17      	ldr	r2, [pc, #92]	; (80028e8 <UART_CheckIdleState+0x8c>)
 800288c:	9200      	str	r2, [sp, #0]
 800288e:	2200      	movs	r2, #0
 8002890:	f000 f82c 	bl	80028ec <UART_WaitOnFlagUntilTimeout>
 8002894:	1e03      	subs	r3, r0, #0
 8002896:	d001      	beq.n	800289c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e021      	b.n	80028e0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2204      	movs	r2, #4
 80028a4:	4013      	ands	r3, r2
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	d10c      	bne.n	80028c4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2280      	movs	r2, #128	; 0x80
 80028ae:	03d1      	lsls	r1, r2, #15
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	4a0d      	ldr	r2, [pc, #52]	; (80028e8 <UART_CheckIdleState+0x8c>)
 80028b4:	9200      	str	r2, [sp, #0]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f000 f818 	bl	80028ec <UART_WaitOnFlagUntilTimeout>
 80028bc:	1e03      	subs	r3, r0, #0
 80028be:	d001      	beq.n	80028c4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e00d      	b.n	80028e0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2220      	movs	r2, #32
 80028c8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2220      	movs	r2, #32
 80028ce:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2274      	movs	r2, #116	; 0x74
 80028da:	2100      	movs	r1, #0
 80028dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	0018      	movs	r0, r3
 80028e2:	46bd      	mov	sp, r7
 80028e4:	b004      	add	sp, #16
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	01ffffff 	.word	0x01ffffff

080028ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b094      	sub	sp, #80	; 0x50
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	603b      	str	r3, [r7, #0]
 80028f8:	1dfb      	adds	r3, r7, #7
 80028fa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028fc:	e0a3      	b.n	8002a46 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002900:	3301      	adds	r3, #1
 8002902:	d100      	bne.n	8002906 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002904:	e09f      	b.n	8002a46 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002906:	f7fe f8a5 	bl	8000a54 <HAL_GetTick>
 800290a:	0002      	movs	r2, r0
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002912:	429a      	cmp	r2, r3
 8002914:	d302      	bcc.n	800291c <UART_WaitOnFlagUntilTimeout+0x30>
 8002916:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002918:	2b00      	cmp	r3, #0
 800291a:	d13d      	bne.n	8002998 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800291c:	f3ef 8310 	mrs	r3, PRIMASK
 8002920:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002922:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002924:	647b      	str	r3, [r7, #68]	; 0x44
 8002926:	2301      	movs	r3, #1
 8002928:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800292a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800292c:	f383 8810 	msr	PRIMASK, r3
}
 8002930:	46c0      	nop			; (mov r8, r8)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	494c      	ldr	r1, [pc, #304]	; (8002a70 <UART_WaitOnFlagUntilTimeout+0x184>)
 800293e:	400a      	ands	r2, r1
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002944:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002948:	f383 8810 	msr	PRIMASK, r3
}
 800294c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800294e:	f3ef 8310 	mrs	r3, PRIMASK
 8002952:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002956:	643b      	str	r3, [r7, #64]	; 0x40
 8002958:	2301      	movs	r3, #1
 800295a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800295c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800295e:	f383 8810 	msr	PRIMASK, r3
}
 8002962:	46c0      	nop			; (mov r8, r8)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689a      	ldr	r2, [r3, #8]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2101      	movs	r1, #1
 8002970:	438a      	bics	r2, r1
 8002972:	609a      	str	r2, [r3, #8]
 8002974:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002976:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800297a:	f383 8810 	msr	PRIMASK, r3
}
 800297e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2220      	movs	r2, #32
 8002984:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2220      	movs	r2, #32
 800298a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2274      	movs	r2, #116	; 0x74
 8002990:	2100      	movs	r1, #0
 8002992:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e067      	b.n	8002a68 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2204      	movs	r2, #4
 80029a0:	4013      	ands	r3, r2
 80029a2:	d050      	beq.n	8002a46 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	69da      	ldr	r2, [r3, #28]
 80029aa:	2380      	movs	r3, #128	; 0x80
 80029ac:	011b      	lsls	r3, r3, #4
 80029ae:	401a      	ands	r2, r3
 80029b0:	2380      	movs	r3, #128	; 0x80
 80029b2:	011b      	lsls	r3, r3, #4
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d146      	bne.n	8002a46 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2280      	movs	r2, #128	; 0x80
 80029be:	0112      	lsls	r2, r2, #4
 80029c0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029c2:	f3ef 8310 	mrs	r3, PRIMASK
 80029c6:	613b      	str	r3, [r7, #16]
  return(result);
 80029c8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029cc:	2301      	movs	r3, #1
 80029ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	f383 8810 	msr	PRIMASK, r3
}
 80029d6:	46c0      	nop			; (mov r8, r8)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4923      	ldr	r1, [pc, #140]	; (8002a70 <UART_WaitOnFlagUntilTimeout+0x184>)
 80029e4:	400a      	ands	r2, r1
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029ea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	f383 8810 	msr	PRIMASK, r3
}
 80029f2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029f4:	f3ef 8310 	mrs	r3, PRIMASK
 80029f8:	61fb      	str	r3, [r7, #28]
  return(result);
 80029fa:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80029fe:	2301      	movs	r3, #1
 8002a00:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a02:	6a3b      	ldr	r3, [r7, #32]
 8002a04:	f383 8810 	msr	PRIMASK, r3
}
 8002a08:	46c0      	nop			; (mov r8, r8)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2101      	movs	r1, #1
 8002a16:	438a      	bics	r2, r1
 8002a18:	609a      	str	r2, [r3, #8]
 8002a1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a1c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	f383 8810 	msr	PRIMASK, r3
}
 8002a24:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2220      	movs	r2, #32
 8002a2a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2220      	movs	r2, #32
 8002a30:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2280      	movs	r2, #128	; 0x80
 8002a36:	2120      	movs	r1, #32
 8002a38:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2274      	movs	r2, #116	; 0x74
 8002a3e:	2100      	movs	r1, #0
 8002a40:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e010      	b.n	8002a68 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	69db      	ldr	r3, [r3, #28]
 8002a4c:	68ba      	ldr	r2, [r7, #8]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	68ba      	ldr	r2, [r7, #8]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	425a      	negs	r2, r3
 8002a56:	4153      	adcs	r3, r2
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	001a      	movs	r2, r3
 8002a5c:	1dfb      	adds	r3, r7, #7
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d100      	bne.n	8002a66 <UART_WaitOnFlagUntilTimeout+0x17a>
 8002a64:	e74b      	b.n	80028fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	0018      	movs	r0, r3
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	b014      	add	sp, #80	; 0x50
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	fffffe5f 	.word	0xfffffe5f

08002a74 <__errno>:
 8002a74:	4b01      	ldr	r3, [pc, #4]	; (8002a7c <__errno+0x8>)
 8002a76:	6818      	ldr	r0, [r3, #0]
 8002a78:	4770      	bx	lr
 8002a7a:	46c0      	nop			; (mov r8, r8)
 8002a7c:	2000000c 	.word	0x2000000c

08002a80 <__libc_init_array>:
 8002a80:	b570      	push	{r4, r5, r6, lr}
 8002a82:	2600      	movs	r6, #0
 8002a84:	4d0c      	ldr	r5, [pc, #48]	; (8002ab8 <__libc_init_array+0x38>)
 8002a86:	4c0d      	ldr	r4, [pc, #52]	; (8002abc <__libc_init_array+0x3c>)
 8002a88:	1b64      	subs	r4, r4, r5
 8002a8a:	10a4      	asrs	r4, r4, #2
 8002a8c:	42a6      	cmp	r6, r4
 8002a8e:	d109      	bne.n	8002aa4 <__libc_init_array+0x24>
 8002a90:	2600      	movs	r6, #0
 8002a92:	f000 fc8b 	bl	80033ac <_init>
 8002a96:	4d0a      	ldr	r5, [pc, #40]	; (8002ac0 <__libc_init_array+0x40>)
 8002a98:	4c0a      	ldr	r4, [pc, #40]	; (8002ac4 <__libc_init_array+0x44>)
 8002a9a:	1b64      	subs	r4, r4, r5
 8002a9c:	10a4      	asrs	r4, r4, #2
 8002a9e:	42a6      	cmp	r6, r4
 8002aa0:	d105      	bne.n	8002aae <__libc_init_array+0x2e>
 8002aa2:	bd70      	pop	{r4, r5, r6, pc}
 8002aa4:	00b3      	lsls	r3, r6, #2
 8002aa6:	58eb      	ldr	r3, [r5, r3]
 8002aa8:	4798      	blx	r3
 8002aaa:	3601      	adds	r6, #1
 8002aac:	e7ee      	b.n	8002a8c <__libc_init_array+0xc>
 8002aae:	00b3      	lsls	r3, r6, #2
 8002ab0:	58eb      	ldr	r3, [r5, r3]
 8002ab2:	4798      	blx	r3
 8002ab4:	3601      	adds	r6, #1
 8002ab6:	e7f2      	b.n	8002a9e <__libc_init_array+0x1e>
 8002ab8:	0800351c 	.word	0x0800351c
 8002abc:	0800351c 	.word	0x0800351c
 8002ac0:	0800351c 	.word	0x0800351c
 8002ac4:	08003520 	.word	0x08003520

08002ac8 <memset>:
 8002ac8:	0003      	movs	r3, r0
 8002aca:	1882      	adds	r2, r0, r2
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d100      	bne.n	8002ad2 <memset+0xa>
 8002ad0:	4770      	bx	lr
 8002ad2:	7019      	strb	r1, [r3, #0]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	e7f9      	b.n	8002acc <memset+0x4>

08002ad8 <siprintf>:
 8002ad8:	b40e      	push	{r1, r2, r3}
 8002ada:	b500      	push	{lr}
 8002adc:	490b      	ldr	r1, [pc, #44]	; (8002b0c <siprintf+0x34>)
 8002ade:	b09c      	sub	sp, #112	; 0x70
 8002ae0:	ab1d      	add	r3, sp, #116	; 0x74
 8002ae2:	9002      	str	r0, [sp, #8]
 8002ae4:	9006      	str	r0, [sp, #24]
 8002ae6:	9107      	str	r1, [sp, #28]
 8002ae8:	9104      	str	r1, [sp, #16]
 8002aea:	4809      	ldr	r0, [pc, #36]	; (8002b10 <siprintf+0x38>)
 8002aec:	4909      	ldr	r1, [pc, #36]	; (8002b14 <siprintf+0x3c>)
 8002aee:	cb04      	ldmia	r3!, {r2}
 8002af0:	9105      	str	r1, [sp, #20]
 8002af2:	6800      	ldr	r0, [r0, #0]
 8002af4:	a902      	add	r1, sp, #8
 8002af6:	9301      	str	r3, [sp, #4]
 8002af8:	f000 f870 	bl	8002bdc <_svfiprintf_r>
 8002afc:	2300      	movs	r3, #0
 8002afe:	9a02      	ldr	r2, [sp, #8]
 8002b00:	7013      	strb	r3, [r2, #0]
 8002b02:	b01c      	add	sp, #112	; 0x70
 8002b04:	bc08      	pop	{r3}
 8002b06:	b003      	add	sp, #12
 8002b08:	4718      	bx	r3
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	7fffffff 	.word	0x7fffffff
 8002b10:	2000000c 	.word	0x2000000c
 8002b14:	ffff0208 	.word	0xffff0208

08002b18 <__ssputs_r>:
 8002b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b1a:	688e      	ldr	r6, [r1, #8]
 8002b1c:	b085      	sub	sp, #20
 8002b1e:	0007      	movs	r7, r0
 8002b20:	000c      	movs	r4, r1
 8002b22:	9203      	str	r2, [sp, #12]
 8002b24:	9301      	str	r3, [sp, #4]
 8002b26:	429e      	cmp	r6, r3
 8002b28:	d83c      	bhi.n	8002ba4 <__ssputs_r+0x8c>
 8002b2a:	2390      	movs	r3, #144	; 0x90
 8002b2c:	898a      	ldrh	r2, [r1, #12]
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	421a      	tst	r2, r3
 8002b32:	d034      	beq.n	8002b9e <__ssputs_r+0x86>
 8002b34:	6909      	ldr	r1, [r1, #16]
 8002b36:	6823      	ldr	r3, [r4, #0]
 8002b38:	6960      	ldr	r0, [r4, #20]
 8002b3a:	1a5b      	subs	r3, r3, r1
 8002b3c:	9302      	str	r3, [sp, #8]
 8002b3e:	2303      	movs	r3, #3
 8002b40:	4343      	muls	r3, r0
 8002b42:	0fdd      	lsrs	r5, r3, #31
 8002b44:	18ed      	adds	r5, r5, r3
 8002b46:	9b01      	ldr	r3, [sp, #4]
 8002b48:	9802      	ldr	r0, [sp, #8]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	181b      	adds	r3, r3, r0
 8002b4e:	106d      	asrs	r5, r5, #1
 8002b50:	42ab      	cmp	r3, r5
 8002b52:	d900      	bls.n	8002b56 <__ssputs_r+0x3e>
 8002b54:	001d      	movs	r5, r3
 8002b56:	0553      	lsls	r3, r2, #21
 8002b58:	d532      	bpl.n	8002bc0 <__ssputs_r+0xa8>
 8002b5a:	0029      	movs	r1, r5
 8002b5c:	0038      	movs	r0, r7
 8002b5e:	f000 fb53 	bl	8003208 <_malloc_r>
 8002b62:	1e06      	subs	r6, r0, #0
 8002b64:	d109      	bne.n	8002b7a <__ssputs_r+0x62>
 8002b66:	230c      	movs	r3, #12
 8002b68:	603b      	str	r3, [r7, #0]
 8002b6a:	2340      	movs	r3, #64	; 0x40
 8002b6c:	2001      	movs	r0, #1
 8002b6e:	89a2      	ldrh	r2, [r4, #12]
 8002b70:	4240      	negs	r0, r0
 8002b72:	4313      	orrs	r3, r2
 8002b74:	81a3      	strh	r3, [r4, #12]
 8002b76:	b005      	add	sp, #20
 8002b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b7a:	9a02      	ldr	r2, [sp, #8]
 8002b7c:	6921      	ldr	r1, [r4, #16]
 8002b7e:	f000 faba 	bl	80030f6 <memcpy>
 8002b82:	89a3      	ldrh	r3, [r4, #12]
 8002b84:	4a14      	ldr	r2, [pc, #80]	; (8002bd8 <__ssputs_r+0xc0>)
 8002b86:	401a      	ands	r2, r3
 8002b88:	2380      	movs	r3, #128	; 0x80
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	81a3      	strh	r3, [r4, #12]
 8002b8e:	9b02      	ldr	r3, [sp, #8]
 8002b90:	6126      	str	r6, [r4, #16]
 8002b92:	18f6      	adds	r6, r6, r3
 8002b94:	6026      	str	r6, [r4, #0]
 8002b96:	6165      	str	r5, [r4, #20]
 8002b98:	9e01      	ldr	r6, [sp, #4]
 8002b9a:	1aed      	subs	r5, r5, r3
 8002b9c:	60a5      	str	r5, [r4, #8]
 8002b9e:	9b01      	ldr	r3, [sp, #4]
 8002ba0:	429e      	cmp	r6, r3
 8002ba2:	d900      	bls.n	8002ba6 <__ssputs_r+0x8e>
 8002ba4:	9e01      	ldr	r6, [sp, #4]
 8002ba6:	0032      	movs	r2, r6
 8002ba8:	9903      	ldr	r1, [sp, #12]
 8002baa:	6820      	ldr	r0, [r4, #0]
 8002bac:	f000 faac 	bl	8003108 <memmove>
 8002bb0:	68a3      	ldr	r3, [r4, #8]
 8002bb2:	2000      	movs	r0, #0
 8002bb4:	1b9b      	subs	r3, r3, r6
 8002bb6:	60a3      	str	r3, [r4, #8]
 8002bb8:	6823      	ldr	r3, [r4, #0]
 8002bba:	199e      	adds	r6, r3, r6
 8002bbc:	6026      	str	r6, [r4, #0]
 8002bbe:	e7da      	b.n	8002b76 <__ssputs_r+0x5e>
 8002bc0:	002a      	movs	r2, r5
 8002bc2:	0038      	movs	r0, r7
 8002bc4:	f000 fb96 	bl	80032f4 <_realloc_r>
 8002bc8:	1e06      	subs	r6, r0, #0
 8002bca:	d1e0      	bne.n	8002b8e <__ssputs_r+0x76>
 8002bcc:	0038      	movs	r0, r7
 8002bce:	6921      	ldr	r1, [r4, #16]
 8002bd0:	f000 faae 	bl	8003130 <_free_r>
 8002bd4:	e7c7      	b.n	8002b66 <__ssputs_r+0x4e>
 8002bd6:	46c0      	nop			; (mov r8, r8)
 8002bd8:	fffffb7f 	.word	0xfffffb7f

08002bdc <_svfiprintf_r>:
 8002bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bde:	b0a1      	sub	sp, #132	; 0x84
 8002be0:	9003      	str	r0, [sp, #12]
 8002be2:	001d      	movs	r5, r3
 8002be4:	898b      	ldrh	r3, [r1, #12]
 8002be6:	000f      	movs	r7, r1
 8002be8:	0016      	movs	r6, r2
 8002bea:	061b      	lsls	r3, r3, #24
 8002bec:	d511      	bpl.n	8002c12 <_svfiprintf_r+0x36>
 8002bee:	690b      	ldr	r3, [r1, #16]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d10e      	bne.n	8002c12 <_svfiprintf_r+0x36>
 8002bf4:	2140      	movs	r1, #64	; 0x40
 8002bf6:	f000 fb07 	bl	8003208 <_malloc_r>
 8002bfa:	6038      	str	r0, [r7, #0]
 8002bfc:	6138      	str	r0, [r7, #16]
 8002bfe:	2800      	cmp	r0, #0
 8002c00:	d105      	bne.n	8002c0e <_svfiprintf_r+0x32>
 8002c02:	230c      	movs	r3, #12
 8002c04:	9a03      	ldr	r2, [sp, #12]
 8002c06:	3801      	subs	r0, #1
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	b021      	add	sp, #132	; 0x84
 8002c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c0e:	2340      	movs	r3, #64	; 0x40
 8002c10:	617b      	str	r3, [r7, #20]
 8002c12:	2300      	movs	r3, #0
 8002c14:	ac08      	add	r4, sp, #32
 8002c16:	6163      	str	r3, [r4, #20]
 8002c18:	3320      	adds	r3, #32
 8002c1a:	7663      	strb	r3, [r4, #25]
 8002c1c:	3310      	adds	r3, #16
 8002c1e:	76a3      	strb	r3, [r4, #26]
 8002c20:	9507      	str	r5, [sp, #28]
 8002c22:	0035      	movs	r5, r6
 8002c24:	782b      	ldrb	r3, [r5, #0]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <_svfiprintf_r+0x52>
 8002c2a:	2b25      	cmp	r3, #37	; 0x25
 8002c2c:	d147      	bne.n	8002cbe <_svfiprintf_r+0xe2>
 8002c2e:	1bab      	subs	r3, r5, r6
 8002c30:	9305      	str	r3, [sp, #20]
 8002c32:	42b5      	cmp	r5, r6
 8002c34:	d00c      	beq.n	8002c50 <_svfiprintf_r+0x74>
 8002c36:	0032      	movs	r2, r6
 8002c38:	0039      	movs	r1, r7
 8002c3a:	9803      	ldr	r0, [sp, #12]
 8002c3c:	f7ff ff6c 	bl	8002b18 <__ssputs_r>
 8002c40:	1c43      	adds	r3, r0, #1
 8002c42:	d100      	bne.n	8002c46 <_svfiprintf_r+0x6a>
 8002c44:	e0ae      	b.n	8002da4 <_svfiprintf_r+0x1c8>
 8002c46:	6962      	ldr	r2, [r4, #20]
 8002c48:	9b05      	ldr	r3, [sp, #20]
 8002c4a:	4694      	mov	ip, r2
 8002c4c:	4463      	add	r3, ip
 8002c4e:	6163      	str	r3, [r4, #20]
 8002c50:	782b      	ldrb	r3, [r5, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d100      	bne.n	8002c58 <_svfiprintf_r+0x7c>
 8002c56:	e0a5      	b.n	8002da4 <_svfiprintf_r+0x1c8>
 8002c58:	2201      	movs	r2, #1
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	4252      	negs	r2, r2
 8002c5e:	6062      	str	r2, [r4, #4]
 8002c60:	a904      	add	r1, sp, #16
 8002c62:	3254      	adds	r2, #84	; 0x54
 8002c64:	1852      	adds	r2, r2, r1
 8002c66:	1c6e      	adds	r6, r5, #1
 8002c68:	6023      	str	r3, [r4, #0]
 8002c6a:	60e3      	str	r3, [r4, #12]
 8002c6c:	60a3      	str	r3, [r4, #8]
 8002c6e:	7013      	strb	r3, [r2, #0]
 8002c70:	65a3      	str	r3, [r4, #88]	; 0x58
 8002c72:	2205      	movs	r2, #5
 8002c74:	7831      	ldrb	r1, [r6, #0]
 8002c76:	4854      	ldr	r0, [pc, #336]	; (8002dc8 <_svfiprintf_r+0x1ec>)
 8002c78:	f000 fa32 	bl	80030e0 <memchr>
 8002c7c:	1c75      	adds	r5, r6, #1
 8002c7e:	2800      	cmp	r0, #0
 8002c80:	d11f      	bne.n	8002cc2 <_svfiprintf_r+0xe6>
 8002c82:	6822      	ldr	r2, [r4, #0]
 8002c84:	06d3      	lsls	r3, r2, #27
 8002c86:	d504      	bpl.n	8002c92 <_svfiprintf_r+0xb6>
 8002c88:	2353      	movs	r3, #83	; 0x53
 8002c8a:	a904      	add	r1, sp, #16
 8002c8c:	185b      	adds	r3, r3, r1
 8002c8e:	2120      	movs	r1, #32
 8002c90:	7019      	strb	r1, [r3, #0]
 8002c92:	0713      	lsls	r3, r2, #28
 8002c94:	d504      	bpl.n	8002ca0 <_svfiprintf_r+0xc4>
 8002c96:	2353      	movs	r3, #83	; 0x53
 8002c98:	a904      	add	r1, sp, #16
 8002c9a:	185b      	adds	r3, r3, r1
 8002c9c:	212b      	movs	r1, #43	; 0x2b
 8002c9e:	7019      	strb	r1, [r3, #0]
 8002ca0:	7833      	ldrb	r3, [r6, #0]
 8002ca2:	2b2a      	cmp	r3, #42	; 0x2a
 8002ca4:	d016      	beq.n	8002cd4 <_svfiprintf_r+0xf8>
 8002ca6:	0035      	movs	r5, r6
 8002ca8:	2100      	movs	r1, #0
 8002caa:	200a      	movs	r0, #10
 8002cac:	68e3      	ldr	r3, [r4, #12]
 8002cae:	782a      	ldrb	r2, [r5, #0]
 8002cb0:	1c6e      	adds	r6, r5, #1
 8002cb2:	3a30      	subs	r2, #48	; 0x30
 8002cb4:	2a09      	cmp	r2, #9
 8002cb6:	d94e      	bls.n	8002d56 <_svfiprintf_r+0x17a>
 8002cb8:	2900      	cmp	r1, #0
 8002cba:	d111      	bne.n	8002ce0 <_svfiprintf_r+0x104>
 8002cbc:	e017      	b.n	8002cee <_svfiprintf_r+0x112>
 8002cbe:	3501      	adds	r5, #1
 8002cc0:	e7b0      	b.n	8002c24 <_svfiprintf_r+0x48>
 8002cc2:	4b41      	ldr	r3, [pc, #260]	; (8002dc8 <_svfiprintf_r+0x1ec>)
 8002cc4:	6822      	ldr	r2, [r4, #0]
 8002cc6:	1ac0      	subs	r0, r0, r3
 8002cc8:	2301      	movs	r3, #1
 8002cca:	4083      	lsls	r3, r0
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	002e      	movs	r6, r5
 8002cd0:	6023      	str	r3, [r4, #0]
 8002cd2:	e7ce      	b.n	8002c72 <_svfiprintf_r+0x96>
 8002cd4:	9b07      	ldr	r3, [sp, #28]
 8002cd6:	1d19      	adds	r1, r3, #4
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	9107      	str	r1, [sp, #28]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	db01      	blt.n	8002ce4 <_svfiprintf_r+0x108>
 8002ce0:	930b      	str	r3, [sp, #44]	; 0x2c
 8002ce2:	e004      	b.n	8002cee <_svfiprintf_r+0x112>
 8002ce4:	425b      	negs	r3, r3
 8002ce6:	60e3      	str	r3, [r4, #12]
 8002ce8:	2302      	movs	r3, #2
 8002cea:	4313      	orrs	r3, r2
 8002cec:	6023      	str	r3, [r4, #0]
 8002cee:	782b      	ldrb	r3, [r5, #0]
 8002cf0:	2b2e      	cmp	r3, #46	; 0x2e
 8002cf2:	d10a      	bne.n	8002d0a <_svfiprintf_r+0x12e>
 8002cf4:	786b      	ldrb	r3, [r5, #1]
 8002cf6:	2b2a      	cmp	r3, #42	; 0x2a
 8002cf8:	d135      	bne.n	8002d66 <_svfiprintf_r+0x18a>
 8002cfa:	9b07      	ldr	r3, [sp, #28]
 8002cfc:	3502      	adds	r5, #2
 8002cfe:	1d1a      	adds	r2, r3, #4
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	9207      	str	r2, [sp, #28]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	db2b      	blt.n	8002d60 <_svfiprintf_r+0x184>
 8002d08:	9309      	str	r3, [sp, #36]	; 0x24
 8002d0a:	4e30      	ldr	r6, [pc, #192]	; (8002dcc <_svfiprintf_r+0x1f0>)
 8002d0c:	2203      	movs	r2, #3
 8002d0e:	0030      	movs	r0, r6
 8002d10:	7829      	ldrb	r1, [r5, #0]
 8002d12:	f000 f9e5 	bl	80030e0 <memchr>
 8002d16:	2800      	cmp	r0, #0
 8002d18:	d006      	beq.n	8002d28 <_svfiprintf_r+0x14c>
 8002d1a:	2340      	movs	r3, #64	; 0x40
 8002d1c:	1b80      	subs	r0, r0, r6
 8002d1e:	4083      	lsls	r3, r0
 8002d20:	6822      	ldr	r2, [r4, #0]
 8002d22:	3501      	adds	r5, #1
 8002d24:	4313      	orrs	r3, r2
 8002d26:	6023      	str	r3, [r4, #0]
 8002d28:	7829      	ldrb	r1, [r5, #0]
 8002d2a:	2206      	movs	r2, #6
 8002d2c:	4828      	ldr	r0, [pc, #160]	; (8002dd0 <_svfiprintf_r+0x1f4>)
 8002d2e:	1c6e      	adds	r6, r5, #1
 8002d30:	7621      	strb	r1, [r4, #24]
 8002d32:	f000 f9d5 	bl	80030e0 <memchr>
 8002d36:	2800      	cmp	r0, #0
 8002d38:	d03c      	beq.n	8002db4 <_svfiprintf_r+0x1d8>
 8002d3a:	4b26      	ldr	r3, [pc, #152]	; (8002dd4 <_svfiprintf_r+0x1f8>)
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d125      	bne.n	8002d8c <_svfiprintf_r+0x1b0>
 8002d40:	2207      	movs	r2, #7
 8002d42:	9b07      	ldr	r3, [sp, #28]
 8002d44:	3307      	adds	r3, #7
 8002d46:	4393      	bics	r3, r2
 8002d48:	3308      	adds	r3, #8
 8002d4a:	9307      	str	r3, [sp, #28]
 8002d4c:	6963      	ldr	r3, [r4, #20]
 8002d4e:	9a04      	ldr	r2, [sp, #16]
 8002d50:	189b      	adds	r3, r3, r2
 8002d52:	6163      	str	r3, [r4, #20]
 8002d54:	e765      	b.n	8002c22 <_svfiprintf_r+0x46>
 8002d56:	4343      	muls	r3, r0
 8002d58:	0035      	movs	r5, r6
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	189b      	adds	r3, r3, r2
 8002d5e:	e7a6      	b.n	8002cae <_svfiprintf_r+0xd2>
 8002d60:	2301      	movs	r3, #1
 8002d62:	425b      	negs	r3, r3
 8002d64:	e7d0      	b.n	8002d08 <_svfiprintf_r+0x12c>
 8002d66:	2300      	movs	r3, #0
 8002d68:	200a      	movs	r0, #10
 8002d6a:	001a      	movs	r2, r3
 8002d6c:	3501      	adds	r5, #1
 8002d6e:	6063      	str	r3, [r4, #4]
 8002d70:	7829      	ldrb	r1, [r5, #0]
 8002d72:	1c6e      	adds	r6, r5, #1
 8002d74:	3930      	subs	r1, #48	; 0x30
 8002d76:	2909      	cmp	r1, #9
 8002d78:	d903      	bls.n	8002d82 <_svfiprintf_r+0x1a6>
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d0c5      	beq.n	8002d0a <_svfiprintf_r+0x12e>
 8002d7e:	9209      	str	r2, [sp, #36]	; 0x24
 8002d80:	e7c3      	b.n	8002d0a <_svfiprintf_r+0x12e>
 8002d82:	4342      	muls	r2, r0
 8002d84:	0035      	movs	r5, r6
 8002d86:	2301      	movs	r3, #1
 8002d88:	1852      	adds	r2, r2, r1
 8002d8a:	e7f1      	b.n	8002d70 <_svfiprintf_r+0x194>
 8002d8c:	ab07      	add	r3, sp, #28
 8002d8e:	9300      	str	r3, [sp, #0]
 8002d90:	003a      	movs	r2, r7
 8002d92:	0021      	movs	r1, r4
 8002d94:	4b10      	ldr	r3, [pc, #64]	; (8002dd8 <_svfiprintf_r+0x1fc>)
 8002d96:	9803      	ldr	r0, [sp, #12]
 8002d98:	e000      	b.n	8002d9c <_svfiprintf_r+0x1c0>
 8002d9a:	bf00      	nop
 8002d9c:	9004      	str	r0, [sp, #16]
 8002d9e:	9b04      	ldr	r3, [sp, #16]
 8002da0:	3301      	adds	r3, #1
 8002da2:	d1d3      	bne.n	8002d4c <_svfiprintf_r+0x170>
 8002da4:	89bb      	ldrh	r3, [r7, #12]
 8002da6:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002da8:	065b      	lsls	r3, r3, #25
 8002daa:	d400      	bmi.n	8002dae <_svfiprintf_r+0x1d2>
 8002dac:	e72d      	b.n	8002c0a <_svfiprintf_r+0x2e>
 8002dae:	2001      	movs	r0, #1
 8002db0:	4240      	negs	r0, r0
 8002db2:	e72a      	b.n	8002c0a <_svfiprintf_r+0x2e>
 8002db4:	ab07      	add	r3, sp, #28
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	003a      	movs	r2, r7
 8002dba:	0021      	movs	r1, r4
 8002dbc:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <_svfiprintf_r+0x1fc>)
 8002dbe:	9803      	ldr	r0, [sp, #12]
 8002dc0:	f000 f87c 	bl	8002ebc <_printf_i>
 8002dc4:	e7ea      	b.n	8002d9c <_svfiprintf_r+0x1c0>
 8002dc6:	46c0      	nop			; (mov r8, r8)
 8002dc8:	080034e8 	.word	0x080034e8
 8002dcc:	080034ee 	.word	0x080034ee
 8002dd0:	080034f2 	.word	0x080034f2
 8002dd4:	00000000 	.word	0x00000000
 8002dd8:	08002b19 	.word	0x08002b19

08002ddc <_printf_common>:
 8002ddc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002dde:	0015      	movs	r5, r2
 8002de0:	9301      	str	r3, [sp, #4]
 8002de2:	688a      	ldr	r2, [r1, #8]
 8002de4:	690b      	ldr	r3, [r1, #16]
 8002de6:	000c      	movs	r4, r1
 8002de8:	9000      	str	r0, [sp, #0]
 8002dea:	4293      	cmp	r3, r2
 8002dec:	da00      	bge.n	8002df0 <_printf_common+0x14>
 8002dee:	0013      	movs	r3, r2
 8002df0:	0022      	movs	r2, r4
 8002df2:	602b      	str	r3, [r5, #0]
 8002df4:	3243      	adds	r2, #67	; 0x43
 8002df6:	7812      	ldrb	r2, [r2, #0]
 8002df8:	2a00      	cmp	r2, #0
 8002dfa:	d001      	beq.n	8002e00 <_printf_common+0x24>
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	602b      	str	r3, [r5, #0]
 8002e00:	6823      	ldr	r3, [r4, #0]
 8002e02:	069b      	lsls	r3, r3, #26
 8002e04:	d502      	bpl.n	8002e0c <_printf_common+0x30>
 8002e06:	682b      	ldr	r3, [r5, #0]
 8002e08:	3302      	adds	r3, #2
 8002e0a:	602b      	str	r3, [r5, #0]
 8002e0c:	6822      	ldr	r2, [r4, #0]
 8002e0e:	2306      	movs	r3, #6
 8002e10:	0017      	movs	r7, r2
 8002e12:	401f      	ands	r7, r3
 8002e14:	421a      	tst	r2, r3
 8002e16:	d027      	beq.n	8002e68 <_printf_common+0x8c>
 8002e18:	0023      	movs	r3, r4
 8002e1a:	3343      	adds	r3, #67	; 0x43
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	1e5a      	subs	r2, r3, #1
 8002e20:	4193      	sbcs	r3, r2
 8002e22:	6822      	ldr	r2, [r4, #0]
 8002e24:	0692      	lsls	r2, r2, #26
 8002e26:	d430      	bmi.n	8002e8a <_printf_common+0xae>
 8002e28:	0022      	movs	r2, r4
 8002e2a:	9901      	ldr	r1, [sp, #4]
 8002e2c:	9800      	ldr	r0, [sp, #0]
 8002e2e:	9e08      	ldr	r6, [sp, #32]
 8002e30:	3243      	adds	r2, #67	; 0x43
 8002e32:	47b0      	blx	r6
 8002e34:	1c43      	adds	r3, r0, #1
 8002e36:	d025      	beq.n	8002e84 <_printf_common+0xa8>
 8002e38:	2306      	movs	r3, #6
 8002e3a:	6820      	ldr	r0, [r4, #0]
 8002e3c:	682a      	ldr	r2, [r5, #0]
 8002e3e:	68e1      	ldr	r1, [r4, #12]
 8002e40:	2500      	movs	r5, #0
 8002e42:	4003      	ands	r3, r0
 8002e44:	2b04      	cmp	r3, #4
 8002e46:	d103      	bne.n	8002e50 <_printf_common+0x74>
 8002e48:	1a8d      	subs	r5, r1, r2
 8002e4a:	43eb      	mvns	r3, r5
 8002e4c:	17db      	asrs	r3, r3, #31
 8002e4e:	401d      	ands	r5, r3
 8002e50:	68a3      	ldr	r3, [r4, #8]
 8002e52:	6922      	ldr	r2, [r4, #16]
 8002e54:	4293      	cmp	r3, r2
 8002e56:	dd01      	ble.n	8002e5c <_printf_common+0x80>
 8002e58:	1a9b      	subs	r3, r3, r2
 8002e5a:	18ed      	adds	r5, r5, r3
 8002e5c:	2700      	movs	r7, #0
 8002e5e:	42bd      	cmp	r5, r7
 8002e60:	d120      	bne.n	8002ea4 <_printf_common+0xc8>
 8002e62:	2000      	movs	r0, #0
 8002e64:	e010      	b.n	8002e88 <_printf_common+0xac>
 8002e66:	3701      	adds	r7, #1
 8002e68:	68e3      	ldr	r3, [r4, #12]
 8002e6a:	682a      	ldr	r2, [r5, #0]
 8002e6c:	1a9b      	subs	r3, r3, r2
 8002e6e:	42bb      	cmp	r3, r7
 8002e70:	ddd2      	ble.n	8002e18 <_printf_common+0x3c>
 8002e72:	0022      	movs	r2, r4
 8002e74:	2301      	movs	r3, #1
 8002e76:	9901      	ldr	r1, [sp, #4]
 8002e78:	9800      	ldr	r0, [sp, #0]
 8002e7a:	9e08      	ldr	r6, [sp, #32]
 8002e7c:	3219      	adds	r2, #25
 8002e7e:	47b0      	blx	r6
 8002e80:	1c43      	adds	r3, r0, #1
 8002e82:	d1f0      	bne.n	8002e66 <_printf_common+0x8a>
 8002e84:	2001      	movs	r0, #1
 8002e86:	4240      	negs	r0, r0
 8002e88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002e8a:	2030      	movs	r0, #48	; 0x30
 8002e8c:	18e1      	adds	r1, r4, r3
 8002e8e:	3143      	adds	r1, #67	; 0x43
 8002e90:	7008      	strb	r0, [r1, #0]
 8002e92:	0021      	movs	r1, r4
 8002e94:	1c5a      	adds	r2, r3, #1
 8002e96:	3145      	adds	r1, #69	; 0x45
 8002e98:	7809      	ldrb	r1, [r1, #0]
 8002e9a:	18a2      	adds	r2, r4, r2
 8002e9c:	3243      	adds	r2, #67	; 0x43
 8002e9e:	3302      	adds	r3, #2
 8002ea0:	7011      	strb	r1, [r2, #0]
 8002ea2:	e7c1      	b.n	8002e28 <_printf_common+0x4c>
 8002ea4:	0022      	movs	r2, r4
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	9901      	ldr	r1, [sp, #4]
 8002eaa:	9800      	ldr	r0, [sp, #0]
 8002eac:	9e08      	ldr	r6, [sp, #32]
 8002eae:	321a      	adds	r2, #26
 8002eb0:	47b0      	blx	r6
 8002eb2:	1c43      	adds	r3, r0, #1
 8002eb4:	d0e6      	beq.n	8002e84 <_printf_common+0xa8>
 8002eb6:	3701      	adds	r7, #1
 8002eb8:	e7d1      	b.n	8002e5e <_printf_common+0x82>
	...

08002ebc <_printf_i>:
 8002ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ebe:	b08b      	sub	sp, #44	; 0x2c
 8002ec0:	9206      	str	r2, [sp, #24]
 8002ec2:	000a      	movs	r2, r1
 8002ec4:	3243      	adds	r2, #67	; 0x43
 8002ec6:	9307      	str	r3, [sp, #28]
 8002ec8:	9005      	str	r0, [sp, #20]
 8002eca:	9204      	str	r2, [sp, #16]
 8002ecc:	7e0a      	ldrb	r2, [r1, #24]
 8002ece:	000c      	movs	r4, r1
 8002ed0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002ed2:	2a78      	cmp	r2, #120	; 0x78
 8002ed4:	d807      	bhi.n	8002ee6 <_printf_i+0x2a>
 8002ed6:	2a62      	cmp	r2, #98	; 0x62
 8002ed8:	d809      	bhi.n	8002eee <_printf_i+0x32>
 8002eda:	2a00      	cmp	r2, #0
 8002edc:	d100      	bne.n	8002ee0 <_printf_i+0x24>
 8002ede:	e0c1      	b.n	8003064 <_printf_i+0x1a8>
 8002ee0:	2a58      	cmp	r2, #88	; 0x58
 8002ee2:	d100      	bne.n	8002ee6 <_printf_i+0x2a>
 8002ee4:	e08c      	b.n	8003000 <_printf_i+0x144>
 8002ee6:	0026      	movs	r6, r4
 8002ee8:	3642      	adds	r6, #66	; 0x42
 8002eea:	7032      	strb	r2, [r6, #0]
 8002eec:	e022      	b.n	8002f34 <_printf_i+0x78>
 8002eee:	0010      	movs	r0, r2
 8002ef0:	3863      	subs	r0, #99	; 0x63
 8002ef2:	2815      	cmp	r0, #21
 8002ef4:	d8f7      	bhi.n	8002ee6 <_printf_i+0x2a>
 8002ef6:	f7fd f90f 	bl	8000118 <__gnu_thumb1_case_shi>
 8002efa:	0016      	.short	0x0016
 8002efc:	fff6001f 	.word	0xfff6001f
 8002f00:	fff6fff6 	.word	0xfff6fff6
 8002f04:	001ffff6 	.word	0x001ffff6
 8002f08:	fff6fff6 	.word	0xfff6fff6
 8002f0c:	fff6fff6 	.word	0xfff6fff6
 8002f10:	003600a8 	.word	0x003600a8
 8002f14:	fff6009a 	.word	0xfff6009a
 8002f18:	00b9fff6 	.word	0x00b9fff6
 8002f1c:	0036fff6 	.word	0x0036fff6
 8002f20:	fff6fff6 	.word	0xfff6fff6
 8002f24:	009e      	.short	0x009e
 8002f26:	0026      	movs	r6, r4
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	3642      	adds	r6, #66	; 0x42
 8002f2c:	1d11      	adds	r1, r2, #4
 8002f2e:	6019      	str	r1, [r3, #0]
 8002f30:	6813      	ldr	r3, [r2, #0]
 8002f32:	7033      	strb	r3, [r6, #0]
 8002f34:	2301      	movs	r3, #1
 8002f36:	e0a7      	b.n	8003088 <_printf_i+0x1cc>
 8002f38:	6808      	ldr	r0, [r1, #0]
 8002f3a:	6819      	ldr	r1, [r3, #0]
 8002f3c:	1d0a      	adds	r2, r1, #4
 8002f3e:	0605      	lsls	r5, r0, #24
 8002f40:	d50b      	bpl.n	8002f5a <_printf_i+0x9e>
 8002f42:	680d      	ldr	r5, [r1, #0]
 8002f44:	601a      	str	r2, [r3, #0]
 8002f46:	2d00      	cmp	r5, #0
 8002f48:	da03      	bge.n	8002f52 <_printf_i+0x96>
 8002f4a:	232d      	movs	r3, #45	; 0x2d
 8002f4c:	9a04      	ldr	r2, [sp, #16]
 8002f4e:	426d      	negs	r5, r5
 8002f50:	7013      	strb	r3, [r2, #0]
 8002f52:	4b61      	ldr	r3, [pc, #388]	; (80030d8 <_printf_i+0x21c>)
 8002f54:	270a      	movs	r7, #10
 8002f56:	9303      	str	r3, [sp, #12]
 8002f58:	e01b      	b.n	8002f92 <_printf_i+0xd6>
 8002f5a:	680d      	ldr	r5, [r1, #0]
 8002f5c:	601a      	str	r2, [r3, #0]
 8002f5e:	0641      	lsls	r1, r0, #25
 8002f60:	d5f1      	bpl.n	8002f46 <_printf_i+0x8a>
 8002f62:	b22d      	sxth	r5, r5
 8002f64:	e7ef      	b.n	8002f46 <_printf_i+0x8a>
 8002f66:	680d      	ldr	r5, [r1, #0]
 8002f68:	6819      	ldr	r1, [r3, #0]
 8002f6a:	1d08      	adds	r0, r1, #4
 8002f6c:	6018      	str	r0, [r3, #0]
 8002f6e:	062e      	lsls	r6, r5, #24
 8002f70:	d501      	bpl.n	8002f76 <_printf_i+0xba>
 8002f72:	680d      	ldr	r5, [r1, #0]
 8002f74:	e003      	b.n	8002f7e <_printf_i+0xc2>
 8002f76:	066d      	lsls	r5, r5, #25
 8002f78:	d5fb      	bpl.n	8002f72 <_printf_i+0xb6>
 8002f7a:	680d      	ldr	r5, [r1, #0]
 8002f7c:	b2ad      	uxth	r5, r5
 8002f7e:	4b56      	ldr	r3, [pc, #344]	; (80030d8 <_printf_i+0x21c>)
 8002f80:	2708      	movs	r7, #8
 8002f82:	9303      	str	r3, [sp, #12]
 8002f84:	2a6f      	cmp	r2, #111	; 0x6f
 8002f86:	d000      	beq.n	8002f8a <_printf_i+0xce>
 8002f88:	3702      	adds	r7, #2
 8002f8a:	0023      	movs	r3, r4
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	3343      	adds	r3, #67	; 0x43
 8002f90:	701a      	strb	r2, [r3, #0]
 8002f92:	6863      	ldr	r3, [r4, #4]
 8002f94:	60a3      	str	r3, [r4, #8]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	db03      	blt.n	8002fa2 <_printf_i+0xe6>
 8002f9a:	2204      	movs	r2, #4
 8002f9c:	6821      	ldr	r1, [r4, #0]
 8002f9e:	4391      	bics	r1, r2
 8002fa0:	6021      	str	r1, [r4, #0]
 8002fa2:	2d00      	cmp	r5, #0
 8002fa4:	d102      	bne.n	8002fac <_printf_i+0xf0>
 8002fa6:	9e04      	ldr	r6, [sp, #16]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00c      	beq.n	8002fc6 <_printf_i+0x10a>
 8002fac:	9e04      	ldr	r6, [sp, #16]
 8002fae:	0028      	movs	r0, r5
 8002fb0:	0039      	movs	r1, r7
 8002fb2:	f7fd f941 	bl	8000238 <__aeabi_uidivmod>
 8002fb6:	9b03      	ldr	r3, [sp, #12]
 8002fb8:	3e01      	subs	r6, #1
 8002fba:	5c5b      	ldrb	r3, [r3, r1]
 8002fbc:	7033      	strb	r3, [r6, #0]
 8002fbe:	002b      	movs	r3, r5
 8002fc0:	0005      	movs	r5, r0
 8002fc2:	429f      	cmp	r7, r3
 8002fc4:	d9f3      	bls.n	8002fae <_printf_i+0xf2>
 8002fc6:	2f08      	cmp	r7, #8
 8002fc8:	d109      	bne.n	8002fde <_printf_i+0x122>
 8002fca:	6823      	ldr	r3, [r4, #0]
 8002fcc:	07db      	lsls	r3, r3, #31
 8002fce:	d506      	bpl.n	8002fde <_printf_i+0x122>
 8002fd0:	6863      	ldr	r3, [r4, #4]
 8002fd2:	6922      	ldr	r2, [r4, #16]
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	dc02      	bgt.n	8002fde <_printf_i+0x122>
 8002fd8:	2330      	movs	r3, #48	; 0x30
 8002fda:	3e01      	subs	r6, #1
 8002fdc:	7033      	strb	r3, [r6, #0]
 8002fde:	9b04      	ldr	r3, [sp, #16]
 8002fe0:	1b9b      	subs	r3, r3, r6
 8002fe2:	6123      	str	r3, [r4, #16]
 8002fe4:	9b07      	ldr	r3, [sp, #28]
 8002fe6:	0021      	movs	r1, r4
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	9805      	ldr	r0, [sp, #20]
 8002fec:	9b06      	ldr	r3, [sp, #24]
 8002fee:	aa09      	add	r2, sp, #36	; 0x24
 8002ff0:	f7ff fef4 	bl	8002ddc <_printf_common>
 8002ff4:	1c43      	adds	r3, r0, #1
 8002ff6:	d14c      	bne.n	8003092 <_printf_i+0x1d6>
 8002ff8:	2001      	movs	r0, #1
 8002ffa:	4240      	negs	r0, r0
 8002ffc:	b00b      	add	sp, #44	; 0x2c
 8002ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003000:	3145      	adds	r1, #69	; 0x45
 8003002:	700a      	strb	r2, [r1, #0]
 8003004:	4a34      	ldr	r2, [pc, #208]	; (80030d8 <_printf_i+0x21c>)
 8003006:	9203      	str	r2, [sp, #12]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	6821      	ldr	r1, [r4, #0]
 800300c:	ca20      	ldmia	r2!, {r5}
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	0608      	lsls	r0, r1, #24
 8003012:	d516      	bpl.n	8003042 <_printf_i+0x186>
 8003014:	07cb      	lsls	r3, r1, #31
 8003016:	d502      	bpl.n	800301e <_printf_i+0x162>
 8003018:	2320      	movs	r3, #32
 800301a:	4319      	orrs	r1, r3
 800301c:	6021      	str	r1, [r4, #0]
 800301e:	2710      	movs	r7, #16
 8003020:	2d00      	cmp	r5, #0
 8003022:	d1b2      	bne.n	8002f8a <_printf_i+0xce>
 8003024:	2320      	movs	r3, #32
 8003026:	6822      	ldr	r2, [r4, #0]
 8003028:	439a      	bics	r2, r3
 800302a:	6022      	str	r2, [r4, #0]
 800302c:	e7ad      	b.n	8002f8a <_printf_i+0xce>
 800302e:	2220      	movs	r2, #32
 8003030:	6809      	ldr	r1, [r1, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	6022      	str	r2, [r4, #0]
 8003036:	0022      	movs	r2, r4
 8003038:	2178      	movs	r1, #120	; 0x78
 800303a:	3245      	adds	r2, #69	; 0x45
 800303c:	7011      	strb	r1, [r2, #0]
 800303e:	4a27      	ldr	r2, [pc, #156]	; (80030dc <_printf_i+0x220>)
 8003040:	e7e1      	b.n	8003006 <_printf_i+0x14a>
 8003042:	0648      	lsls	r0, r1, #25
 8003044:	d5e6      	bpl.n	8003014 <_printf_i+0x158>
 8003046:	b2ad      	uxth	r5, r5
 8003048:	e7e4      	b.n	8003014 <_printf_i+0x158>
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	680d      	ldr	r5, [r1, #0]
 800304e:	1d10      	adds	r0, r2, #4
 8003050:	6949      	ldr	r1, [r1, #20]
 8003052:	6018      	str	r0, [r3, #0]
 8003054:	6813      	ldr	r3, [r2, #0]
 8003056:	062e      	lsls	r6, r5, #24
 8003058:	d501      	bpl.n	800305e <_printf_i+0x1a2>
 800305a:	6019      	str	r1, [r3, #0]
 800305c:	e002      	b.n	8003064 <_printf_i+0x1a8>
 800305e:	066d      	lsls	r5, r5, #25
 8003060:	d5fb      	bpl.n	800305a <_printf_i+0x19e>
 8003062:	8019      	strh	r1, [r3, #0]
 8003064:	2300      	movs	r3, #0
 8003066:	9e04      	ldr	r6, [sp, #16]
 8003068:	6123      	str	r3, [r4, #16]
 800306a:	e7bb      	b.n	8002fe4 <_printf_i+0x128>
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	1d11      	adds	r1, r2, #4
 8003070:	6019      	str	r1, [r3, #0]
 8003072:	6816      	ldr	r6, [r2, #0]
 8003074:	2100      	movs	r1, #0
 8003076:	0030      	movs	r0, r6
 8003078:	6862      	ldr	r2, [r4, #4]
 800307a:	f000 f831 	bl	80030e0 <memchr>
 800307e:	2800      	cmp	r0, #0
 8003080:	d001      	beq.n	8003086 <_printf_i+0x1ca>
 8003082:	1b80      	subs	r0, r0, r6
 8003084:	6060      	str	r0, [r4, #4]
 8003086:	6863      	ldr	r3, [r4, #4]
 8003088:	6123      	str	r3, [r4, #16]
 800308a:	2300      	movs	r3, #0
 800308c:	9a04      	ldr	r2, [sp, #16]
 800308e:	7013      	strb	r3, [r2, #0]
 8003090:	e7a8      	b.n	8002fe4 <_printf_i+0x128>
 8003092:	6923      	ldr	r3, [r4, #16]
 8003094:	0032      	movs	r2, r6
 8003096:	9906      	ldr	r1, [sp, #24]
 8003098:	9805      	ldr	r0, [sp, #20]
 800309a:	9d07      	ldr	r5, [sp, #28]
 800309c:	47a8      	blx	r5
 800309e:	1c43      	adds	r3, r0, #1
 80030a0:	d0aa      	beq.n	8002ff8 <_printf_i+0x13c>
 80030a2:	6823      	ldr	r3, [r4, #0]
 80030a4:	079b      	lsls	r3, r3, #30
 80030a6:	d415      	bmi.n	80030d4 <_printf_i+0x218>
 80030a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030aa:	68e0      	ldr	r0, [r4, #12]
 80030ac:	4298      	cmp	r0, r3
 80030ae:	daa5      	bge.n	8002ffc <_printf_i+0x140>
 80030b0:	0018      	movs	r0, r3
 80030b2:	e7a3      	b.n	8002ffc <_printf_i+0x140>
 80030b4:	0022      	movs	r2, r4
 80030b6:	2301      	movs	r3, #1
 80030b8:	9906      	ldr	r1, [sp, #24]
 80030ba:	9805      	ldr	r0, [sp, #20]
 80030bc:	9e07      	ldr	r6, [sp, #28]
 80030be:	3219      	adds	r2, #25
 80030c0:	47b0      	blx	r6
 80030c2:	1c43      	adds	r3, r0, #1
 80030c4:	d098      	beq.n	8002ff8 <_printf_i+0x13c>
 80030c6:	3501      	adds	r5, #1
 80030c8:	68e3      	ldr	r3, [r4, #12]
 80030ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80030cc:	1a9b      	subs	r3, r3, r2
 80030ce:	42ab      	cmp	r3, r5
 80030d0:	dcf0      	bgt.n	80030b4 <_printf_i+0x1f8>
 80030d2:	e7e9      	b.n	80030a8 <_printf_i+0x1ec>
 80030d4:	2500      	movs	r5, #0
 80030d6:	e7f7      	b.n	80030c8 <_printf_i+0x20c>
 80030d8:	080034f9 	.word	0x080034f9
 80030dc:	0800350a 	.word	0x0800350a

080030e0 <memchr>:
 80030e0:	b2c9      	uxtb	r1, r1
 80030e2:	1882      	adds	r2, r0, r2
 80030e4:	4290      	cmp	r0, r2
 80030e6:	d101      	bne.n	80030ec <memchr+0xc>
 80030e8:	2000      	movs	r0, #0
 80030ea:	4770      	bx	lr
 80030ec:	7803      	ldrb	r3, [r0, #0]
 80030ee:	428b      	cmp	r3, r1
 80030f0:	d0fb      	beq.n	80030ea <memchr+0xa>
 80030f2:	3001      	adds	r0, #1
 80030f4:	e7f6      	b.n	80030e4 <memchr+0x4>

080030f6 <memcpy>:
 80030f6:	2300      	movs	r3, #0
 80030f8:	b510      	push	{r4, lr}
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d100      	bne.n	8003100 <memcpy+0xa>
 80030fe:	bd10      	pop	{r4, pc}
 8003100:	5ccc      	ldrb	r4, [r1, r3]
 8003102:	54c4      	strb	r4, [r0, r3]
 8003104:	3301      	adds	r3, #1
 8003106:	e7f8      	b.n	80030fa <memcpy+0x4>

08003108 <memmove>:
 8003108:	b510      	push	{r4, lr}
 800310a:	4288      	cmp	r0, r1
 800310c:	d902      	bls.n	8003114 <memmove+0xc>
 800310e:	188b      	adds	r3, r1, r2
 8003110:	4298      	cmp	r0, r3
 8003112:	d303      	bcc.n	800311c <memmove+0x14>
 8003114:	2300      	movs	r3, #0
 8003116:	e007      	b.n	8003128 <memmove+0x20>
 8003118:	5c8b      	ldrb	r3, [r1, r2]
 800311a:	5483      	strb	r3, [r0, r2]
 800311c:	3a01      	subs	r2, #1
 800311e:	d2fb      	bcs.n	8003118 <memmove+0x10>
 8003120:	bd10      	pop	{r4, pc}
 8003122:	5ccc      	ldrb	r4, [r1, r3]
 8003124:	54c4      	strb	r4, [r0, r3]
 8003126:	3301      	adds	r3, #1
 8003128:	429a      	cmp	r2, r3
 800312a:	d1fa      	bne.n	8003122 <memmove+0x1a>
 800312c:	e7f8      	b.n	8003120 <memmove+0x18>
	...

08003130 <_free_r>:
 8003130:	b570      	push	{r4, r5, r6, lr}
 8003132:	0005      	movs	r5, r0
 8003134:	2900      	cmp	r1, #0
 8003136:	d010      	beq.n	800315a <_free_r+0x2a>
 8003138:	1f0c      	subs	r4, r1, #4
 800313a:	6823      	ldr	r3, [r4, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	da00      	bge.n	8003142 <_free_r+0x12>
 8003140:	18e4      	adds	r4, r4, r3
 8003142:	0028      	movs	r0, r5
 8003144:	f000 f918 	bl	8003378 <__malloc_lock>
 8003148:	4a1d      	ldr	r2, [pc, #116]	; (80031c0 <_free_r+0x90>)
 800314a:	6813      	ldr	r3, [r2, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d105      	bne.n	800315c <_free_r+0x2c>
 8003150:	6063      	str	r3, [r4, #4]
 8003152:	6014      	str	r4, [r2, #0]
 8003154:	0028      	movs	r0, r5
 8003156:	f000 f917 	bl	8003388 <__malloc_unlock>
 800315a:	bd70      	pop	{r4, r5, r6, pc}
 800315c:	42a3      	cmp	r3, r4
 800315e:	d908      	bls.n	8003172 <_free_r+0x42>
 8003160:	6821      	ldr	r1, [r4, #0]
 8003162:	1860      	adds	r0, r4, r1
 8003164:	4283      	cmp	r3, r0
 8003166:	d1f3      	bne.n	8003150 <_free_r+0x20>
 8003168:	6818      	ldr	r0, [r3, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	1841      	adds	r1, r0, r1
 800316e:	6021      	str	r1, [r4, #0]
 8003170:	e7ee      	b.n	8003150 <_free_r+0x20>
 8003172:	001a      	movs	r2, r3
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <_free_r+0x4e>
 800317a:	42a3      	cmp	r3, r4
 800317c:	d9f9      	bls.n	8003172 <_free_r+0x42>
 800317e:	6811      	ldr	r1, [r2, #0]
 8003180:	1850      	adds	r0, r2, r1
 8003182:	42a0      	cmp	r0, r4
 8003184:	d10b      	bne.n	800319e <_free_r+0x6e>
 8003186:	6820      	ldr	r0, [r4, #0]
 8003188:	1809      	adds	r1, r1, r0
 800318a:	1850      	adds	r0, r2, r1
 800318c:	6011      	str	r1, [r2, #0]
 800318e:	4283      	cmp	r3, r0
 8003190:	d1e0      	bne.n	8003154 <_free_r+0x24>
 8003192:	6818      	ldr	r0, [r3, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	1841      	adds	r1, r0, r1
 8003198:	6011      	str	r1, [r2, #0]
 800319a:	6053      	str	r3, [r2, #4]
 800319c:	e7da      	b.n	8003154 <_free_r+0x24>
 800319e:	42a0      	cmp	r0, r4
 80031a0:	d902      	bls.n	80031a8 <_free_r+0x78>
 80031a2:	230c      	movs	r3, #12
 80031a4:	602b      	str	r3, [r5, #0]
 80031a6:	e7d5      	b.n	8003154 <_free_r+0x24>
 80031a8:	6821      	ldr	r1, [r4, #0]
 80031aa:	1860      	adds	r0, r4, r1
 80031ac:	4283      	cmp	r3, r0
 80031ae:	d103      	bne.n	80031b8 <_free_r+0x88>
 80031b0:	6818      	ldr	r0, [r3, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	1841      	adds	r1, r0, r1
 80031b6:	6021      	str	r1, [r4, #0]
 80031b8:	6063      	str	r3, [r4, #4]
 80031ba:	6054      	str	r4, [r2, #4]
 80031bc:	e7ca      	b.n	8003154 <_free_r+0x24>
 80031be:	46c0      	nop			; (mov r8, r8)
 80031c0:	200001a0 	.word	0x200001a0

080031c4 <sbrk_aligned>:
 80031c4:	b570      	push	{r4, r5, r6, lr}
 80031c6:	4e0f      	ldr	r6, [pc, #60]	; (8003204 <sbrk_aligned+0x40>)
 80031c8:	000d      	movs	r5, r1
 80031ca:	6831      	ldr	r1, [r6, #0]
 80031cc:	0004      	movs	r4, r0
 80031ce:	2900      	cmp	r1, #0
 80031d0:	d102      	bne.n	80031d8 <sbrk_aligned+0x14>
 80031d2:	f000 f8bf 	bl	8003354 <_sbrk_r>
 80031d6:	6030      	str	r0, [r6, #0]
 80031d8:	0029      	movs	r1, r5
 80031da:	0020      	movs	r0, r4
 80031dc:	f000 f8ba 	bl	8003354 <_sbrk_r>
 80031e0:	1c43      	adds	r3, r0, #1
 80031e2:	d00a      	beq.n	80031fa <sbrk_aligned+0x36>
 80031e4:	2303      	movs	r3, #3
 80031e6:	1cc5      	adds	r5, r0, #3
 80031e8:	439d      	bics	r5, r3
 80031ea:	42a8      	cmp	r0, r5
 80031ec:	d007      	beq.n	80031fe <sbrk_aligned+0x3a>
 80031ee:	1a29      	subs	r1, r5, r0
 80031f0:	0020      	movs	r0, r4
 80031f2:	f000 f8af 	bl	8003354 <_sbrk_r>
 80031f6:	1c43      	adds	r3, r0, #1
 80031f8:	d101      	bne.n	80031fe <sbrk_aligned+0x3a>
 80031fa:	2501      	movs	r5, #1
 80031fc:	426d      	negs	r5, r5
 80031fe:	0028      	movs	r0, r5
 8003200:	bd70      	pop	{r4, r5, r6, pc}
 8003202:	46c0      	nop			; (mov r8, r8)
 8003204:	200001a4 	.word	0x200001a4

08003208 <_malloc_r>:
 8003208:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800320a:	2203      	movs	r2, #3
 800320c:	1ccb      	adds	r3, r1, #3
 800320e:	4393      	bics	r3, r2
 8003210:	3308      	adds	r3, #8
 8003212:	0006      	movs	r6, r0
 8003214:	001f      	movs	r7, r3
 8003216:	2b0c      	cmp	r3, #12
 8003218:	d232      	bcs.n	8003280 <_malloc_r+0x78>
 800321a:	270c      	movs	r7, #12
 800321c:	42b9      	cmp	r1, r7
 800321e:	d831      	bhi.n	8003284 <_malloc_r+0x7c>
 8003220:	0030      	movs	r0, r6
 8003222:	f000 f8a9 	bl	8003378 <__malloc_lock>
 8003226:	4d32      	ldr	r5, [pc, #200]	; (80032f0 <_malloc_r+0xe8>)
 8003228:	682b      	ldr	r3, [r5, #0]
 800322a:	001c      	movs	r4, r3
 800322c:	2c00      	cmp	r4, #0
 800322e:	d12e      	bne.n	800328e <_malloc_r+0x86>
 8003230:	0039      	movs	r1, r7
 8003232:	0030      	movs	r0, r6
 8003234:	f7ff ffc6 	bl	80031c4 <sbrk_aligned>
 8003238:	0004      	movs	r4, r0
 800323a:	1c43      	adds	r3, r0, #1
 800323c:	d11e      	bne.n	800327c <_malloc_r+0x74>
 800323e:	682c      	ldr	r4, [r5, #0]
 8003240:	0025      	movs	r5, r4
 8003242:	2d00      	cmp	r5, #0
 8003244:	d14a      	bne.n	80032dc <_malloc_r+0xd4>
 8003246:	6823      	ldr	r3, [r4, #0]
 8003248:	0029      	movs	r1, r5
 800324a:	18e3      	adds	r3, r4, r3
 800324c:	0030      	movs	r0, r6
 800324e:	9301      	str	r3, [sp, #4]
 8003250:	f000 f880 	bl	8003354 <_sbrk_r>
 8003254:	9b01      	ldr	r3, [sp, #4]
 8003256:	4283      	cmp	r3, r0
 8003258:	d143      	bne.n	80032e2 <_malloc_r+0xda>
 800325a:	6823      	ldr	r3, [r4, #0]
 800325c:	3703      	adds	r7, #3
 800325e:	1aff      	subs	r7, r7, r3
 8003260:	2303      	movs	r3, #3
 8003262:	439f      	bics	r7, r3
 8003264:	3708      	adds	r7, #8
 8003266:	2f0c      	cmp	r7, #12
 8003268:	d200      	bcs.n	800326c <_malloc_r+0x64>
 800326a:	270c      	movs	r7, #12
 800326c:	0039      	movs	r1, r7
 800326e:	0030      	movs	r0, r6
 8003270:	f7ff ffa8 	bl	80031c4 <sbrk_aligned>
 8003274:	1c43      	adds	r3, r0, #1
 8003276:	d034      	beq.n	80032e2 <_malloc_r+0xda>
 8003278:	6823      	ldr	r3, [r4, #0]
 800327a:	19df      	adds	r7, r3, r7
 800327c:	6027      	str	r7, [r4, #0]
 800327e:	e013      	b.n	80032a8 <_malloc_r+0xa0>
 8003280:	2b00      	cmp	r3, #0
 8003282:	dacb      	bge.n	800321c <_malloc_r+0x14>
 8003284:	230c      	movs	r3, #12
 8003286:	2500      	movs	r5, #0
 8003288:	6033      	str	r3, [r6, #0]
 800328a:	0028      	movs	r0, r5
 800328c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800328e:	6822      	ldr	r2, [r4, #0]
 8003290:	1bd1      	subs	r1, r2, r7
 8003292:	d420      	bmi.n	80032d6 <_malloc_r+0xce>
 8003294:	290b      	cmp	r1, #11
 8003296:	d917      	bls.n	80032c8 <_malloc_r+0xc0>
 8003298:	19e2      	adds	r2, r4, r7
 800329a:	6027      	str	r7, [r4, #0]
 800329c:	42a3      	cmp	r3, r4
 800329e:	d111      	bne.n	80032c4 <_malloc_r+0xbc>
 80032a0:	602a      	str	r2, [r5, #0]
 80032a2:	6863      	ldr	r3, [r4, #4]
 80032a4:	6011      	str	r1, [r2, #0]
 80032a6:	6053      	str	r3, [r2, #4]
 80032a8:	0030      	movs	r0, r6
 80032aa:	0025      	movs	r5, r4
 80032ac:	f000 f86c 	bl	8003388 <__malloc_unlock>
 80032b0:	2207      	movs	r2, #7
 80032b2:	350b      	adds	r5, #11
 80032b4:	1d23      	adds	r3, r4, #4
 80032b6:	4395      	bics	r5, r2
 80032b8:	1aea      	subs	r2, r5, r3
 80032ba:	429d      	cmp	r5, r3
 80032bc:	d0e5      	beq.n	800328a <_malloc_r+0x82>
 80032be:	1b5b      	subs	r3, r3, r5
 80032c0:	50a3      	str	r3, [r4, r2]
 80032c2:	e7e2      	b.n	800328a <_malloc_r+0x82>
 80032c4:	605a      	str	r2, [r3, #4]
 80032c6:	e7ec      	b.n	80032a2 <_malloc_r+0x9a>
 80032c8:	6862      	ldr	r2, [r4, #4]
 80032ca:	42a3      	cmp	r3, r4
 80032cc:	d101      	bne.n	80032d2 <_malloc_r+0xca>
 80032ce:	602a      	str	r2, [r5, #0]
 80032d0:	e7ea      	b.n	80032a8 <_malloc_r+0xa0>
 80032d2:	605a      	str	r2, [r3, #4]
 80032d4:	e7e8      	b.n	80032a8 <_malloc_r+0xa0>
 80032d6:	0023      	movs	r3, r4
 80032d8:	6864      	ldr	r4, [r4, #4]
 80032da:	e7a7      	b.n	800322c <_malloc_r+0x24>
 80032dc:	002c      	movs	r4, r5
 80032de:	686d      	ldr	r5, [r5, #4]
 80032e0:	e7af      	b.n	8003242 <_malloc_r+0x3a>
 80032e2:	230c      	movs	r3, #12
 80032e4:	0030      	movs	r0, r6
 80032e6:	6033      	str	r3, [r6, #0]
 80032e8:	f000 f84e 	bl	8003388 <__malloc_unlock>
 80032ec:	e7cd      	b.n	800328a <_malloc_r+0x82>
 80032ee:	46c0      	nop			; (mov r8, r8)
 80032f0:	200001a0 	.word	0x200001a0

080032f4 <_realloc_r>:
 80032f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80032f6:	0007      	movs	r7, r0
 80032f8:	000e      	movs	r6, r1
 80032fa:	0014      	movs	r4, r2
 80032fc:	2900      	cmp	r1, #0
 80032fe:	d105      	bne.n	800330c <_realloc_r+0x18>
 8003300:	0011      	movs	r1, r2
 8003302:	f7ff ff81 	bl	8003208 <_malloc_r>
 8003306:	0005      	movs	r5, r0
 8003308:	0028      	movs	r0, r5
 800330a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800330c:	2a00      	cmp	r2, #0
 800330e:	d103      	bne.n	8003318 <_realloc_r+0x24>
 8003310:	f7ff ff0e 	bl	8003130 <_free_r>
 8003314:	0025      	movs	r5, r4
 8003316:	e7f7      	b.n	8003308 <_realloc_r+0x14>
 8003318:	f000 f83e 	bl	8003398 <_malloc_usable_size_r>
 800331c:	9001      	str	r0, [sp, #4]
 800331e:	4284      	cmp	r4, r0
 8003320:	d803      	bhi.n	800332a <_realloc_r+0x36>
 8003322:	0035      	movs	r5, r6
 8003324:	0843      	lsrs	r3, r0, #1
 8003326:	42a3      	cmp	r3, r4
 8003328:	d3ee      	bcc.n	8003308 <_realloc_r+0x14>
 800332a:	0021      	movs	r1, r4
 800332c:	0038      	movs	r0, r7
 800332e:	f7ff ff6b 	bl	8003208 <_malloc_r>
 8003332:	1e05      	subs	r5, r0, #0
 8003334:	d0e8      	beq.n	8003308 <_realloc_r+0x14>
 8003336:	9b01      	ldr	r3, [sp, #4]
 8003338:	0022      	movs	r2, r4
 800333a:	429c      	cmp	r4, r3
 800333c:	d900      	bls.n	8003340 <_realloc_r+0x4c>
 800333e:	001a      	movs	r2, r3
 8003340:	0031      	movs	r1, r6
 8003342:	0028      	movs	r0, r5
 8003344:	f7ff fed7 	bl	80030f6 <memcpy>
 8003348:	0031      	movs	r1, r6
 800334a:	0038      	movs	r0, r7
 800334c:	f7ff fef0 	bl	8003130 <_free_r>
 8003350:	e7da      	b.n	8003308 <_realloc_r+0x14>
	...

08003354 <_sbrk_r>:
 8003354:	2300      	movs	r3, #0
 8003356:	b570      	push	{r4, r5, r6, lr}
 8003358:	4d06      	ldr	r5, [pc, #24]	; (8003374 <_sbrk_r+0x20>)
 800335a:	0004      	movs	r4, r0
 800335c:	0008      	movs	r0, r1
 800335e:	602b      	str	r3, [r5, #0]
 8003360:	f7fd fab8 	bl	80008d4 <_sbrk>
 8003364:	1c43      	adds	r3, r0, #1
 8003366:	d103      	bne.n	8003370 <_sbrk_r+0x1c>
 8003368:	682b      	ldr	r3, [r5, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d000      	beq.n	8003370 <_sbrk_r+0x1c>
 800336e:	6023      	str	r3, [r4, #0]
 8003370:	bd70      	pop	{r4, r5, r6, pc}
 8003372:	46c0      	nop			; (mov r8, r8)
 8003374:	200001a8 	.word	0x200001a8

08003378 <__malloc_lock>:
 8003378:	b510      	push	{r4, lr}
 800337a:	4802      	ldr	r0, [pc, #8]	; (8003384 <__malloc_lock+0xc>)
 800337c:	f000 f814 	bl	80033a8 <__retarget_lock_acquire_recursive>
 8003380:	bd10      	pop	{r4, pc}
 8003382:	46c0      	nop			; (mov r8, r8)
 8003384:	200001ac 	.word	0x200001ac

08003388 <__malloc_unlock>:
 8003388:	b510      	push	{r4, lr}
 800338a:	4802      	ldr	r0, [pc, #8]	; (8003394 <__malloc_unlock+0xc>)
 800338c:	f000 f80d 	bl	80033aa <__retarget_lock_release_recursive>
 8003390:	bd10      	pop	{r4, pc}
 8003392:	46c0      	nop			; (mov r8, r8)
 8003394:	200001ac 	.word	0x200001ac

08003398 <_malloc_usable_size_r>:
 8003398:	1f0b      	subs	r3, r1, #4
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	1f18      	subs	r0, r3, #4
 800339e:	2b00      	cmp	r3, #0
 80033a0:	da01      	bge.n	80033a6 <_malloc_usable_size_r+0xe>
 80033a2:	580b      	ldr	r3, [r1, r0]
 80033a4:	18c0      	adds	r0, r0, r3
 80033a6:	4770      	bx	lr

080033a8 <__retarget_lock_acquire_recursive>:
 80033a8:	4770      	bx	lr

080033aa <__retarget_lock_release_recursive>:
 80033aa:	4770      	bx	lr

080033ac <_init>:
 80033ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ae:	46c0      	nop			; (mov r8, r8)
 80033b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033b2:	bc08      	pop	{r3}
 80033b4:	469e      	mov	lr, r3
 80033b6:	4770      	bx	lr

080033b8 <_fini>:
 80033b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ba:	46c0      	nop			; (mov r8, r8)
 80033bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033be:	bc08      	pop	{r3}
 80033c0:	469e      	mov	lr, r3
 80033c2:	4770      	bx	lr
