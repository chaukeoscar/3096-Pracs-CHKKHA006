
EEE3096S_2022_Prac_4_PWM_DAC_Student_Version.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b64  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002c24  08002c24  00012c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c54  08002c54  00020614  2**0
                  CONTENTS
  4 .ARM          00000000  08002c54  08002c54  00020614  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c54  08002c54  00020614  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c54  08002c54  00012c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c58  08002c58  00012c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000614  20000000  08002c5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  20000614  08003270  00020614  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000714  08003270  00020714  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020614  2**0
                  CONTENTS, READONLY
 12 .debug_info   000086f8  00000000  00000000  0002063c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001687  00000000  00000000  00028d34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000950  00000000  00000000  0002a3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000898  00000000  00000000  0002ad10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010f0b  00000000  00000000  0002b5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a503  00000000  00000000  0003c4b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00068b6d  00000000  00000000  000469b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000af523  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002120  00000000  00000000  000af578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000614 	.word	0x20000614
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002c0c 	.word	0x08002c0c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000618 	.word	0x20000618
 8000104:	08002c0c 	.word	0x08002c0c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fbac 	bl	8000980 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f82e 	bl	8000288 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f992 	bl	8000554 <MX_GPIO_Init>
  MX_DMA_Init();
 8000230:	f000 f972 	bl	8000518 <MX_DMA_Init>
  MX_TIM2_Init();
 8000234:	f000 f872 	bl	800031c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000238:	f000 f8ee 	bl	8000418 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  //TO DO:
  //TASK 4
  //Start TIM3 in PWM mode on channel 1
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //Starting TIM3 in PWM mode
 800023c:	4b0d      	ldr	r3, [pc, #52]	; (8000274 <main+0x54>)
 800023e:	2100      	movs	r1, #0
 8000240:	0018      	movs	r0, r3
 8000242:	f001 fe75 	bl	8001f30 <HAL_TIM_PWM_Start>

  //Start TIM2 in Output Compare (OC) mode on channel 1.
  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1); //Starting TIM2 in Output Compare mode
 8000246:	4b0c      	ldr	r3, [pc, #48]	; (8000278 <main+0x58>)
 8000248:	2100      	movs	r1, #0
 800024a:	0018      	movs	r0, r3
 800024c:	f001 fd60 	bl	8001d10 <HAL_TIM_OC_Start>
  //Start the DMA in interrupt (IT) mode.

  HAL_DMA_Start_IT(&hdma_tim2_ch1, (uint32_t) &(triangle_LUT), DestAddress, NS);
 8000250:	490a      	ldr	r1, [pc, #40]	; (800027c <main+0x5c>)
 8000252:	4b0b      	ldr	r3, [pc, #44]	; (8000280 <main+0x60>)
 8000254:	681a      	ldr	r2, [r3, #0]
 8000256:	480b      	ldr	r0, [pc, #44]	; (8000284 <main+0x64>)
 8000258:	2380      	movs	r3, #128	; 0x80
 800025a:	f000 fd1b 	bl	8000c94 <HAL_DMA_Start_IT>

  //Start the DMA transfer
  __HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);//starting the DMA transfer
 800025e:	4b06      	ldr	r3, [pc, #24]	; (8000278 <main+0x58>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	68da      	ldr	r2, [r3, #12]
 8000264:	4b04      	ldr	r3, [pc, #16]	; (8000278 <main+0x58>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	2180      	movs	r1, #128	; 0x80
 800026a:	0089      	lsls	r1, r1, #2
 800026c:	430a      	orrs	r2, r1
 800026e:	60da      	str	r2, [r3, #12]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000270:	e7fe      	b.n	8000270 <main+0x50>
 8000272:	46c0      	nop			; (mov r8, r8)
 8000274:	20000680 	.word	0x20000680
 8000278:	200006c8 	.word	0x200006c8
 800027c:	20000400 	.word	0x20000400
 8000280:	20000600 	.word	0x20000600
 8000284:	2000063c 	.word	0x2000063c

08000288 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000288:	b590      	push	{r4, r7, lr}
 800028a:	b091      	sub	sp, #68	; 0x44
 800028c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028e:	2410      	movs	r4, #16
 8000290:	193b      	adds	r3, r7, r4
 8000292:	0018      	movs	r0, r3
 8000294:	2330      	movs	r3, #48	; 0x30
 8000296:	001a      	movs	r2, r3
 8000298:	2100      	movs	r1, #0
 800029a:	f002 fcaf 	bl	8002bfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800029e:	003b      	movs	r3, r7
 80002a0:	0018      	movs	r0, r3
 80002a2:	2310      	movs	r3, #16
 80002a4:	001a      	movs	r2, r3
 80002a6:	2100      	movs	r1, #0
 80002a8:	f002 fca8 	bl	8002bfc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ac:	0021      	movs	r1, r4
 80002ae:	187b      	adds	r3, r7, r1
 80002b0:	2202      	movs	r2, #2
 80002b2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b4:	187b      	adds	r3, r7, r1
 80002b6:	2201      	movs	r2, #1
 80002b8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ba:	187b      	adds	r3, r7, r1
 80002bc:	2210      	movs	r2, #16
 80002be:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c0:	187b      	adds	r3, r7, r1
 80002c2:	2202      	movs	r2, #2
 80002c4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002c6:	187b      	adds	r3, r7, r1
 80002c8:	2200      	movs	r2, #0
 80002ca:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80002cc:	187b      	adds	r3, r7, r1
 80002ce:	22a0      	movs	r2, #160	; 0xa0
 80002d0:	0392      	lsls	r2, r2, #14
 80002d2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002d4:	187b      	adds	r3, r7, r1
 80002d6:	2200      	movs	r2, #0
 80002d8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002da:	187b      	adds	r3, r7, r1
 80002dc:	0018      	movs	r0, r3
 80002de:	f001 f823 	bl	8001328 <HAL_RCC_OscConfig>
 80002e2:	1e03      	subs	r3, r0, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x62>
  {
    Error_Handler();
 80002e6:	f000 fa33 	bl	8000750 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ea:	003b      	movs	r3, r7
 80002ec:	2207      	movs	r2, #7
 80002ee:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f0:	003b      	movs	r3, r7
 80002f2:	2202      	movs	r2, #2
 80002f4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f6:	003b      	movs	r3, r7
 80002f8:	2200      	movs	r2, #0
 80002fa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002fc:	003b      	movs	r3, r7
 80002fe:	2200      	movs	r2, #0
 8000300:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000302:	003b      	movs	r3, r7
 8000304:	2101      	movs	r1, #1
 8000306:	0018      	movs	r0, r3
 8000308:	f001 fb28 	bl	800195c <HAL_RCC_ClockConfig>
 800030c:	1e03      	subs	r3, r0, #0
 800030e:	d001      	beq.n	8000314 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000310:	f000 fa1e 	bl	8000750 <Error_Handler>
  }
}
 8000314:	46c0      	nop			; (mov r8, r8)
 8000316:	46bd      	mov	sp, r7
 8000318:	b011      	add	sp, #68	; 0x44
 800031a:	bd90      	pop	{r4, r7, pc}

0800031c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b08e      	sub	sp, #56	; 0x38
 8000320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000322:	2328      	movs	r3, #40	; 0x28
 8000324:	18fb      	adds	r3, r7, r3
 8000326:	0018      	movs	r0, r3
 8000328:	2310      	movs	r3, #16
 800032a:	001a      	movs	r2, r3
 800032c:	2100      	movs	r1, #0
 800032e:	f002 fc65 	bl	8002bfc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000332:	2320      	movs	r3, #32
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	0018      	movs	r0, r3
 8000338:	2308      	movs	r3, #8
 800033a:	001a      	movs	r2, r3
 800033c:	2100      	movs	r1, #0
 800033e:	f002 fc5d 	bl	8002bfc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	0018      	movs	r0, r3
 8000346:	231c      	movs	r3, #28
 8000348:	001a      	movs	r2, r3
 800034a:	2100      	movs	r1, #0
 800034c:	f002 fc56 	bl	8002bfc <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000350:	4b2f      	ldr	r3, [pc, #188]	; (8000410 <MX_TIM2_Init+0xf4>)
 8000352:	2280      	movs	r2, #128	; 0x80
 8000354:	05d2      	lsls	r2, r2, #23
 8000356:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000358:	4b2d      	ldr	r3, [pc, #180]	; (8000410 <MX_TIM2_Init+0xf4>)
 800035a:	2200      	movs	r2, #0
 800035c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800035e:	4b2c      	ldr	r3, [pc, #176]	; (8000410 <MX_TIM2_Init+0xf4>)
 8000360:	2200      	movs	r2, #0
 8000362:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = TIM2_Ticks - 1; //To make the frequency what we want it to be
 8000364:	4b2b      	ldr	r3, [pc, #172]	; (8000414 <MX_TIM2_Init+0xf8>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	1e5a      	subs	r2, r3, #1
 800036a:	4b29      	ldr	r3, [pc, #164]	; (8000410 <MX_TIM2_Init+0xf4>)
 800036c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800036e:	4b28      	ldr	r3, [pc, #160]	; (8000410 <MX_TIM2_Init+0xf4>)
 8000370:	2200      	movs	r2, #0
 8000372:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000374:	4b26      	ldr	r3, [pc, #152]	; (8000410 <MX_TIM2_Init+0xf4>)
 8000376:	2280      	movs	r2, #128	; 0x80
 8000378:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800037a:	4b25      	ldr	r3, [pc, #148]	; (8000410 <MX_TIM2_Init+0xf4>)
 800037c:	0018      	movs	r0, r3
 800037e:	f001 fc1f 	bl	8001bc0 <HAL_TIM_Base_Init>
 8000382:	1e03      	subs	r3, r0, #0
 8000384:	d001      	beq.n	800038a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000386:	f000 f9e3 	bl	8000750 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800038a:	2128      	movs	r1, #40	; 0x28
 800038c:	187b      	adds	r3, r7, r1
 800038e:	2280      	movs	r2, #128	; 0x80
 8000390:	0152      	lsls	r2, r2, #5
 8000392:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000394:	187a      	adds	r2, r7, r1
 8000396:	4b1e      	ldr	r3, [pc, #120]	; (8000410 <MX_TIM2_Init+0xf4>)
 8000398:	0011      	movs	r1, r2
 800039a:	0018      	movs	r0, r3
 800039c:	f001 ff9e 	bl	80022dc <HAL_TIM_ConfigClockSource>
 80003a0:	1e03      	subs	r3, r0, #0
 80003a2:	d001      	beq.n	80003a8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80003a4:	f000 f9d4 	bl	8000750 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80003a8:	4b19      	ldr	r3, [pc, #100]	; (8000410 <MX_TIM2_Init+0xf4>)
 80003aa:	0018      	movs	r0, r3
 80003ac:	f001 fc58 	bl	8001c60 <HAL_TIM_OC_Init>
 80003b0:	1e03      	subs	r3, r0, #0
 80003b2:	d001      	beq.n	80003b8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80003b4:	f000 f9cc 	bl	8000750 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003b8:	2120      	movs	r1, #32
 80003ba:	187b      	adds	r3, r7, r1
 80003bc:	2200      	movs	r2, #0
 80003be:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003c0:	187b      	adds	r3, r7, r1
 80003c2:	2200      	movs	r2, #0
 80003c4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003c6:	187a      	adds	r2, r7, r1
 80003c8:	4b11      	ldr	r3, [pc, #68]	; (8000410 <MX_TIM2_Init+0xf4>)
 80003ca:	0011      	movs	r1, r2
 80003cc:	0018      	movs	r0, r3
 80003ce:	f002 fb93 	bl	8002af8 <HAL_TIMEx_MasterConfigSynchronization>
 80003d2:	1e03      	subs	r3, r0, #0
 80003d4:	d001      	beq.n	80003da <MX_TIM2_Init+0xbe>
  {
    Error_Handler();
 80003d6:	f000 f9bb 	bl	8000750 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80003da:	1d3b      	adds	r3, r7, #4
 80003dc:	2200      	movs	r2, #0
 80003de:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80003e0:	1d3b      	adds	r3, r7, #4
 80003e2:	2200      	movs	r2, #0
 80003e4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003e6:	1d3b      	adds	r3, r7, #4
 80003e8:	2200      	movs	r2, #0
 80003ea:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003ec:	1d3b      	adds	r3, r7, #4
 80003ee:	2200      	movs	r2, #0
 80003f0:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003f2:	1d39      	adds	r1, r7, #4
 80003f4:	4b06      	ldr	r3, [pc, #24]	; (8000410 <MX_TIM2_Init+0xf4>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	0018      	movs	r0, r3
 80003fa:	f001 fe51 	bl	80020a0 <HAL_TIM_OC_ConfigChannel>
 80003fe:	1e03      	subs	r3, r0, #0
 8000400:	d001      	beq.n	8000406 <MX_TIM2_Init+0xea>
  {
    Error_Handler();
 8000402:	f000 f9a5 	bl	8000750 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000406:	46c0      	nop			; (mov r8, r8)
 8000408:	46bd      	mov	sp, r7
 800040a:	b00e      	add	sp, #56	; 0x38
 800040c:	bd80      	pop	{r7, pc}
 800040e:	46c0      	nop			; (mov r8, r8)
 8000410:	200006c8 	.word	0x200006c8
 8000414:	20000604 	.word	0x20000604

08000418 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b08e      	sub	sp, #56	; 0x38
 800041c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800041e:	2328      	movs	r3, #40	; 0x28
 8000420:	18fb      	adds	r3, r7, r3
 8000422:	0018      	movs	r0, r3
 8000424:	2310      	movs	r3, #16
 8000426:	001a      	movs	r2, r3
 8000428:	2100      	movs	r1, #0
 800042a:	f002 fbe7 	bl	8002bfc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800042e:	2320      	movs	r3, #32
 8000430:	18fb      	adds	r3, r7, r3
 8000432:	0018      	movs	r0, r3
 8000434:	2308      	movs	r3, #8
 8000436:	001a      	movs	r2, r3
 8000438:	2100      	movs	r1, #0
 800043a:	f002 fbdf 	bl	8002bfc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800043e:	1d3b      	adds	r3, r7, #4
 8000440:	0018      	movs	r0, r3
 8000442:	231c      	movs	r3, #28
 8000444:	001a      	movs	r2, r3
 8000446:	2100      	movs	r1, #0
 8000448:	f002 fbd8 	bl	8002bfc <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800044c:	4b2f      	ldr	r3, [pc, #188]	; (800050c <MX_TIM3_Init+0xf4>)
 800044e:	4a30      	ldr	r2, [pc, #192]	; (8000510 <MX_TIM3_Init+0xf8>)
 8000450:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000452:	4b2e      	ldr	r3, [pc, #184]	; (800050c <MX_TIM3_Init+0xf4>)
 8000454:	2200      	movs	r2, #0
 8000456:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000458:	4b2c      	ldr	r3, [pc, #176]	; (800050c <MX_TIM3_Init+0xf4>)
 800045a:	2200      	movs	r2, #0
 800045c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1023;
 800045e:	4b2b      	ldr	r3, [pc, #172]	; (800050c <MX_TIM3_Init+0xf4>)
 8000460:	4a2c      	ldr	r2, [pc, #176]	; (8000514 <MX_TIM3_Init+0xfc>)
 8000462:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000464:	4b29      	ldr	r3, [pc, #164]	; (800050c <MX_TIM3_Init+0xf4>)
 8000466:	2200      	movs	r2, #0
 8000468:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800046a:	4b28      	ldr	r3, [pc, #160]	; (800050c <MX_TIM3_Init+0xf4>)
 800046c:	2280      	movs	r2, #128	; 0x80
 800046e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000470:	4b26      	ldr	r3, [pc, #152]	; (800050c <MX_TIM3_Init+0xf4>)
 8000472:	0018      	movs	r0, r3
 8000474:	f001 fba4 	bl	8001bc0 <HAL_TIM_Base_Init>
 8000478:	1e03      	subs	r3, r0, #0
 800047a:	d001      	beq.n	8000480 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800047c:	f000 f968 	bl	8000750 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000480:	2128      	movs	r1, #40	; 0x28
 8000482:	187b      	adds	r3, r7, r1
 8000484:	2280      	movs	r2, #128	; 0x80
 8000486:	0152      	lsls	r2, r2, #5
 8000488:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800048a:	187a      	adds	r2, r7, r1
 800048c:	4b1f      	ldr	r3, [pc, #124]	; (800050c <MX_TIM3_Init+0xf4>)
 800048e:	0011      	movs	r1, r2
 8000490:	0018      	movs	r0, r3
 8000492:	f001 ff23 	bl	80022dc <HAL_TIM_ConfigClockSource>
 8000496:	1e03      	subs	r3, r0, #0
 8000498:	d001      	beq.n	800049e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800049a:	f000 f959 	bl	8000750 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800049e:	4b1b      	ldr	r3, [pc, #108]	; (800050c <MX_TIM3_Init+0xf4>)
 80004a0:	0018      	movs	r0, r3
 80004a2:	f001 fced 	bl	8001e80 <HAL_TIM_PWM_Init>
 80004a6:	1e03      	subs	r3, r0, #0
 80004a8:	d001      	beq.n	80004ae <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80004aa:	f000 f951 	bl	8000750 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004ae:	2120      	movs	r1, #32
 80004b0:	187b      	adds	r3, r7, r1
 80004b2:	2200      	movs	r2, #0
 80004b4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004b6:	187b      	adds	r3, r7, r1
 80004b8:	2200      	movs	r2, #0
 80004ba:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80004bc:	187a      	adds	r2, r7, r1
 80004be:	4b13      	ldr	r3, [pc, #76]	; (800050c <MX_TIM3_Init+0xf4>)
 80004c0:	0011      	movs	r1, r2
 80004c2:	0018      	movs	r0, r3
 80004c4:	f002 fb18 	bl	8002af8 <HAL_TIMEx_MasterConfigSynchronization>
 80004c8:	1e03      	subs	r3, r0, #0
 80004ca:	d001      	beq.n	80004d0 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80004cc:	f000 f940 	bl	8000750 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004d0:	1d3b      	adds	r3, r7, #4
 80004d2:	2260      	movs	r2, #96	; 0x60
 80004d4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80004d6:	1d3b      	adds	r3, r7, #4
 80004d8:	2200      	movs	r2, #0
 80004da:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004dc:	1d3b      	adds	r3, r7, #4
 80004de:	2200      	movs	r2, #0
 80004e0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004e2:	1d3b      	adds	r3, r7, #4
 80004e4:	2200      	movs	r2, #0
 80004e6:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004e8:	1d39      	adds	r1, r7, #4
 80004ea:	4b08      	ldr	r3, [pc, #32]	; (800050c <MX_TIM3_Init+0xf4>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	0018      	movs	r0, r3
 80004f0:	f001 fe2e 	bl	8002150 <HAL_TIM_PWM_ConfigChannel>
 80004f4:	1e03      	subs	r3, r0, #0
 80004f6:	d001      	beq.n	80004fc <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80004f8:	f000 f92a 	bl	8000750 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80004fc:	4b03      	ldr	r3, [pc, #12]	; (800050c <MX_TIM3_Init+0xf4>)
 80004fe:	0018      	movs	r0, r3
 8000500:	f000 f9ac 	bl	800085c <HAL_TIM_MspPostInit>

}
 8000504:	46c0      	nop			; (mov r8, r8)
 8000506:	46bd      	mov	sp, r7
 8000508:	b00e      	add	sp, #56	; 0x38
 800050a:	bd80      	pop	{r7, pc}
 800050c:	20000680 	.word	0x20000680
 8000510:	40000400 	.word	0x40000400
 8000514:	000003ff 	.word	0x000003ff

08000518 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800051e:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <MX_DMA_Init+0x38>)
 8000520:	695a      	ldr	r2, [r3, #20]
 8000522:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <MX_DMA_Init+0x38>)
 8000524:	2101      	movs	r1, #1
 8000526:	430a      	orrs	r2, r1
 8000528:	615a      	str	r2, [r3, #20]
 800052a:	4b09      	ldr	r3, [pc, #36]	; (8000550 <MX_DMA_Init+0x38>)
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	2201      	movs	r2, #1
 8000530:	4013      	ands	r3, r2
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8000536:	2200      	movs	r2, #0
 8000538:	2100      	movs	r1, #0
 800053a:	200b      	movs	r0, #11
 800053c:	f000 fb30 	bl	8000ba0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8000540:	200b      	movs	r0, #11
 8000542:	f000 fb42 	bl	8000bca <HAL_NVIC_EnableIRQ>

}
 8000546:	46c0      	nop			; (mov r8, r8)
 8000548:	46bd      	mov	sp, r7
 800054a:	b002      	add	sp, #8
 800054c:	bd80      	pop	{r7, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	40021000 	.word	0x40021000

08000554 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000554:	b590      	push	{r4, r7, lr}
 8000556:	b089      	sub	sp, #36	; 0x24
 8000558:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055a:	240c      	movs	r4, #12
 800055c:	193b      	adds	r3, r7, r4
 800055e:	0018      	movs	r0, r3
 8000560:	2314      	movs	r3, #20
 8000562:	001a      	movs	r2, r3
 8000564:	2100      	movs	r1, #0
 8000566:	f002 fb49 	bl	8002bfc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800056a:	4b31      	ldr	r3, [pc, #196]	; (8000630 <MX_GPIO_Init+0xdc>)
 800056c:	695a      	ldr	r2, [r3, #20]
 800056e:	4b30      	ldr	r3, [pc, #192]	; (8000630 <MX_GPIO_Init+0xdc>)
 8000570:	2180      	movs	r1, #128	; 0x80
 8000572:	03c9      	lsls	r1, r1, #15
 8000574:	430a      	orrs	r2, r1
 8000576:	615a      	str	r2, [r3, #20]
 8000578:	4b2d      	ldr	r3, [pc, #180]	; (8000630 <MX_GPIO_Init+0xdc>)
 800057a:	695a      	ldr	r2, [r3, #20]
 800057c:	2380      	movs	r3, #128	; 0x80
 800057e:	03db      	lsls	r3, r3, #15
 8000580:	4013      	ands	r3, r2
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000586:	4b2a      	ldr	r3, [pc, #168]	; (8000630 <MX_GPIO_Init+0xdc>)
 8000588:	695a      	ldr	r2, [r3, #20]
 800058a:	4b29      	ldr	r3, [pc, #164]	; (8000630 <MX_GPIO_Init+0xdc>)
 800058c:	2180      	movs	r1, #128	; 0x80
 800058e:	0289      	lsls	r1, r1, #10
 8000590:	430a      	orrs	r2, r1
 8000592:	615a      	str	r2, [r3, #20]
 8000594:	4b26      	ldr	r3, [pc, #152]	; (8000630 <MX_GPIO_Init+0xdc>)
 8000596:	695a      	ldr	r2, [r3, #20]
 8000598:	2380      	movs	r3, #128	; 0x80
 800059a:	029b      	lsls	r3, r3, #10
 800059c:	4013      	ands	r3, r2
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a2:	4b23      	ldr	r3, [pc, #140]	; (8000630 <MX_GPIO_Init+0xdc>)
 80005a4:	695a      	ldr	r2, [r3, #20]
 80005a6:	4b22      	ldr	r3, [pc, #136]	; (8000630 <MX_GPIO_Init+0xdc>)
 80005a8:	2180      	movs	r1, #128	; 0x80
 80005aa:	0309      	lsls	r1, r1, #12
 80005ac:	430a      	orrs	r2, r1
 80005ae:	615a      	str	r2, [r3, #20]
 80005b0:	4b1f      	ldr	r3, [pc, #124]	; (8000630 <MX_GPIO_Init+0xdc>)
 80005b2:	695a      	ldr	r2, [r3, #20]
 80005b4:	2380      	movs	r3, #128	; 0x80
 80005b6:	031b      	lsls	r3, r3, #12
 80005b8:	4013      	ands	r3, r2
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80005be:	23c0      	movs	r3, #192	; 0xc0
 80005c0:	009b      	lsls	r3, r3, #2
 80005c2:	481c      	ldr	r0, [pc, #112]	; (8000634 <MX_GPIO_Init+0xe0>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	0019      	movs	r1, r3
 80005c8:	f000 fe6a 	bl	80012a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005cc:	193b      	adds	r3, r7, r4
 80005ce:	2201      	movs	r2, #1
 80005d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005d2:	193b      	adds	r3, r7, r4
 80005d4:	2288      	movs	r2, #136	; 0x88
 80005d6:	0352      	lsls	r2, r2, #13
 80005d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005da:	193b      	adds	r3, r7, r4
 80005dc:	2200      	movs	r2, #0
 80005de:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e0:	193a      	adds	r2, r7, r4
 80005e2:	2390      	movs	r3, #144	; 0x90
 80005e4:	05db      	lsls	r3, r3, #23
 80005e6:	0011      	movs	r1, r2
 80005e8:	0018      	movs	r0, r3
 80005ea:	f000 fce9 	bl	8000fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 80005ee:	0021      	movs	r1, r4
 80005f0:	187b      	adds	r3, r7, r1
 80005f2:	22c0      	movs	r2, #192	; 0xc0
 80005f4:	0092      	lsls	r2, r2, #2
 80005f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	2201      	movs	r2, #1
 80005fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fe:	187b      	adds	r3, r7, r1
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000604:	187b      	adds	r3, r7, r1
 8000606:	2200      	movs	r2, #0
 8000608:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800060a:	187b      	adds	r3, r7, r1
 800060c:	4a09      	ldr	r2, [pc, #36]	; (8000634 <MX_GPIO_Init+0xe0>)
 800060e:	0019      	movs	r1, r3
 8000610:	0010      	movs	r0, r2
 8000612:	f000 fcd5 	bl	8000fc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000616:	2200      	movs	r2, #0
 8000618:	2100      	movs	r1, #0
 800061a:	2005      	movs	r0, #5
 800061c:	f000 fac0 	bl	8000ba0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000620:	2005      	movs	r0, #5
 8000622:	f000 fad2 	bl	8000bca <HAL_NVIC_EnableIRQ>

}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	46bd      	mov	sp, r7
 800062a:	b009      	add	sp, #36	; 0x24
 800062c:	bd90      	pop	{r4, r7, pc}
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	40021000 	.word	0x40021000
 8000634:	48000800 	.word	0x48000800

08000638 <EXTI0_1_IRQHandler>:

/* USER CODE BEGIN 4 */
void EXTI0_1_IRQHandler(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	//TO DO:
	//TASK 5

	//Disable DMA transfer, start DMA in IT mode with new source and re enable transfer
	//Remember to debounce using HAL_GetTick()
	ticks = HAL_GetTick(); //sets ticks to current ticks using HAL_GetTick()
 800063c:	f000 f9fa 	bl	8000a34 <HAL_GetTick>
 8000640:	0002      	movs	r2, r0
 8000642:	4b39      	ldr	r3, [pc, #228]	; (8000728 <EXTI0_1_IRQHandler+0xf0>)
 8000644:	601a      	str	r2, [r3, #0]
	if(ticks - prevTicks >200){
 8000646:	4b38      	ldr	r3, [pc, #224]	; (8000728 <EXTI0_1_IRQHandler+0xf0>)
 8000648:	681a      	ldr	r2, [r3, #0]
 800064a:	4b38      	ldr	r3, [pc, #224]	; (800072c <EXTI0_1_IRQHandler+0xf4>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	1ad3      	subs	r3, r2, r3
 8000650:	2bc8      	cmp	r3, #200	; 0xc8
 8000652:	d962      	bls.n	800071a <EXTI0_1_IRQHandler+0xe2>
		prevTicks = ticks; //sets previous ticks to be equal to current ticks
 8000654:	4b34      	ldr	r3, [pc, #208]	; (8000728 <EXTI0_1_IRQHandler+0xf0>)
 8000656:	681a      	ldr	r2, [r3, #0]
 8000658:	4b34      	ldr	r3, [pc, #208]	; (800072c <EXTI0_1_IRQHandler+0xf4>)
 800065a:	601a      	str	r2, [r3, #0]
		__HAL_TIM_DISABLE_DMA(&htim2,TIM_DMA_CC1);
 800065c:	4b34      	ldr	r3, [pc, #208]	; (8000730 <EXTI0_1_IRQHandler+0xf8>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	68da      	ldr	r2, [r3, #12]
 8000662:	4b33      	ldr	r3, [pc, #204]	; (8000730 <EXTI0_1_IRQHandler+0xf8>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4933      	ldr	r1, [pc, #204]	; (8000734 <EXTI0_1_IRQHandler+0xfc>)
 8000668:	400a      	ands	r2, r1
 800066a:	60da      	str	r2, [r3, #12]
		HAL_DMA_Abort_IT(&hdma_tim2_ch1);
 800066c:	4b32      	ldr	r3, [pc, #200]	; (8000738 <EXTI0_1_IRQHandler+0x100>)
 800066e:	0018      	movs	r0, r3
 8000670:	f000 fb76 	bl	8000d60 <HAL_DMA_Abort_IT>

		if(LUTcounter == 0){
 8000674:	4b31      	ldr	r3, [pc, #196]	; (800073c <EXTI0_1_IRQHandler+0x104>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d110      	bne.n	800069e <EXTI0_1_IRQHandler+0x66>
			HAL_DMA_Start_IT(&hdma_tim2_ch1,(uint32_t) &(sin_LUT), DestAddress, NS);
 800067c:	4930      	ldr	r1, [pc, #192]	; (8000740 <EXTI0_1_IRQHandler+0x108>)
 800067e:	4b31      	ldr	r3, [pc, #196]	; (8000744 <EXTI0_1_IRQHandler+0x10c>)
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	482d      	ldr	r0, [pc, #180]	; (8000738 <EXTI0_1_IRQHandler+0x100>)
 8000684:	2380      	movs	r3, #128	; 0x80
 8000686:	f000 fb05 	bl	8000c94 <HAL_DMA_Start_IT>
			__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 800068a:	4b29      	ldr	r3, [pc, #164]	; (8000730 <EXTI0_1_IRQHandler+0xf8>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	68da      	ldr	r2, [r3, #12]
 8000690:	4b27      	ldr	r3, [pc, #156]	; (8000730 <EXTI0_1_IRQHandler+0xf8>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2180      	movs	r1, #128	; 0x80
 8000696:	0089      	lsls	r1, r1, #2
 8000698:	430a      	orrs	r2, r1
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	e028      	b.n	80006f0 <EXTI0_1_IRQHandler+0xb8>
		}
		else if(LUTcounter == 1){
 800069e:	4b27      	ldr	r3, [pc, #156]	; (800073c <EXTI0_1_IRQHandler+0x104>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d110      	bne.n	80006c8 <EXTI0_1_IRQHandler+0x90>
			HAL_DMA_Start_IT(&hdma_tim2_ch1,(uint32_t) &(saw_LUT), DestAddress, NS);
 80006a6:	4928      	ldr	r1, [pc, #160]	; (8000748 <EXTI0_1_IRQHandler+0x110>)
 80006a8:	4b26      	ldr	r3, [pc, #152]	; (8000744 <EXTI0_1_IRQHandler+0x10c>)
 80006aa:	681a      	ldr	r2, [r3, #0]
 80006ac:	4822      	ldr	r0, [pc, #136]	; (8000738 <EXTI0_1_IRQHandler+0x100>)
 80006ae:	2380      	movs	r3, #128	; 0x80
 80006b0:	f000 faf0 	bl	8000c94 <HAL_DMA_Start_IT>
			__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 80006b4:	4b1e      	ldr	r3, [pc, #120]	; (8000730 <EXTI0_1_IRQHandler+0xf8>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	68da      	ldr	r2, [r3, #12]
 80006ba:	4b1d      	ldr	r3, [pc, #116]	; (8000730 <EXTI0_1_IRQHandler+0xf8>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	2180      	movs	r1, #128	; 0x80
 80006c0:	0089      	lsls	r1, r1, #2
 80006c2:	430a      	orrs	r2, r1
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	e013      	b.n	80006f0 <EXTI0_1_IRQHandler+0xb8>
		}
		else if(LUTcounter == 2){
 80006c8:	4b1c      	ldr	r3, [pc, #112]	; (800073c <EXTI0_1_IRQHandler+0x104>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2b02      	cmp	r3, #2
 80006ce:	d10f      	bne.n	80006f0 <EXTI0_1_IRQHandler+0xb8>
			HAL_DMA_Start_IT(&hdma_tim2_ch1,(uint32_t) &(triangle_LUT), DestAddress, NS);
 80006d0:	491e      	ldr	r1, [pc, #120]	; (800074c <EXTI0_1_IRQHandler+0x114>)
 80006d2:	4b1c      	ldr	r3, [pc, #112]	; (8000744 <EXTI0_1_IRQHandler+0x10c>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	4818      	ldr	r0, [pc, #96]	; (8000738 <EXTI0_1_IRQHandler+0x100>)
 80006d8:	2380      	movs	r3, #128	; 0x80
 80006da:	f000 fadb 	bl	8000c94 <HAL_DMA_Start_IT>
			__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 80006de:	4b14      	ldr	r3, [pc, #80]	; (8000730 <EXTI0_1_IRQHandler+0xf8>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	68da      	ldr	r2, [r3, #12]
 80006e4:	4b12      	ldr	r3, [pc, #72]	; (8000730 <EXTI0_1_IRQHandler+0xf8>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2180      	movs	r1, #128	; 0x80
 80006ea:	0089      	lsls	r1, r1, #2
 80006ec:	430a      	orrs	r2, r1
 80006ee:	60da      	str	r2, [r3, #12]
		}
		LUTcounter++;
 80006f0:	4b12      	ldr	r3, [pc, #72]	; (800073c <EXTI0_1_IRQHandler+0x104>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	1c5a      	adds	r2, r3, #1
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <EXTI0_1_IRQHandler+0x104>)
 80006f8:	601a      	str	r2, [r3, #0]
		if(LUTcounter >2){
 80006fa:	4b10      	ldr	r3, [pc, #64]	; (800073c <EXTI0_1_IRQHandler+0x104>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	2b02      	cmp	r3, #2
 8000700:	d902      	bls.n	8000708 <EXTI0_1_IRQHandler+0xd0>
			LUTcounter = 0;
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <EXTI0_1_IRQHandler+0x104>)
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
		}
		__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 8000708:	4b09      	ldr	r3, [pc, #36]	; (8000730 <EXTI0_1_IRQHandler+0xf8>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	68da      	ldr	r2, [r3, #12]
 800070e:	4b08      	ldr	r3, [pc, #32]	; (8000730 <EXTI0_1_IRQHandler+0xf8>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	2180      	movs	r1, #128	; 0x80
 8000714:	0089      	lsls	r1, r1, #2
 8000716:	430a      	orrs	r2, r1
 8000718:	60da      	str	r2, [r3, #12]

	}
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0); // Clear interrupt flags
 800071a:	2001      	movs	r0, #1
 800071c:	f000 fdde 	bl	80012dc <HAL_GPIO_EXTI_IRQHandler>
}
 8000720:	46c0      	nop			; (mov r8, r8)
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	20000630 	.word	0x20000630
 800072c:	20000634 	.word	0x20000634
 8000730:	200006c8 	.word	0x200006c8
 8000734:	fffffdff 	.word	0xfffffdff
 8000738:	2000063c 	.word	0x2000063c
 800073c:	20000638 	.word	0x20000638
 8000740:	20000000 	.word	0x20000000
 8000744:	20000600 	.word	0x20000600
 8000748:	20000200 	.word	0x20000200
 800074c:	20000400 	.word	0x20000400

08000750 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000754:	b672      	cpsid	i
}
 8000756:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000758:	e7fe      	b.n	8000758 <Error_Handler+0x8>
	...

0800075c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000762:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <HAL_MspInit+0x44>)
 8000764:	699a      	ldr	r2, [r3, #24]
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <HAL_MspInit+0x44>)
 8000768:	2101      	movs	r1, #1
 800076a:	430a      	orrs	r2, r1
 800076c:	619a      	str	r2, [r3, #24]
 800076e:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <HAL_MspInit+0x44>)
 8000770:	699b      	ldr	r3, [r3, #24]
 8000772:	2201      	movs	r2, #1
 8000774:	4013      	ands	r3, r2
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800077a:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <HAL_MspInit+0x44>)
 800077c:	69da      	ldr	r2, [r3, #28]
 800077e:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <HAL_MspInit+0x44>)
 8000780:	2180      	movs	r1, #128	; 0x80
 8000782:	0549      	lsls	r1, r1, #21
 8000784:	430a      	orrs	r2, r1
 8000786:	61da      	str	r2, [r3, #28]
 8000788:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <HAL_MspInit+0x44>)
 800078a:	69da      	ldr	r2, [r3, #28]
 800078c:	2380      	movs	r3, #128	; 0x80
 800078e:	055b      	lsls	r3, r3, #21
 8000790:	4013      	ands	r3, r2
 8000792:	603b      	str	r3, [r7, #0]
 8000794:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	46bd      	mov	sp, r7
 800079a:	b002      	add	sp, #8
 800079c:	bd80      	pop	{r7, pc}
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	40021000 	.word	0x40021000

080007a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	2380      	movs	r3, #128	; 0x80
 80007b2:	05db      	lsls	r3, r3, #23
 80007b4:	429a      	cmp	r2, r3
 80007b6:	d134      	bne.n	8000822 <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007b8:	4b24      	ldr	r3, [pc, #144]	; (800084c <HAL_TIM_Base_MspInit+0xa8>)
 80007ba:	69da      	ldr	r2, [r3, #28]
 80007bc:	4b23      	ldr	r3, [pc, #140]	; (800084c <HAL_TIM_Base_MspInit+0xa8>)
 80007be:	2101      	movs	r1, #1
 80007c0:	430a      	orrs	r2, r1
 80007c2:	61da      	str	r2, [r3, #28]
 80007c4:	4b21      	ldr	r3, [pc, #132]	; (800084c <HAL_TIM_Base_MspInit+0xa8>)
 80007c6:	69db      	ldr	r3, [r3, #28]
 80007c8:	2201      	movs	r2, #1
 80007ca:	4013      	ands	r3, r2
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 80007d0:	4b1f      	ldr	r3, [pc, #124]	; (8000850 <HAL_TIM_Base_MspInit+0xac>)
 80007d2:	4a20      	ldr	r2, [pc, #128]	; (8000854 <HAL_TIM_Base_MspInit+0xb0>)
 80007d4:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007d6:	4b1e      	ldr	r3, [pc, #120]	; (8000850 <HAL_TIM_Base_MspInit+0xac>)
 80007d8:	2210      	movs	r2, #16
 80007da:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007dc:	4b1c      	ldr	r3, [pc, #112]	; (8000850 <HAL_TIM_Base_MspInit+0xac>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80007e2:	4b1b      	ldr	r3, [pc, #108]	; (8000850 <HAL_TIM_Base_MspInit+0xac>)
 80007e4:	2280      	movs	r2, #128	; 0x80
 80007e6:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007e8:	4b19      	ldr	r3, [pc, #100]	; (8000850 <HAL_TIM_Base_MspInit+0xac>)
 80007ea:	2280      	movs	r2, #128	; 0x80
 80007ec:	0092      	lsls	r2, r2, #2
 80007ee:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80007f0:	4b17      	ldr	r3, [pc, #92]	; (8000850 <HAL_TIM_Base_MspInit+0xac>)
 80007f2:	2280      	movs	r2, #128	; 0x80
 80007f4:	0112      	lsls	r2, r2, #4
 80007f6:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 80007f8:	4b15      	ldr	r3, [pc, #84]	; (8000850 <HAL_TIM_Base_MspInit+0xac>)
 80007fa:	2220      	movs	r2, #32
 80007fc:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80007fe:	4b14      	ldr	r3, [pc, #80]	; (8000850 <HAL_TIM_Base_MspInit+0xac>)
 8000800:	2200      	movs	r2, #0
 8000802:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <HAL_TIM_Base_MspInit+0xac>)
 8000806:	0018      	movs	r0, r3
 8000808:	f000 f9fc 	bl	8000c04 <HAL_DMA_Init>
 800080c:	1e03      	subs	r3, r0, #0
 800080e:	d001      	beq.n	8000814 <HAL_TIM_Base_MspInit+0x70>
    {
      Error_Handler();
 8000810:	f7ff ff9e 	bl	8000750 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	4a0e      	ldr	r2, [pc, #56]	; (8000850 <HAL_TIM_Base_MspInit+0xac>)
 8000818:	625a      	str	r2, [r3, #36]	; 0x24
 800081a:	4b0d      	ldr	r3, [pc, #52]	; (8000850 <HAL_TIM_Base_MspInit+0xac>)
 800081c:	687a      	ldr	r2, [r7, #4]
 800081e:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000820:	e010      	b.n	8000844 <HAL_TIM_Base_MspInit+0xa0>
  else if(htim_base->Instance==TIM3)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a0c      	ldr	r2, [pc, #48]	; (8000858 <HAL_TIM_Base_MspInit+0xb4>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d10b      	bne.n	8000844 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800082c:	4b07      	ldr	r3, [pc, #28]	; (800084c <HAL_TIM_Base_MspInit+0xa8>)
 800082e:	69da      	ldr	r2, [r3, #28]
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <HAL_TIM_Base_MspInit+0xa8>)
 8000832:	2102      	movs	r1, #2
 8000834:	430a      	orrs	r2, r1
 8000836:	61da      	str	r2, [r3, #28]
 8000838:	4b04      	ldr	r3, [pc, #16]	; (800084c <HAL_TIM_Base_MspInit+0xa8>)
 800083a:	69db      	ldr	r3, [r3, #28]
 800083c:	2202      	movs	r2, #2
 800083e:	4013      	ands	r3, r2
 8000840:	60bb      	str	r3, [r7, #8]
 8000842:	68bb      	ldr	r3, [r7, #8]
}
 8000844:	46c0      	nop			; (mov r8, r8)
 8000846:	46bd      	mov	sp, r7
 8000848:	b004      	add	sp, #16
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40021000 	.word	0x40021000
 8000850:	2000063c 	.word	0x2000063c
 8000854:	40020058 	.word	0x40020058
 8000858:	40000400 	.word	0x40000400

0800085c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800085c:	b590      	push	{r4, r7, lr}
 800085e:	b089      	sub	sp, #36	; 0x24
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	240c      	movs	r4, #12
 8000866:	193b      	adds	r3, r7, r4
 8000868:	0018      	movs	r0, r3
 800086a:	2314      	movs	r3, #20
 800086c:	001a      	movs	r2, r3
 800086e:	2100      	movs	r1, #0
 8000870:	f002 f9c4 	bl	8002bfc <memset>
  if(htim->Instance==TIM3)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a15      	ldr	r2, [pc, #84]	; (80008d0 <HAL_TIM_MspPostInit+0x74>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d124      	bne.n	80008c8 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <HAL_TIM_MspPostInit+0x78>)
 8000880:	695a      	ldr	r2, [r3, #20]
 8000882:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <HAL_TIM_MspPostInit+0x78>)
 8000884:	2180      	movs	r1, #128	; 0x80
 8000886:	0289      	lsls	r1, r1, #10
 8000888:	430a      	orrs	r2, r1
 800088a:	615a      	str	r2, [r3, #20]
 800088c:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <HAL_TIM_MspPostInit+0x78>)
 800088e:	695a      	ldr	r2, [r3, #20]
 8000890:	2380      	movs	r3, #128	; 0x80
 8000892:	029b      	lsls	r3, r3, #10
 8000894:	4013      	ands	r3, r2
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800089a:	0021      	movs	r1, r4
 800089c:	187b      	adds	r3, r7, r1
 800089e:	2240      	movs	r2, #64	; 0x40
 80008a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a2:	187b      	adds	r3, r7, r1
 80008a4:	2202      	movs	r2, #2
 80008a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	187b      	adds	r3, r7, r1
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	187b      	adds	r3, r7, r1
 80008b0:	2200      	movs	r2, #0
 80008b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	2201      	movs	r2, #1
 80008b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ba:	187a      	adds	r2, r7, r1
 80008bc:	2390      	movs	r3, #144	; 0x90
 80008be:	05db      	lsls	r3, r3, #23
 80008c0:	0011      	movs	r1, r2
 80008c2:	0018      	movs	r0, r3
 80008c4:	f000 fb7c 	bl	8000fc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80008c8:	46c0      	nop			; (mov r8, r8)
 80008ca:	46bd      	mov	sp, r7
 80008cc:	b009      	add	sp, #36	; 0x24
 80008ce:	bd90      	pop	{r4, r7, pc}
 80008d0:	40000400 	.word	0x40000400
 80008d4:	40021000 	.word	0x40021000

080008d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <NMI_Handler+0x4>

080008de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e2:	e7fe      	b.n	80008e2 <HardFault_Handler+0x4>

080008e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008e8:	46c0      	nop			; (mov r8, r8)
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}

080008ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ee:	b580      	push	{r7, lr}
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008fc:	f000 f888 	bl	8000a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000900:	46c0      	nop			; (mov r8, r8)
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
	...

08000908 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 800090c:	4b03      	ldr	r3, [pc, #12]	; (800091c <DMA1_Channel4_5_IRQHandler+0x14>)
 800090e:	0018      	movs	r0, r3
 8000910:	f000 fa6b 	bl	8000dea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8000914:	46c0      	nop			; (mov r8, r8)
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	2000063c 	.word	0x2000063c

08000920 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000924:	46c0      	nop			; (mov r8, r8)
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
	...

0800092c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800092c:	480d      	ldr	r0, [pc, #52]	; (8000964 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800092e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000930:	480d      	ldr	r0, [pc, #52]	; (8000968 <LoopForever+0x6>)
  ldr r1, =_edata
 8000932:	490e      	ldr	r1, [pc, #56]	; (800096c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000934:	4a0e      	ldr	r2, [pc, #56]	; (8000970 <LoopForever+0xe>)
  movs r3, #0
 8000936:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000938:	e002      	b.n	8000940 <LoopCopyDataInit>

0800093a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800093a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800093c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800093e:	3304      	adds	r3, #4

08000940 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000940:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000942:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000944:	d3f9      	bcc.n	800093a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000946:	4a0b      	ldr	r2, [pc, #44]	; (8000974 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000948:	4c0b      	ldr	r4, [pc, #44]	; (8000978 <LoopForever+0x16>)
  movs r3, #0
 800094a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800094c:	e001      	b.n	8000952 <LoopFillZerobss>

0800094e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800094e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000950:	3204      	adds	r2, #4

08000952 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000952:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000954:	d3fb      	bcc.n	800094e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000956:	f7ff ffe3 	bl	8000920 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800095a:	f002 f92b 	bl	8002bb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800095e:	f7ff fc5f 	bl	8000220 <main>

08000962 <LoopForever>:

LoopForever:
    b LoopForever
 8000962:	e7fe      	b.n	8000962 <LoopForever>
  ldr   r0, =_estack
 8000964:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000968:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800096c:	20000614 	.word	0x20000614
  ldr r2, =_sidata
 8000970:	08002c5c 	.word	0x08002c5c
  ldr r2, =_sbss
 8000974:	20000614 	.word	0x20000614
  ldr r4, =_ebss
 8000978:	20000714 	.word	0x20000714

0800097c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800097c:	e7fe      	b.n	800097c <ADC1_COMP_IRQHandler>
	...

08000980 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000984:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <HAL_Init+0x24>)
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <HAL_Init+0x24>)
 800098a:	2110      	movs	r1, #16
 800098c:	430a      	orrs	r2, r1
 800098e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000990:	2000      	movs	r0, #0
 8000992:	f000 f809 	bl	80009a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000996:	f7ff fee1 	bl	800075c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800099a:	2300      	movs	r3, #0
}
 800099c:	0018      	movs	r0, r3
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	40022000 	.word	0x40022000

080009a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a8:	b590      	push	{r4, r7, lr}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009b0:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <HAL_InitTick+0x5c>)
 80009b2:	681c      	ldr	r4, [r3, #0]
 80009b4:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <HAL_InitTick+0x60>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	0019      	movs	r1, r3
 80009ba:	23fa      	movs	r3, #250	; 0xfa
 80009bc:	0098      	lsls	r0, r3, #2
 80009be:	f7ff fba3 	bl	8000108 <__udivsi3>
 80009c2:	0003      	movs	r3, r0
 80009c4:	0019      	movs	r1, r3
 80009c6:	0020      	movs	r0, r4
 80009c8:	f7ff fb9e 	bl	8000108 <__udivsi3>
 80009cc:	0003      	movs	r3, r0
 80009ce:	0018      	movs	r0, r3
 80009d0:	f000 f90b 	bl	8000bea <HAL_SYSTICK_Config>
 80009d4:	1e03      	subs	r3, r0, #0
 80009d6:	d001      	beq.n	80009dc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80009d8:	2301      	movs	r3, #1
 80009da:	e00f      	b.n	80009fc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2b03      	cmp	r3, #3
 80009e0:	d80b      	bhi.n	80009fa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009e2:	6879      	ldr	r1, [r7, #4]
 80009e4:	2301      	movs	r3, #1
 80009e6:	425b      	negs	r3, r3
 80009e8:	2200      	movs	r2, #0
 80009ea:	0018      	movs	r0, r3
 80009ec:	f000 f8d8 	bl	8000ba0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <HAL_InitTick+0x64>)
 80009f2:	687a      	ldr	r2, [r7, #4]
 80009f4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80009f6:	2300      	movs	r3, #0
 80009f8:	e000      	b.n	80009fc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
}
 80009fc:	0018      	movs	r0, r3
 80009fe:	46bd      	mov	sp, r7
 8000a00:	b003      	add	sp, #12
 8000a02:	bd90      	pop	{r4, r7, pc}
 8000a04:	20000608 	.word	0x20000608
 8000a08:	20000610 	.word	0x20000610
 8000a0c:	2000060c 	.word	0x2000060c

08000a10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a14:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <HAL_IncTick+0x1c>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	001a      	movs	r2, r3
 8000a1a:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <HAL_IncTick+0x20>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	18d2      	adds	r2, r2, r3
 8000a20:	4b03      	ldr	r3, [pc, #12]	; (8000a30 <HAL_IncTick+0x20>)
 8000a22:	601a      	str	r2, [r3, #0]
}
 8000a24:	46c0      	nop			; (mov r8, r8)
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	20000610 	.word	0x20000610
 8000a30:	20000710 	.word	0x20000710

08000a34 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  return uwTick;
 8000a38:	4b02      	ldr	r3, [pc, #8]	; (8000a44 <HAL_GetTick+0x10>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
}
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	20000710 	.word	0x20000710

08000a48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	0002      	movs	r2, r0
 8000a50:	1dfb      	adds	r3, r7, #7
 8000a52:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a54:	1dfb      	adds	r3, r7, #7
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b7f      	cmp	r3, #127	; 0x7f
 8000a5a:	d809      	bhi.n	8000a70 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a5c:	1dfb      	adds	r3, r7, #7
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	001a      	movs	r2, r3
 8000a62:	231f      	movs	r3, #31
 8000a64:	401a      	ands	r2, r3
 8000a66:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <__NVIC_EnableIRQ+0x30>)
 8000a68:	2101      	movs	r1, #1
 8000a6a:	4091      	lsls	r1, r2
 8000a6c:	000a      	movs	r2, r1
 8000a6e:	601a      	str	r2, [r3, #0]
  }
}
 8000a70:	46c0      	nop			; (mov r8, r8)
 8000a72:	46bd      	mov	sp, r7
 8000a74:	b002      	add	sp, #8
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	e000e100 	.word	0xe000e100

08000a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a7c:	b590      	push	{r4, r7, lr}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	0002      	movs	r2, r0
 8000a84:	6039      	str	r1, [r7, #0]
 8000a86:	1dfb      	adds	r3, r7, #7
 8000a88:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a8a:	1dfb      	adds	r3, r7, #7
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	2b7f      	cmp	r3, #127	; 0x7f
 8000a90:	d828      	bhi.n	8000ae4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a92:	4a2f      	ldr	r2, [pc, #188]	; (8000b50 <__NVIC_SetPriority+0xd4>)
 8000a94:	1dfb      	adds	r3, r7, #7
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	b25b      	sxtb	r3, r3
 8000a9a:	089b      	lsrs	r3, r3, #2
 8000a9c:	33c0      	adds	r3, #192	; 0xc0
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	589b      	ldr	r3, [r3, r2]
 8000aa2:	1dfa      	adds	r2, r7, #7
 8000aa4:	7812      	ldrb	r2, [r2, #0]
 8000aa6:	0011      	movs	r1, r2
 8000aa8:	2203      	movs	r2, #3
 8000aaa:	400a      	ands	r2, r1
 8000aac:	00d2      	lsls	r2, r2, #3
 8000aae:	21ff      	movs	r1, #255	; 0xff
 8000ab0:	4091      	lsls	r1, r2
 8000ab2:	000a      	movs	r2, r1
 8000ab4:	43d2      	mvns	r2, r2
 8000ab6:	401a      	ands	r2, r3
 8000ab8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	019b      	lsls	r3, r3, #6
 8000abe:	22ff      	movs	r2, #255	; 0xff
 8000ac0:	401a      	ands	r2, r3
 8000ac2:	1dfb      	adds	r3, r7, #7
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	2303      	movs	r3, #3
 8000aca:	4003      	ands	r3, r0
 8000acc:	00db      	lsls	r3, r3, #3
 8000ace:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ad0:	481f      	ldr	r0, [pc, #124]	; (8000b50 <__NVIC_SetPriority+0xd4>)
 8000ad2:	1dfb      	adds	r3, r7, #7
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	b25b      	sxtb	r3, r3
 8000ad8:	089b      	lsrs	r3, r3, #2
 8000ada:	430a      	orrs	r2, r1
 8000adc:	33c0      	adds	r3, #192	; 0xc0
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ae2:	e031      	b.n	8000b48 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ae4:	4a1b      	ldr	r2, [pc, #108]	; (8000b54 <__NVIC_SetPriority+0xd8>)
 8000ae6:	1dfb      	adds	r3, r7, #7
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	0019      	movs	r1, r3
 8000aec:	230f      	movs	r3, #15
 8000aee:	400b      	ands	r3, r1
 8000af0:	3b08      	subs	r3, #8
 8000af2:	089b      	lsrs	r3, r3, #2
 8000af4:	3306      	adds	r3, #6
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	18d3      	adds	r3, r2, r3
 8000afa:	3304      	adds	r3, #4
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	1dfa      	adds	r2, r7, #7
 8000b00:	7812      	ldrb	r2, [r2, #0]
 8000b02:	0011      	movs	r1, r2
 8000b04:	2203      	movs	r2, #3
 8000b06:	400a      	ands	r2, r1
 8000b08:	00d2      	lsls	r2, r2, #3
 8000b0a:	21ff      	movs	r1, #255	; 0xff
 8000b0c:	4091      	lsls	r1, r2
 8000b0e:	000a      	movs	r2, r1
 8000b10:	43d2      	mvns	r2, r2
 8000b12:	401a      	ands	r2, r3
 8000b14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	019b      	lsls	r3, r3, #6
 8000b1a:	22ff      	movs	r2, #255	; 0xff
 8000b1c:	401a      	ands	r2, r3
 8000b1e:	1dfb      	adds	r3, r7, #7
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	0018      	movs	r0, r3
 8000b24:	2303      	movs	r3, #3
 8000b26:	4003      	ands	r3, r0
 8000b28:	00db      	lsls	r3, r3, #3
 8000b2a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b2c:	4809      	ldr	r0, [pc, #36]	; (8000b54 <__NVIC_SetPriority+0xd8>)
 8000b2e:	1dfb      	adds	r3, r7, #7
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	001c      	movs	r4, r3
 8000b34:	230f      	movs	r3, #15
 8000b36:	4023      	ands	r3, r4
 8000b38:	3b08      	subs	r3, #8
 8000b3a:	089b      	lsrs	r3, r3, #2
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	3306      	adds	r3, #6
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	18c3      	adds	r3, r0, r3
 8000b44:	3304      	adds	r3, #4
 8000b46:	601a      	str	r2, [r3, #0]
}
 8000b48:	46c0      	nop			; (mov r8, r8)
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	b003      	add	sp, #12
 8000b4e:	bd90      	pop	{r4, r7, pc}
 8000b50:	e000e100 	.word	0xe000e100
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	1e5a      	subs	r2, r3, #1
 8000b64:	2380      	movs	r3, #128	; 0x80
 8000b66:	045b      	lsls	r3, r3, #17
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d301      	bcc.n	8000b70 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	e010      	b.n	8000b92 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b70:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <SysTick_Config+0x44>)
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	3a01      	subs	r2, #1
 8000b76:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b78:	2301      	movs	r3, #1
 8000b7a:	425b      	negs	r3, r3
 8000b7c:	2103      	movs	r1, #3
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f7ff ff7c 	bl	8000a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b84:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <SysTick_Config+0x44>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b8a:	4b04      	ldr	r3, [pc, #16]	; (8000b9c <SysTick_Config+0x44>)
 8000b8c:	2207      	movs	r2, #7
 8000b8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	0018      	movs	r0, r3
 8000b94:	46bd      	mov	sp, r7
 8000b96:	b002      	add	sp, #8
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	e000e010 	.word	0xe000e010

08000ba0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60b9      	str	r1, [r7, #8]
 8000ba8:	607a      	str	r2, [r7, #4]
 8000baa:	210f      	movs	r1, #15
 8000bac:	187b      	adds	r3, r7, r1
 8000bae:	1c02      	adds	r2, r0, #0
 8000bb0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000bb2:	68ba      	ldr	r2, [r7, #8]
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	b25b      	sxtb	r3, r3
 8000bba:	0011      	movs	r1, r2
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f7ff ff5d 	bl	8000a7c <__NVIC_SetPriority>
}
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	b004      	add	sp, #16
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b082      	sub	sp, #8
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	0002      	movs	r2, r0
 8000bd2:	1dfb      	adds	r3, r7, #7
 8000bd4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bd6:	1dfb      	adds	r3, r7, #7
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	b25b      	sxtb	r3, r3
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f7ff ff33 	bl	8000a48 <__NVIC_EnableIRQ>
}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	46bd      	mov	sp, r7
 8000be6:	b002      	add	sp, #8
 8000be8:	bd80      	pop	{r7, pc}

08000bea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b082      	sub	sp, #8
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f7ff ffaf 	bl	8000b58 <SysTick_Config>
 8000bfa:	0003      	movs	r3, r0
}
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	b002      	add	sp, #8
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d101      	bne.n	8000c1a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	e036      	b.n	8000c88 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2221      	movs	r2, #33	; 0x21
 8000c1e:	2102      	movs	r1, #2
 8000c20:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	4a18      	ldr	r2, [pc, #96]	; (8000c90 <HAL_DMA_Init+0x8c>)
 8000c2e:	4013      	ands	r3, r2
 8000c30:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000c3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	695b      	ldr	r3, [r3, #20]
 8000c4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	69db      	ldr	r3, [r3, #28]
 8000c58:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000c5a:	68fa      	ldr	r2, [r7, #12]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	68fa      	ldr	r2, [r7, #12]
 8000c66:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f000 f98c 	bl	8000f88 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2200      	movs	r2, #0
 8000c74:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2221      	movs	r2, #33	; 0x21
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2220      	movs	r2, #32
 8000c82:	2100      	movs	r1, #0
 8000c84:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000c86:	2300      	movs	r3, #0
}  
 8000c88:	0018      	movs	r0, r3
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	b004      	add	sp, #16
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	ffffc00f 	.word	0xffffc00f

08000c94 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
 8000ca0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000ca2:	2317      	movs	r3, #23
 8000ca4:	18fb      	adds	r3, r7, r3
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	2220      	movs	r2, #32
 8000cae:	5c9b      	ldrb	r3, [r3, r2]
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d101      	bne.n	8000cb8 <HAL_DMA_Start_IT+0x24>
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	e04f      	b.n	8000d58 <HAL_DMA_Start_IT+0xc4>
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	2220      	movs	r2, #32
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	2221      	movs	r2, #33	; 0x21
 8000cc4:	5c9b      	ldrb	r3, [r3, r2]
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d13a      	bne.n	8000d42 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	2221      	movs	r2, #33	; 0x21
 8000cd0:	2102      	movs	r1, #2
 8000cd2:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	438a      	bics	r2, r1
 8000ce8:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	687a      	ldr	r2, [r7, #4]
 8000cee:	68b9      	ldr	r1, [r7, #8]
 8000cf0:	68f8      	ldr	r0, [r7, #12]
 8000cf2:	f000 f91c 	bl	8000f2e <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d008      	beq.n	8000d10 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	210e      	movs	r1, #14
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	e00f      	b.n	8000d30 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	210a      	movs	r1, #10
 8000d1c:	430a      	orrs	r2, r1
 8000d1e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2104      	movs	r1, #4
 8000d2c:	438a      	bics	r2, r1
 8000d2e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	430a      	orrs	r2, r1
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	e007      	b.n	8000d52 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	2220      	movs	r2, #32
 8000d46:	2100      	movs	r1, #0
 8000d48:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8000d4a:	2317      	movs	r3, #23
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	2202      	movs	r2, #2
 8000d50:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8000d52:	2317      	movs	r3, #23
 8000d54:	18fb      	adds	r3, r7, r3
 8000d56:	781b      	ldrb	r3, [r3, #0]
} 
 8000d58:	0018      	movs	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	b006      	add	sp, #24
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d68:	210f      	movs	r1, #15
 8000d6a:	187b      	adds	r3, r7, r1
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2221      	movs	r2, #33	; 0x21
 8000d74:	5c9b      	ldrb	r3, [r3, r2]
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	d006      	beq.n	8000d8a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2204      	movs	r2, #4
 8000d80:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d82:	187b      	adds	r3, r7, r1
 8000d84:	2201      	movs	r2, #1
 8000d86:	701a      	strb	r2, [r3, #0]
 8000d88:	e028      	b.n	8000ddc <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	210e      	movs	r1, #14
 8000d96:	438a      	bics	r2, r1
 8000d98:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2101      	movs	r1, #1
 8000da6:	438a      	bics	r2, r1
 8000da8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000db2:	2101      	movs	r1, #1
 8000db4:	4091      	lsls	r1, r2
 8000db6:	000a      	movs	r2, r1
 8000db8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2221      	movs	r2, #33	; 0x21
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2220      	movs	r2, #32
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d004      	beq.n	8000ddc <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	0010      	movs	r0, r2
 8000dda:	4798      	blx	r3
    } 
  }
  return status;
 8000ddc:	230f      	movs	r3, #15
 8000dde:	18fb      	adds	r3, r7, r3
 8000de0:	781b      	ldrb	r3, [r3, #0]
}
 8000de2:	0018      	movs	r0, r3
 8000de4:	46bd      	mov	sp, r7
 8000de6:	b004      	add	sp, #16
 8000de8:	bd80      	pop	{r7, pc}

08000dea <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b084      	sub	sp, #16
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e06:	2204      	movs	r2, #4
 8000e08:	409a      	lsls	r2, r3
 8000e0a:	0013      	movs	r3, r2
 8000e0c:	68fa      	ldr	r2, [r7, #12]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	d024      	beq.n	8000e5c <HAL_DMA_IRQHandler+0x72>
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	2204      	movs	r2, #4
 8000e16:	4013      	ands	r3, r2
 8000e18:	d020      	beq.n	8000e5c <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2220      	movs	r2, #32
 8000e22:	4013      	ands	r3, r2
 8000e24:	d107      	bne.n	8000e36 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2104      	movs	r1, #4
 8000e32:	438a      	bics	r2, r1
 8000e34:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e3e:	2104      	movs	r1, #4
 8000e40:	4091      	lsls	r1, r2
 8000e42:	000a      	movs	r2, r1
 8000e44:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d100      	bne.n	8000e50 <HAL_DMA_IRQHandler+0x66>
 8000e4e:	e06a      	b.n	8000f26 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	0010      	movs	r0, r2
 8000e58:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000e5a:	e064      	b.n	8000f26 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e60:	2202      	movs	r2, #2
 8000e62:	409a      	lsls	r2, r3
 8000e64:	0013      	movs	r3, r2
 8000e66:	68fa      	ldr	r2, [r7, #12]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	d02b      	beq.n	8000ec4 <HAL_DMA_IRQHandler+0xda>
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	2202      	movs	r2, #2
 8000e70:	4013      	ands	r3, r2
 8000e72:	d027      	beq.n	8000ec4 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2220      	movs	r2, #32
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	d10b      	bne.n	8000e98 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	210a      	movs	r1, #10
 8000e8c:	438a      	bics	r2, r1
 8000e8e:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2221      	movs	r2, #33	; 0x21
 8000e94:	2101      	movs	r1, #1
 8000e96:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ea0:	2102      	movs	r1, #2
 8000ea2:	4091      	lsls	r1, r2
 8000ea4:	000a      	movs	r2, r1
 8000ea6:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2220      	movs	r2, #32
 8000eac:	2100      	movs	r1, #0
 8000eae:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d036      	beq.n	8000f26 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	0010      	movs	r0, r2
 8000ec0:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000ec2:	e030      	b.n	8000f26 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec8:	2208      	movs	r2, #8
 8000eca:	409a      	lsls	r2, r3
 8000ecc:	0013      	movs	r3, r2
 8000ece:	68fa      	ldr	r2, [r7, #12]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	d028      	beq.n	8000f26 <HAL_DMA_IRQHandler+0x13c>
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	2208      	movs	r2, #8
 8000ed8:	4013      	ands	r3, r2
 8000eda:	d024      	beq.n	8000f26 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	210e      	movs	r1, #14
 8000ee8:	438a      	bics	r2, r1
 8000eea:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	4091      	lsls	r1, r2
 8000ef8:	000a      	movs	r2, r1
 8000efa:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2201      	movs	r2, #1
 8000f00:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2221      	movs	r2, #33	; 0x21
 8000f06:	2101      	movs	r1, #1
 8000f08:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2220      	movs	r2, #32
 8000f0e:	2100      	movs	r1, #0
 8000f10:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d005      	beq.n	8000f26 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	0010      	movs	r0, r2
 8000f22:	4798      	blx	r3
    }
   }
}  
 8000f24:	e7ff      	b.n	8000f26 <HAL_DMA_IRQHandler+0x13c>
 8000f26:	46c0      	nop			; (mov r8, r8)
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	b004      	add	sp, #16
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b084      	sub	sp, #16
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	60f8      	str	r0, [r7, #12]
 8000f36:	60b9      	str	r1, [r7, #8]
 8000f38:	607a      	str	r2, [r7, #4]
 8000f3a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f44:	2101      	movs	r1, #1
 8000f46:	4091      	lsls	r1, r2
 8000f48:	000a      	movs	r2, r1
 8000f4a:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	683a      	ldr	r2, [r7, #0]
 8000f52:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	2b10      	cmp	r3, #16
 8000f5a:	d108      	bne.n	8000f6e <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	68ba      	ldr	r2, [r7, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000f6c:	e007      	b.n	8000f7e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	68ba      	ldr	r2, [r7, #8]
 8000f74:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	60da      	str	r2, [r3, #12]
}
 8000f7e:	46c0      	nop			; (mov r8, r8)
 8000f80:	46bd      	mov	sp, r7
 8000f82:	b004      	add	sp, #16
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a08      	ldr	r2, [pc, #32]	; (8000fb8 <DMA_CalcBaseAndBitshift+0x30>)
 8000f96:	4694      	mov	ip, r2
 8000f98:	4463      	add	r3, ip
 8000f9a:	2114      	movs	r1, #20
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	f7ff f8b3 	bl	8000108 <__udivsi3>
 8000fa2:	0003      	movs	r3, r0
 8000fa4:	009a      	lsls	r2, r3, #2
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a03      	ldr	r2, [pc, #12]	; (8000fbc <DMA_CalcBaseAndBitshift+0x34>)
 8000fae:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8000fb0:	46c0      	nop			; (mov r8, r8)
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	b002      	add	sp, #8
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	bffdfff8 	.word	0xbffdfff8
 8000fbc:	40020000 	.word	0x40020000

08000fc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fce:	e14f      	b.n	8001270 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	697a      	ldr	r2, [r7, #20]
 8000fd8:	4091      	lsls	r1, r2
 8000fda:	000a      	movs	r2, r1
 8000fdc:	4013      	ands	r3, r2
 8000fde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d100      	bne.n	8000fe8 <HAL_GPIO_Init+0x28>
 8000fe6:	e140      	b.n	800126a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	2203      	movs	r2, #3
 8000fee:	4013      	ands	r3, r2
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d005      	beq.n	8001000 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	2203      	movs	r2, #3
 8000ffa:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d130      	bne.n	8001062 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	2203      	movs	r2, #3
 800100c:	409a      	lsls	r2, r3
 800100e:	0013      	movs	r3, r2
 8001010:	43da      	mvns	r2, r3
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	4013      	ands	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	68da      	ldr	r2, [r3, #12]
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	409a      	lsls	r2, r3
 8001022:	0013      	movs	r3, r2
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	4313      	orrs	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001036:	2201      	movs	r2, #1
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	409a      	lsls	r2, r3
 800103c:	0013      	movs	r3, r2
 800103e:	43da      	mvns	r2, r3
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	4013      	ands	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	091b      	lsrs	r3, r3, #4
 800104c:	2201      	movs	r2, #1
 800104e:	401a      	ands	r2, r3
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	409a      	lsls	r2, r3
 8001054:	0013      	movs	r3, r2
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2203      	movs	r2, #3
 8001068:	4013      	ands	r3, r2
 800106a:	2b03      	cmp	r3, #3
 800106c:	d017      	beq.n	800109e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	2203      	movs	r2, #3
 800107a:	409a      	lsls	r2, r3
 800107c:	0013      	movs	r3, r2
 800107e:	43da      	mvns	r2, r3
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	4013      	ands	r3, r2
 8001084:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	689a      	ldr	r2, [r3, #8]
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	409a      	lsls	r2, r3
 8001090:	0013      	movs	r3, r2
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	4313      	orrs	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	2203      	movs	r2, #3
 80010a4:	4013      	ands	r3, r2
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d123      	bne.n	80010f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	08da      	lsrs	r2, r3, #3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	3208      	adds	r2, #8
 80010b2:	0092      	lsls	r2, r2, #2
 80010b4:	58d3      	ldr	r3, [r2, r3]
 80010b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	2207      	movs	r2, #7
 80010bc:	4013      	ands	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	220f      	movs	r2, #15
 80010c2:	409a      	lsls	r2, r3
 80010c4:	0013      	movs	r3, r2
 80010c6:	43da      	mvns	r2, r3
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	4013      	ands	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	691a      	ldr	r2, [r3, #16]
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	2107      	movs	r1, #7
 80010d6:	400b      	ands	r3, r1
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	409a      	lsls	r2, r3
 80010dc:	0013      	movs	r3, r2
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	08da      	lsrs	r2, r3, #3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3208      	adds	r2, #8
 80010ec:	0092      	lsls	r2, r2, #2
 80010ee:	6939      	ldr	r1, [r7, #16]
 80010f0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	2203      	movs	r2, #3
 80010fe:	409a      	lsls	r2, r3
 8001100:	0013      	movs	r3, r2
 8001102:	43da      	mvns	r2, r3
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	4013      	ands	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	2203      	movs	r2, #3
 8001110:	401a      	ands	r2, r3
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	409a      	lsls	r2, r3
 8001118:	0013      	movs	r3, r2
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	4313      	orrs	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685a      	ldr	r2, [r3, #4]
 800112a:	23c0      	movs	r3, #192	; 0xc0
 800112c:	029b      	lsls	r3, r3, #10
 800112e:	4013      	ands	r3, r2
 8001130:	d100      	bne.n	8001134 <HAL_GPIO_Init+0x174>
 8001132:	e09a      	b.n	800126a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001134:	4b54      	ldr	r3, [pc, #336]	; (8001288 <HAL_GPIO_Init+0x2c8>)
 8001136:	699a      	ldr	r2, [r3, #24]
 8001138:	4b53      	ldr	r3, [pc, #332]	; (8001288 <HAL_GPIO_Init+0x2c8>)
 800113a:	2101      	movs	r1, #1
 800113c:	430a      	orrs	r2, r1
 800113e:	619a      	str	r2, [r3, #24]
 8001140:	4b51      	ldr	r3, [pc, #324]	; (8001288 <HAL_GPIO_Init+0x2c8>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	2201      	movs	r2, #1
 8001146:	4013      	ands	r3, r2
 8001148:	60bb      	str	r3, [r7, #8]
 800114a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800114c:	4a4f      	ldr	r2, [pc, #316]	; (800128c <HAL_GPIO_Init+0x2cc>)
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	089b      	lsrs	r3, r3, #2
 8001152:	3302      	adds	r3, #2
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	589b      	ldr	r3, [r3, r2]
 8001158:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	2203      	movs	r2, #3
 800115e:	4013      	ands	r3, r2
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	220f      	movs	r2, #15
 8001164:	409a      	lsls	r2, r3
 8001166:	0013      	movs	r3, r2
 8001168:	43da      	mvns	r2, r3
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	4013      	ands	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	2390      	movs	r3, #144	; 0x90
 8001174:	05db      	lsls	r3, r3, #23
 8001176:	429a      	cmp	r2, r3
 8001178:	d013      	beq.n	80011a2 <HAL_GPIO_Init+0x1e2>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a44      	ldr	r2, [pc, #272]	; (8001290 <HAL_GPIO_Init+0x2d0>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d00d      	beq.n	800119e <HAL_GPIO_Init+0x1de>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a43      	ldr	r2, [pc, #268]	; (8001294 <HAL_GPIO_Init+0x2d4>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d007      	beq.n	800119a <HAL_GPIO_Init+0x1da>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a42      	ldr	r2, [pc, #264]	; (8001298 <HAL_GPIO_Init+0x2d8>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d101      	bne.n	8001196 <HAL_GPIO_Init+0x1d6>
 8001192:	2303      	movs	r3, #3
 8001194:	e006      	b.n	80011a4 <HAL_GPIO_Init+0x1e4>
 8001196:	2305      	movs	r3, #5
 8001198:	e004      	b.n	80011a4 <HAL_GPIO_Init+0x1e4>
 800119a:	2302      	movs	r3, #2
 800119c:	e002      	b.n	80011a4 <HAL_GPIO_Init+0x1e4>
 800119e:	2301      	movs	r3, #1
 80011a0:	e000      	b.n	80011a4 <HAL_GPIO_Init+0x1e4>
 80011a2:	2300      	movs	r3, #0
 80011a4:	697a      	ldr	r2, [r7, #20]
 80011a6:	2103      	movs	r1, #3
 80011a8:	400a      	ands	r2, r1
 80011aa:	0092      	lsls	r2, r2, #2
 80011ac:	4093      	lsls	r3, r2
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011b4:	4935      	ldr	r1, [pc, #212]	; (800128c <HAL_GPIO_Init+0x2cc>)
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	089b      	lsrs	r3, r3, #2
 80011ba:	3302      	adds	r3, #2
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011c2:	4b36      	ldr	r3, [pc, #216]	; (800129c <HAL_GPIO_Init+0x2dc>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	43da      	mvns	r2, r3
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	4013      	ands	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685a      	ldr	r2, [r3, #4]
 80011d6:	2380      	movs	r3, #128	; 0x80
 80011d8:	025b      	lsls	r3, r3, #9
 80011da:	4013      	ands	r3, r2
 80011dc:	d003      	beq.n	80011e6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80011e6:	4b2d      	ldr	r3, [pc, #180]	; (800129c <HAL_GPIO_Init+0x2dc>)
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80011ec:	4b2b      	ldr	r3, [pc, #172]	; (800129c <HAL_GPIO_Init+0x2dc>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	43da      	mvns	r2, r3
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	4013      	ands	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	2380      	movs	r3, #128	; 0x80
 8001202:	029b      	lsls	r3, r3, #10
 8001204:	4013      	ands	r3, r2
 8001206:	d003      	beq.n	8001210 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	4313      	orrs	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001210:	4b22      	ldr	r3, [pc, #136]	; (800129c <HAL_GPIO_Init+0x2dc>)
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001216:	4b21      	ldr	r3, [pc, #132]	; (800129c <HAL_GPIO_Init+0x2dc>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	43da      	mvns	r2, r3
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	4013      	ands	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685a      	ldr	r2, [r3, #4]
 800122a:	2380      	movs	r3, #128	; 0x80
 800122c:	035b      	lsls	r3, r3, #13
 800122e:	4013      	ands	r3, r2
 8001230:	d003      	beq.n	800123a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4313      	orrs	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800123a:	4b18      	ldr	r3, [pc, #96]	; (800129c <HAL_GPIO_Init+0x2dc>)
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001240:	4b16      	ldr	r3, [pc, #88]	; (800129c <HAL_GPIO_Init+0x2dc>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	43da      	mvns	r2, r3
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	4013      	ands	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685a      	ldr	r2, [r3, #4]
 8001254:	2380      	movs	r3, #128	; 0x80
 8001256:	039b      	lsls	r3, r3, #14
 8001258:	4013      	ands	r3, r2
 800125a:	d003      	beq.n	8001264 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	4313      	orrs	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001264:	4b0d      	ldr	r3, [pc, #52]	; (800129c <HAL_GPIO_Init+0x2dc>)
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	3301      	adds	r3, #1
 800126e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	40da      	lsrs	r2, r3
 8001278:	1e13      	subs	r3, r2, #0
 800127a:	d000      	beq.n	800127e <HAL_GPIO_Init+0x2be>
 800127c:	e6a8      	b.n	8000fd0 <HAL_GPIO_Init+0x10>
  } 
}
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	46c0      	nop			; (mov r8, r8)
 8001282:	46bd      	mov	sp, r7
 8001284:	b006      	add	sp, #24
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40021000 	.word	0x40021000
 800128c:	40010000 	.word	0x40010000
 8001290:	48000400 	.word	0x48000400
 8001294:	48000800 	.word	0x48000800
 8001298:	48000c00 	.word	0x48000c00
 800129c:	40010400 	.word	0x40010400

080012a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	0008      	movs	r0, r1
 80012aa:	0011      	movs	r1, r2
 80012ac:	1cbb      	adds	r3, r7, #2
 80012ae:	1c02      	adds	r2, r0, #0
 80012b0:	801a      	strh	r2, [r3, #0]
 80012b2:	1c7b      	adds	r3, r7, #1
 80012b4:	1c0a      	adds	r2, r1, #0
 80012b6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012b8:	1c7b      	adds	r3, r7, #1
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d004      	beq.n	80012ca <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012c0:	1cbb      	adds	r3, r7, #2
 80012c2:	881a      	ldrh	r2, [r3, #0]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012c8:	e003      	b.n	80012d2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012ca:	1cbb      	adds	r3, r7, #2
 80012cc:	881a      	ldrh	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012d2:	46c0      	nop			; (mov r8, r8)
 80012d4:	46bd      	mov	sp, r7
 80012d6:	b002      	add	sp, #8
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	0002      	movs	r2, r0
 80012e4:	1dbb      	adds	r3, r7, #6
 80012e6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80012e8:	4b09      	ldr	r3, [pc, #36]	; (8001310 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80012ea:	695b      	ldr	r3, [r3, #20]
 80012ec:	1dba      	adds	r2, r7, #6
 80012ee:	8812      	ldrh	r2, [r2, #0]
 80012f0:	4013      	ands	r3, r2
 80012f2:	d008      	beq.n	8001306 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80012f6:	1dba      	adds	r2, r7, #6
 80012f8:	8812      	ldrh	r2, [r2, #0]
 80012fa:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012fc:	1dbb      	adds	r3, r7, #6
 80012fe:	881b      	ldrh	r3, [r3, #0]
 8001300:	0018      	movs	r0, r3
 8001302:	f000 f807 	bl	8001314 <HAL_GPIO_EXTI_Callback>
  }
}
 8001306:	46c0      	nop			; (mov r8, r8)
 8001308:	46bd      	mov	sp, r7
 800130a:	b002      	add	sp, #8
 800130c:	bd80      	pop	{r7, pc}
 800130e:	46c0      	nop			; (mov r8, r8)
 8001310:	40010400 	.word	0x40010400

08001314 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	0002      	movs	r2, r0
 800131c:	1dbb      	adds	r3, r7, #6
 800131e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8001320:	46c0      	nop			; (mov r8, r8)
 8001322:	46bd      	mov	sp, r7
 8001324:	b002      	add	sp, #8
 8001326:	bd80      	pop	{r7, pc}

08001328 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b088      	sub	sp, #32
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d101      	bne.n	800133a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e301      	b.n	800193e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2201      	movs	r2, #1
 8001340:	4013      	ands	r3, r2
 8001342:	d100      	bne.n	8001346 <HAL_RCC_OscConfig+0x1e>
 8001344:	e08d      	b.n	8001462 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001346:	4bc3      	ldr	r3, [pc, #780]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	220c      	movs	r2, #12
 800134c:	4013      	ands	r3, r2
 800134e:	2b04      	cmp	r3, #4
 8001350:	d00e      	beq.n	8001370 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001352:	4bc0      	ldr	r3, [pc, #768]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	220c      	movs	r2, #12
 8001358:	4013      	ands	r3, r2
 800135a:	2b08      	cmp	r3, #8
 800135c:	d116      	bne.n	800138c <HAL_RCC_OscConfig+0x64>
 800135e:	4bbd      	ldr	r3, [pc, #756]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001360:	685a      	ldr	r2, [r3, #4]
 8001362:	2380      	movs	r3, #128	; 0x80
 8001364:	025b      	lsls	r3, r3, #9
 8001366:	401a      	ands	r2, r3
 8001368:	2380      	movs	r3, #128	; 0x80
 800136a:	025b      	lsls	r3, r3, #9
 800136c:	429a      	cmp	r2, r3
 800136e:	d10d      	bne.n	800138c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001370:	4bb8      	ldr	r3, [pc, #736]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	2380      	movs	r3, #128	; 0x80
 8001376:	029b      	lsls	r3, r3, #10
 8001378:	4013      	ands	r3, r2
 800137a:	d100      	bne.n	800137e <HAL_RCC_OscConfig+0x56>
 800137c:	e070      	b.n	8001460 <HAL_RCC_OscConfig+0x138>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d000      	beq.n	8001388 <HAL_RCC_OscConfig+0x60>
 8001386:	e06b      	b.n	8001460 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e2d8      	b.n	800193e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d107      	bne.n	80013a4 <HAL_RCC_OscConfig+0x7c>
 8001394:	4baf      	ldr	r3, [pc, #700]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	4bae      	ldr	r3, [pc, #696]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 800139a:	2180      	movs	r1, #128	; 0x80
 800139c:	0249      	lsls	r1, r1, #9
 800139e:	430a      	orrs	r2, r1
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	e02f      	b.n	8001404 <HAL_RCC_OscConfig+0xdc>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d10c      	bne.n	80013c6 <HAL_RCC_OscConfig+0x9e>
 80013ac:	4ba9      	ldr	r3, [pc, #676]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	4ba8      	ldr	r3, [pc, #672]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80013b2:	49a9      	ldr	r1, [pc, #676]	; (8001658 <HAL_RCC_OscConfig+0x330>)
 80013b4:	400a      	ands	r2, r1
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	4ba6      	ldr	r3, [pc, #664]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	4ba5      	ldr	r3, [pc, #660]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80013be:	49a7      	ldr	r1, [pc, #668]	; (800165c <HAL_RCC_OscConfig+0x334>)
 80013c0:	400a      	ands	r2, r1
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	e01e      	b.n	8001404 <HAL_RCC_OscConfig+0xdc>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2b05      	cmp	r3, #5
 80013cc:	d10e      	bne.n	80013ec <HAL_RCC_OscConfig+0xc4>
 80013ce:	4ba1      	ldr	r3, [pc, #644]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	4ba0      	ldr	r3, [pc, #640]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80013d4:	2180      	movs	r1, #128	; 0x80
 80013d6:	02c9      	lsls	r1, r1, #11
 80013d8:	430a      	orrs	r2, r1
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	4b9d      	ldr	r3, [pc, #628]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	4b9c      	ldr	r3, [pc, #624]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80013e2:	2180      	movs	r1, #128	; 0x80
 80013e4:	0249      	lsls	r1, r1, #9
 80013e6:	430a      	orrs	r2, r1
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	e00b      	b.n	8001404 <HAL_RCC_OscConfig+0xdc>
 80013ec:	4b99      	ldr	r3, [pc, #612]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4b98      	ldr	r3, [pc, #608]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80013f2:	4999      	ldr	r1, [pc, #612]	; (8001658 <HAL_RCC_OscConfig+0x330>)
 80013f4:	400a      	ands	r2, r1
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	4b96      	ldr	r3, [pc, #600]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4b95      	ldr	r3, [pc, #596]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80013fe:	4997      	ldr	r1, [pc, #604]	; (800165c <HAL_RCC_OscConfig+0x334>)
 8001400:	400a      	ands	r2, r1
 8001402:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d014      	beq.n	8001436 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140c:	f7ff fb12 	bl	8000a34 <HAL_GetTick>
 8001410:	0003      	movs	r3, r0
 8001412:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001414:	e008      	b.n	8001428 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001416:	f7ff fb0d 	bl	8000a34 <HAL_GetTick>
 800141a:	0002      	movs	r2, r0
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b64      	cmp	r3, #100	; 0x64
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e28a      	b.n	800193e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001428:	4b8a      	ldr	r3, [pc, #552]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	2380      	movs	r3, #128	; 0x80
 800142e:	029b      	lsls	r3, r3, #10
 8001430:	4013      	ands	r3, r2
 8001432:	d0f0      	beq.n	8001416 <HAL_RCC_OscConfig+0xee>
 8001434:	e015      	b.n	8001462 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001436:	f7ff fafd 	bl	8000a34 <HAL_GetTick>
 800143a:	0003      	movs	r3, r0
 800143c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001440:	f7ff faf8 	bl	8000a34 <HAL_GetTick>
 8001444:	0002      	movs	r2, r0
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b64      	cmp	r3, #100	; 0x64
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e275      	b.n	800193e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001452:	4b80      	ldr	r3, [pc, #512]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	2380      	movs	r3, #128	; 0x80
 8001458:	029b      	lsls	r3, r3, #10
 800145a:	4013      	ands	r3, r2
 800145c:	d1f0      	bne.n	8001440 <HAL_RCC_OscConfig+0x118>
 800145e:	e000      	b.n	8001462 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001460:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2202      	movs	r2, #2
 8001468:	4013      	ands	r3, r2
 800146a:	d100      	bne.n	800146e <HAL_RCC_OscConfig+0x146>
 800146c:	e069      	b.n	8001542 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800146e:	4b79      	ldr	r3, [pc, #484]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	220c      	movs	r2, #12
 8001474:	4013      	ands	r3, r2
 8001476:	d00b      	beq.n	8001490 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001478:	4b76      	ldr	r3, [pc, #472]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	220c      	movs	r2, #12
 800147e:	4013      	ands	r3, r2
 8001480:	2b08      	cmp	r3, #8
 8001482:	d11c      	bne.n	80014be <HAL_RCC_OscConfig+0x196>
 8001484:	4b73      	ldr	r3, [pc, #460]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001486:	685a      	ldr	r2, [r3, #4]
 8001488:	2380      	movs	r3, #128	; 0x80
 800148a:	025b      	lsls	r3, r3, #9
 800148c:	4013      	ands	r3, r2
 800148e:	d116      	bne.n	80014be <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001490:	4b70      	ldr	r3, [pc, #448]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2202      	movs	r2, #2
 8001496:	4013      	ands	r3, r2
 8001498:	d005      	beq.n	80014a6 <HAL_RCC_OscConfig+0x17e>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d001      	beq.n	80014a6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e24b      	b.n	800193e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a6:	4b6b      	ldr	r3, [pc, #428]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	22f8      	movs	r2, #248	; 0xf8
 80014ac:	4393      	bics	r3, r2
 80014ae:	0019      	movs	r1, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	691b      	ldr	r3, [r3, #16]
 80014b4:	00da      	lsls	r2, r3, #3
 80014b6:	4b67      	ldr	r3, [pc, #412]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80014b8:	430a      	orrs	r2, r1
 80014ba:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014bc:	e041      	b.n	8001542 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d024      	beq.n	8001510 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014c6:	4b63      	ldr	r3, [pc, #396]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	4b62      	ldr	r3, [pc, #392]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80014cc:	2101      	movs	r1, #1
 80014ce:	430a      	orrs	r2, r1
 80014d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d2:	f7ff faaf 	bl	8000a34 <HAL_GetTick>
 80014d6:	0003      	movs	r3, r0
 80014d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014dc:	f7ff faaa 	bl	8000a34 <HAL_GetTick>
 80014e0:	0002      	movs	r2, r0
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e227      	b.n	800193e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ee:	4b59      	ldr	r3, [pc, #356]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2202      	movs	r2, #2
 80014f4:	4013      	ands	r3, r2
 80014f6:	d0f1      	beq.n	80014dc <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f8:	4b56      	ldr	r3, [pc, #344]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	22f8      	movs	r2, #248	; 0xf8
 80014fe:	4393      	bics	r3, r2
 8001500:	0019      	movs	r1, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	691b      	ldr	r3, [r3, #16]
 8001506:	00da      	lsls	r2, r3, #3
 8001508:	4b52      	ldr	r3, [pc, #328]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 800150a:	430a      	orrs	r2, r1
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	e018      	b.n	8001542 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001510:	4b50      	ldr	r3, [pc, #320]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	4b4f      	ldr	r3, [pc, #316]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001516:	2101      	movs	r1, #1
 8001518:	438a      	bics	r2, r1
 800151a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151c:	f7ff fa8a 	bl	8000a34 <HAL_GetTick>
 8001520:	0003      	movs	r3, r0
 8001522:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001524:	e008      	b.n	8001538 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001526:	f7ff fa85 	bl	8000a34 <HAL_GetTick>
 800152a:	0002      	movs	r2, r0
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d901      	bls.n	8001538 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e202      	b.n	800193e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001538:	4b46      	ldr	r3, [pc, #280]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2202      	movs	r2, #2
 800153e:	4013      	ands	r3, r2
 8001540:	d1f1      	bne.n	8001526 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2208      	movs	r2, #8
 8001548:	4013      	ands	r3, r2
 800154a:	d036      	beq.n	80015ba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	69db      	ldr	r3, [r3, #28]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d019      	beq.n	8001588 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001554:	4b3f      	ldr	r3, [pc, #252]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001556:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001558:	4b3e      	ldr	r3, [pc, #248]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 800155a:	2101      	movs	r1, #1
 800155c:	430a      	orrs	r2, r1
 800155e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001560:	f7ff fa68 	bl	8000a34 <HAL_GetTick>
 8001564:	0003      	movs	r3, r0
 8001566:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001568:	e008      	b.n	800157c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800156a:	f7ff fa63 	bl	8000a34 <HAL_GetTick>
 800156e:	0002      	movs	r2, r0
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e1e0      	b.n	800193e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800157c:	4b35      	ldr	r3, [pc, #212]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 800157e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001580:	2202      	movs	r2, #2
 8001582:	4013      	ands	r3, r2
 8001584:	d0f1      	beq.n	800156a <HAL_RCC_OscConfig+0x242>
 8001586:	e018      	b.n	80015ba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001588:	4b32      	ldr	r3, [pc, #200]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 800158a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800158c:	4b31      	ldr	r3, [pc, #196]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 800158e:	2101      	movs	r1, #1
 8001590:	438a      	bics	r2, r1
 8001592:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001594:	f7ff fa4e 	bl	8000a34 <HAL_GetTick>
 8001598:	0003      	movs	r3, r0
 800159a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800159e:	f7ff fa49 	bl	8000a34 <HAL_GetTick>
 80015a2:	0002      	movs	r2, r0
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e1c6      	b.n	800193e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015b0:	4b28      	ldr	r3, [pc, #160]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80015b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b4:	2202      	movs	r2, #2
 80015b6:	4013      	ands	r3, r2
 80015b8:	d1f1      	bne.n	800159e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2204      	movs	r2, #4
 80015c0:	4013      	ands	r3, r2
 80015c2:	d100      	bne.n	80015c6 <HAL_RCC_OscConfig+0x29e>
 80015c4:	e0b4      	b.n	8001730 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015c6:	201f      	movs	r0, #31
 80015c8:	183b      	adds	r3, r7, r0
 80015ca:	2200      	movs	r2, #0
 80015cc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ce:	4b21      	ldr	r3, [pc, #132]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80015d0:	69da      	ldr	r2, [r3, #28]
 80015d2:	2380      	movs	r3, #128	; 0x80
 80015d4:	055b      	lsls	r3, r3, #21
 80015d6:	4013      	ands	r3, r2
 80015d8:	d110      	bne.n	80015fc <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015da:	4b1e      	ldr	r3, [pc, #120]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80015dc:	69da      	ldr	r2, [r3, #28]
 80015de:	4b1d      	ldr	r3, [pc, #116]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80015e0:	2180      	movs	r1, #128	; 0x80
 80015e2:	0549      	lsls	r1, r1, #21
 80015e4:	430a      	orrs	r2, r1
 80015e6:	61da      	str	r2, [r3, #28]
 80015e8:	4b1a      	ldr	r3, [pc, #104]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80015ea:	69da      	ldr	r2, [r3, #28]
 80015ec:	2380      	movs	r3, #128	; 0x80
 80015ee:	055b      	lsls	r3, r3, #21
 80015f0:	4013      	ands	r3, r2
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80015f6:	183b      	adds	r3, r7, r0
 80015f8:	2201      	movs	r2, #1
 80015fa:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015fc:	4b18      	ldr	r3, [pc, #96]	; (8001660 <HAL_RCC_OscConfig+0x338>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	2380      	movs	r3, #128	; 0x80
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	4013      	ands	r3, r2
 8001606:	d11a      	bne.n	800163e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001608:	4b15      	ldr	r3, [pc, #84]	; (8001660 <HAL_RCC_OscConfig+0x338>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4b14      	ldr	r3, [pc, #80]	; (8001660 <HAL_RCC_OscConfig+0x338>)
 800160e:	2180      	movs	r1, #128	; 0x80
 8001610:	0049      	lsls	r1, r1, #1
 8001612:	430a      	orrs	r2, r1
 8001614:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001616:	f7ff fa0d 	bl	8000a34 <HAL_GetTick>
 800161a:	0003      	movs	r3, r0
 800161c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001620:	f7ff fa08 	bl	8000a34 <HAL_GetTick>
 8001624:	0002      	movs	r2, r0
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b64      	cmp	r3, #100	; 0x64
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e185      	b.n	800193e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001632:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <HAL_RCC_OscConfig+0x338>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	2380      	movs	r3, #128	; 0x80
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	4013      	ands	r3, r2
 800163c:	d0f0      	beq.n	8001620 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d10e      	bne.n	8001664 <HAL_RCC_OscConfig+0x33c>
 8001646:	4b03      	ldr	r3, [pc, #12]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001648:	6a1a      	ldr	r2, [r3, #32]
 800164a:	4b02      	ldr	r3, [pc, #8]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 800164c:	2101      	movs	r1, #1
 800164e:	430a      	orrs	r2, r1
 8001650:	621a      	str	r2, [r3, #32]
 8001652:	e035      	b.n	80016c0 <HAL_RCC_OscConfig+0x398>
 8001654:	40021000 	.word	0x40021000
 8001658:	fffeffff 	.word	0xfffeffff
 800165c:	fffbffff 	.word	0xfffbffff
 8001660:	40007000 	.word	0x40007000
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d10c      	bne.n	8001686 <HAL_RCC_OscConfig+0x35e>
 800166c:	4bb6      	ldr	r3, [pc, #728]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 800166e:	6a1a      	ldr	r2, [r3, #32]
 8001670:	4bb5      	ldr	r3, [pc, #724]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 8001672:	2101      	movs	r1, #1
 8001674:	438a      	bics	r2, r1
 8001676:	621a      	str	r2, [r3, #32]
 8001678:	4bb3      	ldr	r3, [pc, #716]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 800167a:	6a1a      	ldr	r2, [r3, #32]
 800167c:	4bb2      	ldr	r3, [pc, #712]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 800167e:	2104      	movs	r1, #4
 8001680:	438a      	bics	r2, r1
 8001682:	621a      	str	r2, [r3, #32]
 8001684:	e01c      	b.n	80016c0 <HAL_RCC_OscConfig+0x398>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	2b05      	cmp	r3, #5
 800168c:	d10c      	bne.n	80016a8 <HAL_RCC_OscConfig+0x380>
 800168e:	4bae      	ldr	r3, [pc, #696]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 8001690:	6a1a      	ldr	r2, [r3, #32]
 8001692:	4bad      	ldr	r3, [pc, #692]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 8001694:	2104      	movs	r1, #4
 8001696:	430a      	orrs	r2, r1
 8001698:	621a      	str	r2, [r3, #32]
 800169a:	4bab      	ldr	r3, [pc, #684]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 800169c:	6a1a      	ldr	r2, [r3, #32]
 800169e:	4baa      	ldr	r3, [pc, #680]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 80016a0:	2101      	movs	r1, #1
 80016a2:	430a      	orrs	r2, r1
 80016a4:	621a      	str	r2, [r3, #32]
 80016a6:	e00b      	b.n	80016c0 <HAL_RCC_OscConfig+0x398>
 80016a8:	4ba7      	ldr	r3, [pc, #668]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 80016aa:	6a1a      	ldr	r2, [r3, #32]
 80016ac:	4ba6      	ldr	r3, [pc, #664]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 80016ae:	2101      	movs	r1, #1
 80016b0:	438a      	bics	r2, r1
 80016b2:	621a      	str	r2, [r3, #32]
 80016b4:	4ba4      	ldr	r3, [pc, #656]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 80016b6:	6a1a      	ldr	r2, [r3, #32]
 80016b8:	4ba3      	ldr	r3, [pc, #652]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 80016ba:	2104      	movs	r1, #4
 80016bc:	438a      	bics	r2, r1
 80016be:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d014      	beq.n	80016f2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c8:	f7ff f9b4 	bl	8000a34 <HAL_GetTick>
 80016cc:	0003      	movs	r3, r0
 80016ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d0:	e009      	b.n	80016e6 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016d2:	f7ff f9af 	bl	8000a34 <HAL_GetTick>
 80016d6:	0002      	movs	r2, r0
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	4a9b      	ldr	r2, [pc, #620]	; (800194c <HAL_RCC_OscConfig+0x624>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e12b      	b.n	800193e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e6:	4b98      	ldr	r3, [pc, #608]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 80016e8:	6a1b      	ldr	r3, [r3, #32]
 80016ea:	2202      	movs	r2, #2
 80016ec:	4013      	ands	r3, r2
 80016ee:	d0f0      	beq.n	80016d2 <HAL_RCC_OscConfig+0x3aa>
 80016f0:	e013      	b.n	800171a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f2:	f7ff f99f 	bl	8000a34 <HAL_GetTick>
 80016f6:	0003      	movs	r3, r0
 80016f8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016fa:	e009      	b.n	8001710 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016fc:	f7ff f99a 	bl	8000a34 <HAL_GetTick>
 8001700:	0002      	movs	r2, r0
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	4a91      	ldr	r2, [pc, #580]	; (800194c <HAL_RCC_OscConfig+0x624>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e116      	b.n	800193e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001710:	4b8d      	ldr	r3, [pc, #564]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 8001712:	6a1b      	ldr	r3, [r3, #32]
 8001714:	2202      	movs	r2, #2
 8001716:	4013      	ands	r3, r2
 8001718:	d1f0      	bne.n	80016fc <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800171a:	231f      	movs	r3, #31
 800171c:	18fb      	adds	r3, r7, r3
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d105      	bne.n	8001730 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001724:	4b88      	ldr	r3, [pc, #544]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 8001726:	69da      	ldr	r2, [r3, #28]
 8001728:	4b87      	ldr	r3, [pc, #540]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 800172a:	4989      	ldr	r1, [pc, #548]	; (8001950 <HAL_RCC_OscConfig+0x628>)
 800172c:	400a      	ands	r2, r1
 800172e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2210      	movs	r2, #16
 8001736:	4013      	ands	r3, r2
 8001738:	d063      	beq.n	8001802 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	695b      	ldr	r3, [r3, #20]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d12a      	bne.n	8001798 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001742:	4b81      	ldr	r3, [pc, #516]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 8001744:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001746:	4b80      	ldr	r3, [pc, #512]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 8001748:	2104      	movs	r1, #4
 800174a:	430a      	orrs	r2, r1
 800174c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800174e:	4b7e      	ldr	r3, [pc, #504]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 8001750:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001752:	4b7d      	ldr	r3, [pc, #500]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 8001754:	2101      	movs	r1, #1
 8001756:	430a      	orrs	r2, r1
 8001758:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800175a:	f7ff f96b 	bl	8000a34 <HAL_GetTick>
 800175e:	0003      	movs	r3, r0
 8001760:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001764:	f7ff f966 	bl	8000a34 <HAL_GetTick>
 8001768:	0002      	movs	r2, r0
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e0e3      	b.n	800193e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001776:	4b74      	ldr	r3, [pc, #464]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 8001778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800177a:	2202      	movs	r2, #2
 800177c:	4013      	ands	r3, r2
 800177e:	d0f1      	beq.n	8001764 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001780:	4b71      	ldr	r3, [pc, #452]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 8001782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001784:	22f8      	movs	r2, #248	; 0xf8
 8001786:	4393      	bics	r3, r2
 8001788:	0019      	movs	r1, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	00da      	lsls	r2, r3, #3
 8001790:	4b6d      	ldr	r3, [pc, #436]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 8001792:	430a      	orrs	r2, r1
 8001794:	635a      	str	r2, [r3, #52]	; 0x34
 8001796:	e034      	b.n	8001802 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	695b      	ldr	r3, [r3, #20]
 800179c:	3305      	adds	r3, #5
 800179e:	d111      	bne.n	80017c4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80017a0:	4b69      	ldr	r3, [pc, #420]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 80017a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017a4:	4b68      	ldr	r3, [pc, #416]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 80017a6:	2104      	movs	r1, #4
 80017a8:	438a      	bics	r2, r1
 80017aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80017ac:	4b66      	ldr	r3, [pc, #408]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 80017ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017b0:	22f8      	movs	r2, #248	; 0xf8
 80017b2:	4393      	bics	r3, r2
 80017b4:	0019      	movs	r1, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	00da      	lsls	r2, r3, #3
 80017bc:	4b62      	ldr	r3, [pc, #392]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 80017be:	430a      	orrs	r2, r1
 80017c0:	635a      	str	r2, [r3, #52]	; 0x34
 80017c2:	e01e      	b.n	8001802 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80017c4:	4b60      	ldr	r3, [pc, #384]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 80017c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017c8:	4b5f      	ldr	r3, [pc, #380]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 80017ca:	2104      	movs	r1, #4
 80017cc:	430a      	orrs	r2, r1
 80017ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80017d0:	4b5d      	ldr	r3, [pc, #372]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 80017d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017d4:	4b5c      	ldr	r3, [pc, #368]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 80017d6:	2101      	movs	r1, #1
 80017d8:	438a      	bics	r2, r1
 80017da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017dc:	f7ff f92a 	bl	8000a34 <HAL_GetTick>
 80017e0:	0003      	movs	r3, r0
 80017e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80017e6:	f7ff f925 	bl	8000a34 <HAL_GetTick>
 80017ea:	0002      	movs	r2, r0
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e0a2      	b.n	800193e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80017f8:	4b53      	ldr	r3, [pc, #332]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 80017fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017fc:	2202      	movs	r2, #2
 80017fe:	4013      	ands	r3, r2
 8001800:	d1f1      	bne.n	80017e6 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a1b      	ldr	r3, [r3, #32]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d100      	bne.n	800180c <HAL_RCC_OscConfig+0x4e4>
 800180a:	e097      	b.n	800193c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800180c:	4b4e      	ldr	r3, [pc, #312]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	220c      	movs	r2, #12
 8001812:	4013      	ands	r3, r2
 8001814:	2b08      	cmp	r3, #8
 8001816:	d100      	bne.n	800181a <HAL_RCC_OscConfig+0x4f2>
 8001818:	e06b      	b.n	80018f2 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a1b      	ldr	r3, [r3, #32]
 800181e:	2b02      	cmp	r3, #2
 8001820:	d14c      	bne.n	80018bc <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001822:	4b49      	ldr	r3, [pc, #292]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	4b48      	ldr	r3, [pc, #288]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 8001828:	494a      	ldr	r1, [pc, #296]	; (8001954 <HAL_RCC_OscConfig+0x62c>)
 800182a:	400a      	ands	r2, r1
 800182c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182e:	f7ff f901 	bl	8000a34 <HAL_GetTick>
 8001832:	0003      	movs	r3, r0
 8001834:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001838:	f7ff f8fc 	bl	8000a34 <HAL_GetTick>
 800183c:	0002      	movs	r2, r0
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e079      	b.n	800193e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800184a:	4b3f      	ldr	r3, [pc, #252]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	2380      	movs	r3, #128	; 0x80
 8001850:	049b      	lsls	r3, r3, #18
 8001852:	4013      	ands	r3, r2
 8001854:	d1f0      	bne.n	8001838 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001856:	4b3c      	ldr	r3, [pc, #240]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 8001858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185a:	220f      	movs	r2, #15
 800185c:	4393      	bics	r3, r2
 800185e:	0019      	movs	r1, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001864:	4b38      	ldr	r3, [pc, #224]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 8001866:	430a      	orrs	r2, r1
 8001868:	62da      	str	r2, [r3, #44]	; 0x2c
 800186a:	4b37      	ldr	r3, [pc, #220]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	4a3a      	ldr	r2, [pc, #232]	; (8001958 <HAL_RCC_OscConfig+0x630>)
 8001870:	4013      	ands	r3, r2
 8001872:	0019      	movs	r1, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187c:	431a      	orrs	r2, r3
 800187e:	4b32      	ldr	r3, [pc, #200]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 8001880:	430a      	orrs	r2, r1
 8001882:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001884:	4b30      	ldr	r3, [pc, #192]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4b2f      	ldr	r3, [pc, #188]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 800188a:	2180      	movs	r1, #128	; 0x80
 800188c:	0449      	lsls	r1, r1, #17
 800188e:	430a      	orrs	r2, r1
 8001890:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001892:	f7ff f8cf 	bl	8000a34 <HAL_GetTick>
 8001896:	0003      	movs	r3, r0
 8001898:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800189c:	f7ff f8ca 	bl	8000a34 <HAL_GetTick>
 80018a0:	0002      	movs	r2, r0
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e047      	b.n	800193e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018ae:	4b26      	ldr	r3, [pc, #152]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	2380      	movs	r3, #128	; 0x80
 80018b4:	049b      	lsls	r3, r3, #18
 80018b6:	4013      	ands	r3, r2
 80018b8:	d0f0      	beq.n	800189c <HAL_RCC_OscConfig+0x574>
 80018ba:	e03f      	b.n	800193c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018bc:	4b22      	ldr	r3, [pc, #136]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	4b21      	ldr	r3, [pc, #132]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 80018c2:	4924      	ldr	r1, [pc, #144]	; (8001954 <HAL_RCC_OscConfig+0x62c>)
 80018c4:	400a      	ands	r2, r1
 80018c6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c8:	f7ff f8b4 	bl	8000a34 <HAL_GetTick>
 80018cc:	0003      	movs	r3, r0
 80018ce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018d0:	e008      	b.n	80018e4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018d2:	f7ff f8af 	bl	8000a34 <HAL_GetTick>
 80018d6:	0002      	movs	r2, r0
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e02c      	b.n	800193e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018e4:	4b18      	ldr	r3, [pc, #96]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	2380      	movs	r3, #128	; 0x80
 80018ea:	049b      	lsls	r3, r3, #18
 80018ec:	4013      	ands	r3, r2
 80018ee:	d1f0      	bne.n	80018d2 <HAL_RCC_OscConfig+0x5aa>
 80018f0:	e024      	b.n	800193c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a1b      	ldr	r3, [r3, #32]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d101      	bne.n	80018fe <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e01f      	b.n	800193e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80018fe:	4b12      	ldr	r3, [pc, #72]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001904:	4b10      	ldr	r3, [pc, #64]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 8001906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001908:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800190a:	697a      	ldr	r2, [r7, #20]
 800190c:	2380      	movs	r3, #128	; 0x80
 800190e:	025b      	lsls	r3, r3, #9
 8001910:	401a      	ands	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001916:	429a      	cmp	r2, r3
 8001918:	d10e      	bne.n	8001938 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	220f      	movs	r2, #15
 800191e:	401a      	ands	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001924:	429a      	cmp	r2, r3
 8001926:	d107      	bne.n	8001938 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001928:	697a      	ldr	r2, [r7, #20]
 800192a:	23f0      	movs	r3, #240	; 0xf0
 800192c:	039b      	lsls	r3, r3, #14
 800192e:	401a      	ands	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001934:	429a      	cmp	r2, r3
 8001936:	d001      	beq.n	800193c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e000      	b.n	800193e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	0018      	movs	r0, r3
 8001940:	46bd      	mov	sp, r7
 8001942:	b008      	add	sp, #32
 8001944:	bd80      	pop	{r7, pc}
 8001946:	46c0      	nop			; (mov r8, r8)
 8001948:	40021000 	.word	0x40021000
 800194c:	00001388 	.word	0x00001388
 8001950:	efffffff 	.word	0xefffffff
 8001954:	feffffff 	.word	0xfeffffff
 8001958:	ffc2ffff 	.word	0xffc2ffff

0800195c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d101      	bne.n	8001970 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e0b3      	b.n	8001ad8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001970:	4b5b      	ldr	r3, [pc, #364]	; (8001ae0 <HAL_RCC_ClockConfig+0x184>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2201      	movs	r2, #1
 8001976:	4013      	ands	r3, r2
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	429a      	cmp	r2, r3
 800197c:	d911      	bls.n	80019a2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800197e:	4b58      	ldr	r3, [pc, #352]	; (8001ae0 <HAL_RCC_ClockConfig+0x184>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2201      	movs	r2, #1
 8001984:	4393      	bics	r3, r2
 8001986:	0019      	movs	r1, r3
 8001988:	4b55      	ldr	r3, [pc, #340]	; (8001ae0 <HAL_RCC_ClockConfig+0x184>)
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	430a      	orrs	r2, r1
 800198e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001990:	4b53      	ldr	r3, [pc, #332]	; (8001ae0 <HAL_RCC_ClockConfig+0x184>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2201      	movs	r2, #1
 8001996:	4013      	ands	r3, r2
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	429a      	cmp	r2, r3
 800199c:	d001      	beq.n	80019a2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e09a      	b.n	8001ad8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2202      	movs	r2, #2
 80019a8:	4013      	ands	r3, r2
 80019aa:	d015      	beq.n	80019d8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2204      	movs	r2, #4
 80019b2:	4013      	ands	r3, r2
 80019b4:	d006      	beq.n	80019c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80019b6:	4b4b      	ldr	r3, [pc, #300]	; (8001ae4 <HAL_RCC_ClockConfig+0x188>)
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	4b4a      	ldr	r3, [pc, #296]	; (8001ae4 <HAL_RCC_ClockConfig+0x188>)
 80019bc:	21e0      	movs	r1, #224	; 0xe0
 80019be:	00c9      	lsls	r1, r1, #3
 80019c0:	430a      	orrs	r2, r1
 80019c2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019c4:	4b47      	ldr	r3, [pc, #284]	; (8001ae4 <HAL_RCC_ClockConfig+0x188>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	22f0      	movs	r2, #240	; 0xf0
 80019ca:	4393      	bics	r3, r2
 80019cc:	0019      	movs	r1, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	689a      	ldr	r2, [r3, #8]
 80019d2:	4b44      	ldr	r3, [pc, #272]	; (8001ae4 <HAL_RCC_ClockConfig+0x188>)
 80019d4:	430a      	orrs	r2, r1
 80019d6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2201      	movs	r2, #1
 80019de:	4013      	ands	r3, r2
 80019e0:	d040      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d107      	bne.n	80019fa <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ea:	4b3e      	ldr	r3, [pc, #248]	; (8001ae4 <HAL_RCC_ClockConfig+0x188>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	2380      	movs	r3, #128	; 0x80
 80019f0:	029b      	lsls	r3, r3, #10
 80019f2:	4013      	ands	r3, r2
 80019f4:	d114      	bne.n	8001a20 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e06e      	b.n	8001ad8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d107      	bne.n	8001a12 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a02:	4b38      	ldr	r3, [pc, #224]	; (8001ae4 <HAL_RCC_ClockConfig+0x188>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	2380      	movs	r3, #128	; 0x80
 8001a08:	049b      	lsls	r3, r3, #18
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	d108      	bne.n	8001a20 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e062      	b.n	8001ad8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a12:	4b34      	ldr	r3, [pc, #208]	; (8001ae4 <HAL_RCC_ClockConfig+0x188>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2202      	movs	r2, #2
 8001a18:	4013      	ands	r3, r2
 8001a1a:	d101      	bne.n	8001a20 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e05b      	b.n	8001ad8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a20:	4b30      	ldr	r3, [pc, #192]	; (8001ae4 <HAL_RCC_ClockConfig+0x188>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	2203      	movs	r2, #3
 8001a26:	4393      	bics	r3, r2
 8001a28:	0019      	movs	r1, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	4b2d      	ldr	r3, [pc, #180]	; (8001ae4 <HAL_RCC_ClockConfig+0x188>)
 8001a30:	430a      	orrs	r2, r1
 8001a32:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a34:	f7fe fffe 	bl	8000a34 <HAL_GetTick>
 8001a38:	0003      	movs	r3, r0
 8001a3a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a3c:	e009      	b.n	8001a52 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a3e:	f7fe fff9 	bl	8000a34 <HAL_GetTick>
 8001a42:	0002      	movs	r2, r0
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	4a27      	ldr	r2, [pc, #156]	; (8001ae8 <HAL_RCC_ClockConfig+0x18c>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e042      	b.n	8001ad8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a52:	4b24      	ldr	r3, [pc, #144]	; (8001ae4 <HAL_RCC_ClockConfig+0x188>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	220c      	movs	r2, #12
 8001a58:	401a      	ands	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d1ec      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a64:	4b1e      	ldr	r3, [pc, #120]	; (8001ae0 <HAL_RCC_ClockConfig+0x184>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d211      	bcs.n	8001a96 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a72:	4b1b      	ldr	r3, [pc, #108]	; (8001ae0 <HAL_RCC_ClockConfig+0x184>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2201      	movs	r2, #1
 8001a78:	4393      	bics	r3, r2
 8001a7a:	0019      	movs	r1, r3
 8001a7c:	4b18      	ldr	r3, [pc, #96]	; (8001ae0 <HAL_RCC_ClockConfig+0x184>)
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	430a      	orrs	r2, r1
 8001a82:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a84:	4b16      	ldr	r3, [pc, #88]	; (8001ae0 <HAL_RCC_ClockConfig+0x184>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d001      	beq.n	8001a96 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e020      	b.n	8001ad8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2204      	movs	r2, #4
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	d009      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001aa0:	4b10      	ldr	r3, [pc, #64]	; (8001ae4 <HAL_RCC_ClockConfig+0x188>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	4a11      	ldr	r2, [pc, #68]	; (8001aec <HAL_RCC_ClockConfig+0x190>)
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	0019      	movs	r1, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	68da      	ldr	r2, [r3, #12]
 8001aae:	4b0d      	ldr	r3, [pc, #52]	; (8001ae4 <HAL_RCC_ClockConfig+0x188>)
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001ab4:	f000 f820 	bl	8001af8 <HAL_RCC_GetSysClockFreq>
 8001ab8:	0001      	movs	r1, r0
 8001aba:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <HAL_RCC_ClockConfig+0x188>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	091b      	lsrs	r3, r3, #4
 8001ac0:	220f      	movs	r2, #15
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	4a0a      	ldr	r2, [pc, #40]	; (8001af0 <HAL_RCC_ClockConfig+0x194>)
 8001ac6:	5cd3      	ldrb	r3, [r2, r3]
 8001ac8:	000a      	movs	r2, r1
 8001aca:	40da      	lsrs	r2, r3
 8001acc:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <HAL_RCC_ClockConfig+0x198>)
 8001ace:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ad0:	2000      	movs	r0, #0
 8001ad2:	f7fe ff69 	bl	80009a8 <HAL_InitTick>
  
  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	0018      	movs	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	b004      	add	sp, #16
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40022000 	.word	0x40022000
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	00001388 	.word	0x00001388
 8001aec:	fffff8ff 	.word	0xfffff8ff
 8001af0:	08002c44 	.word	0x08002c44
 8001af4:	20000608 	.word	0x20000608

08001af8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001af8:	b590      	push	{r4, r7, lr}
 8001afa:	b08f      	sub	sp, #60	; 0x3c
 8001afc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001afe:	2314      	movs	r3, #20
 8001b00:	18fb      	adds	r3, r7, r3
 8001b02:	4a2b      	ldr	r2, [pc, #172]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b04:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001b06:	c313      	stmia	r3!, {r0, r1, r4}
 8001b08:	6812      	ldr	r2, [r2, #0]
 8001b0a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001b0c:	1d3b      	adds	r3, r7, #4
 8001b0e:	4a29      	ldr	r2, [pc, #164]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b10:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001b12:	c313      	stmia	r3!, {r0, r1, r4}
 8001b14:	6812      	ldr	r2, [r2, #0]
 8001b16:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b20:	2300      	movs	r3, #0
 8001b22:	637b      	str	r3, [r7, #52]	; 0x34
 8001b24:	2300      	movs	r3, #0
 8001b26:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001b2c:	4b22      	ldr	r3, [pc, #136]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b34:	220c      	movs	r2, #12
 8001b36:	4013      	ands	r3, r2
 8001b38:	2b04      	cmp	r3, #4
 8001b3a:	d002      	beq.n	8001b42 <HAL_RCC_GetSysClockFreq+0x4a>
 8001b3c:	2b08      	cmp	r3, #8
 8001b3e:	d003      	beq.n	8001b48 <HAL_RCC_GetSysClockFreq+0x50>
 8001b40:	e02d      	b.n	8001b9e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b42:	4b1e      	ldr	r3, [pc, #120]	; (8001bbc <HAL_RCC_GetSysClockFreq+0xc4>)
 8001b44:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b46:	e02d      	b.n	8001ba4 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b4a:	0c9b      	lsrs	r3, r3, #18
 8001b4c:	220f      	movs	r2, #15
 8001b4e:	4013      	ands	r3, r2
 8001b50:	2214      	movs	r2, #20
 8001b52:	18ba      	adds	r2, r7, r2
 8001b54:	5cd3      	ldrb	r3, [r2, r3]
 8001b56:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001b58:	4b17      	ldr	r3, [pc, #92]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5c:	220f      	movs	r2, #15
 8001b5e:	4013      	ands	r3, r2
 8001b60:	1d3a      	adds	r2, r7, #4
 8001b62:	5cd3      	ldrb	r3, [r2, r3]
 8001b64:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001b66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b68:	2380      	movs	r3, #128	; 0x80
 8001b6a:	025b      	lsls	r3, r3, #9
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	d009      	beq.n	8001b84 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b72:	4812      	ldr	r0, [pc, #72]	; (8001bbc <HAL_RCC_GetSysClockFreq+0xc4>)
 8001b74:	f7fe fac8 	bl	8000108 <__udivsi3>
 8001b78:	0003      	movs	r3, r0
 8001b7a:	001a      	movs	r2, r3
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7e:	4353      	muls	r3, r2
 8001b80:	637b      	str	r3, [r7, #52]	; 0x34
 8001b82:	e009      	b.n	8001b98 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001b84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b86:	000a      	movs	r2, r1
 8001b88:	0152      	lsls	r2, r2, #5
 8001b8a:	1a52      	subs	r2, r2, r1
 8001b8c:	0193      	lsls	r3, r2, #6
 8001b8e:	1a9b      	subs	r3, r3, r2
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	185b      	adds	r3, r3, r1
 8001b94:	021b      	lsls	r3, r3, #8
 8001b96:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b9a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b9c:	e002      	b.n	8001ba4 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b9e:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ba0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ba2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001ba6:	0018      	movs	r0, r3
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	b00f      	add	sp, #60	; 0x3c
 8001bac:	bd90      	pop	{r4, r7, pc}
 8001bae:	46c0      	nop			; (mov r8, r8)
 8001bb0:	08002c24 	.word	0x08002c24
 8001bb4:	08002c34 	.word	0x08002c34
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	007a1200 	.word	0x007a1200

08001bc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e042      	b.n	8001c58 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	223d      	movs	r2, #61	; 0x3d
 8001bd6:	5c9b      	ldrb	r3, [r3, r2]
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d107      	bne.n	8001bee <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	223c      	movs	r2, #60	; 0x3c
 8001be2:	2100      	movs	r1, #0
 8001be4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	0018      	movs	r0, r3
 8001bea:	f7fe fddb 	bl	80007a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	223d      	movs	r2, #61	; 0x3d
 8001bf2:	2102      	movs	r1, #2
 8001bf4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	0019      	movs	r1, r3
 8001c00:	0010      	movs	r0, r2
 8001c02:	f000 fc3f 	bl	8002484 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2246      	movs	r2, #70	; 0x46
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	223e      	movs	r2, #62	; 0x3e
 8001c12:	2101      	movs	r1, #1
 8001c14:	5499      	strb	r1, [r3, r2]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	223f      	movs	r2, #63	; 0x3f
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	5499      	strb	r1, [r3, r2]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2240      	movs	r2, #64	; 0x40
 8001c22:	2101      	movs	r1, #1
 8001c24:	5499      	strb	r1, [r3, r2]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2241      	movs	r2, #65	; 0x41
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2242      	movs	r2, #66	; 0x42
 8001c32:	2101      	movs	r1, #1
 8001c34:	5499      	strb	r1, [r3, r2]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2243      	movs	r2, #67	; 0x43
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	5499      	strb	r1, [r3, r2]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2244      	movs	r2, #68	; 0x44
 8001c42:	2101      	movs	r1, #1
 8001c44:	5499      	strb	r1, [r3, r2]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2245      	movs	r2, #69	; 0x45
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	223d      	movs	r2, #61	; 0x3d
 8001c52:	2101      	movs	r1, #1
 8001c54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	0018      	movs	r0, r3
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	b002      	add	sp, #8
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e042      	b.n	8001cf8 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	223d      	movs	r2, #61	; 0x3d
 8001c76:	5c9b      	ldrb	r3, [r3, r2]
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d107      	bne.n	8001c8e <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	223c      	movs	r2, #60	; 0x3c
 8001c82:	2100      	movs	r1, #0
 8001c84:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	0018      	movs	r0, r3
 8001c8a:	f000 f839 	bl	8001d00 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	223d      	movs	r2, #61	; 0x3d
 8001c92:	2102      	movs	r1, #2
 8001c94:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3304      	adds	r3, #4
 8001c9e:	0019      	movs	r1, r3
 8001ca0:	0010      	movs	r0, r2
 8001ca2:	f000 fbef 	bl	8002484 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2246      	movs	r2, #70	; 0x46
 8001caa:	2101      	movs	r1, #1
 8001cac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	223e      	movs	r2, #62	; 0x3e
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	5499      	strb	r1, [r3, r2]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	223f      	movs	r2, #63	; 0x3f
 8001cba:	2101      	movs	r1, #1
 8001cbc:	5499      	strb	r1, [r3, r2]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2240      	movs	r2, #64	; 0x40
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	5499      	strb	r1, [r3, r2]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2241      	movs	r2, #65	; 0x41
 8001cca:	2101      	movs	r1, #1
 8001ccc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2242      	movs	r2, #66	; 0x42
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	5499      	strb	r1, [r3, r2]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2243      	movs	r2, #67	; 0x43
 8001cda:	2101      	movs	r1, #1
 8001cdc:	5499      	strb	r1, [r3, r2]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2244      	movs	r2, #68	; 0x44
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	5499      	strb	r1, [r3, r2]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2245      	movs	r2, #69	; 0x45
 8001cea:	2101      	movs	r1, #1
 8001cec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	223d      	movs	r2, #61	; 0x3d
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	0018      	movs	r0, r3
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	b002      	add	sp, #8
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8001d08:	46c0      	nop			; (mov r8, r8)
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	b002      	add	sp, #8
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d108      	bne.n	8001d32 <HAL_TIM_OC_Start+0x22>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	223e      	movs	r2, #62	; 0x3e
 8001d24:	5c9b      	ldrb	r3, [r3, r2]
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	1e5a      	subs	r2, r3, #1
 8001d2c:	4193      	sbcs	r3, r2
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	e01f      	b.n	8001d72 <HAL_TIM_OC_Start+0x62>
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	2b04      	cmp	r3, #4
 8001d36:	d108      	bne.n	8001d4a <HAL_TIM_OC_Start+0x3a>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	223f      	movs	r2, #63	; 0x3f
 8001d3c:	5c9b      	ldrb	r3, [r3, r2]
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	3b01      	subs	r3, #1
 8001d42:	1e5a      	subs	r2, r3, #1
 8001d44:	4193      	sbcs	r3, r2
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	e013      	b.n	8001d72 <HAL_TIM_OC_Start+0x62>
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	2b08      	cmp	r3, #8
 8001d4e:	d108      	bne.n	8001d62 <HAL_TIM_OC_Start+0x52>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2240      	movs	r2, #64	; 0x40
 8001d54:	5c9b      	ldrb	r3, [r3, r2]
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	1e5a      	subs	r2, r3, #1
 8001d5c:	4193      	sbcs	r3, r2
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	e007      	b.n	8001d72 <HAL_TIM_OC_Start+0x62>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2241      	movs	r2, #65	; 0x41
 8001d66:	5c9b      	ldrb	r3, [r3, r2]
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	1e5a      	subs	r2, r3, #1
 8001d6e:	4193      	sbcs	r3, r2
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <HAL_TIM_OC_Start+0x6a>
  {
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e074      	b.n	8001e64 <HAL_TIM_OC_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d104      	bne.n	8001d8a <HAL_TIM_OC_Start+0x7a>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	223e      	movs	r2, #62	; 0x3e
 8001d84:	2102      	movs	r1, #2
 8001d86:	5499      	strb	r1, [r3, r2]
 8001d88:	e013      	b.n	8001db2 <HAL_TIM_OC_Start+0xa2>
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	2b04      	cmp	r3, #4
 8001d8e:	d104      	bne.n	8001d9a <HAL_TIM_OC_Start+0x8a>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	223f      	movs	r2, #63	; 0x3f
 8001d94:	2102      	movs	r1, #2
 8001d96:	5499      	strb	r1, [r3, r2]
 8001d98:	e00b      	b.n	8001db2 <HAL_TIM_OC_Start+0xa2>
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	2b08      	cmp	r3, #8
 8001d9e:	d104      	bne.n	8001daa <HAL_TIM_OC_Start+0x9a>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2240      	movs	r2, #64	; 0x40
 8001da4:	2102      	movs	r1, #2
 8001da6:	5499      	strb	r1, [r3, r2]
 8001da8:	e003      	b.n	8001db2 <HAL_TIM_OC_Start+0xa2>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2241      	movs	r2, #65	; 0x41
 8001dae:	2102      	movs	r1, #2
 8001db0:	5499      	strb	r1, [r3, r2]

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	6839      	ldr	r1, [r7, #0]
 8001db8:	2201      	movs	r2, #1
 8001dba:	0018      	movs	r0, r3
 8001dbc:	f000 fe78 	bl	8002ab0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a29      	ldr	r2, [pc, #164]	; (8001e6c <HAL_TIM_OC_Start+0x15c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d00e      	beq.n	8001de8 <HAL_TIM_OC_Start+0xd8>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a28      	ldr	r2, [pc, #160]	; (8001e70 <HAL_TIM_OC_Start+0x160>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d009      	beq.n	8001de8 <HAL_TIM_OC_Start+0xd8>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a26      	ldr	r2, [pc, #152]	; (8001e74 <HAL_TIM_OC_Start+0x164>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d004      	beq.n	8001de8 <HAL_TIM_OC_Start+0xd8>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a25      	ldr	r2, [pc, #148]	; (8001e78 <HAL_TIM_OC_Start+0x168>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d101      	bne.n	8001dec <HAL_TIM_OC_Start+0xdc>
 8001de8:	2301      	movs	r3, #1
 8001dea:	e000      	b.n	8001dee <HAL_TIM_OC_Start+0xde>
 8001dec:	2300      	movs	r3, #0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d008      	beq.n	8001e04 <HAL_TIM_OC_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2180      	movs	r1, #128	; 0x80
 8001dfe:	0209      	lsls	r1, r1, #8
 8001e00:	430a      	orrs	r2, r1
 8001e02:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a18      	ldr	r2, [pc, #96]	; (8001e6c <HAL_TIM_OC_Start+0x15c>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d00f      	beq.n	8001e2e <HAL_TIM_OC_Start+0x11e>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	2380      	movs	r3, #128	; 0x80
 8001e14:	05db      	lsls	r3, r3, #23
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d009      	beq.n	8001e2e <HAL_TIM_OC_Start+0x11e>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a17      	ldr	r2, [pc, #92]	; (8001e7c <HAL_TIM_OC_Start+0x16c>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d004      	beq.n	8001e2e <HAL_TIM_OC_Start+0x11e>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a11      	ldr	r2, [pc, #68]	; (8001e70 <HAL_TIM_OC_Start+0x160>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d111      	bne.n	8001e52 <HAL_TIM_OC_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	2207      	movs	r2, #7
 8001e36:	4013      	ands	r3, r2
 8001e38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2b06      	cmp	r3, #6
 8001e3e:	d010      	beq.n	8001e62 <HAL_TIM_OC_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e50:	e007      	b.n	8001e62 <HAL_TIM_OC_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	0018      	movs	r0, r3
 8001e66:	46bd      	mov	sp, r7
 8001e68:	b004      	add	sp, #16
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40012c00 	.word	0x40012c00
 8001e70:	40014000 	.word	0x40014000
 8001e74:	40014400 	.word	0x40014400
 8001e78:	40014800 	.word	0x40014800
 8001e7c:	40000400 	.word	0x40000400

08001e80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e042      	b.n	8001f18 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	223d      	movs	r2, #61	; 0x3d
 8001e96:	5c9b      	ldrb	r3, [r3, r2]
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d107      	bne.n	8001eae <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	223c      	movs	r2, #60	; 0x3c
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	f000 f839 	bl	8001f20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	223d      	movs	r2, #61	; 0x3d
 8001eb2:	2102      	movs	r1, #2
 8001eb4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	3304      	adds	r3, #4
 8001ebe:	0019      	movs	r1, r3
 8001ec0:	0010      	movs	r0, r2
 8001ec2:	f000 fadf 	bl	8002484 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2246      	movs	r2, #70	; 0x46
 8001eca:	2101      	movs	r1, #1
 8001ecc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	223e      	movs	r2, #62	; 0x3e
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	5499      	strb	r1, [r3, r2]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	223f      	movs	r2, #63	; 0x3f
 8001eda:	2101      	movs	r1, #1
 8001edc:	5499      	strb	r1, [r3, r2]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2240      	movs	r2, #64	; 0x40
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	5499      	strb	r1, [r3, r2]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2241      	movs	r2, #65	; 0x41
 8001eea:	2101      	movs	r1, #1
 8001eec:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2242      	movs	r2, #66	; 0x42
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	5499      	strb	r1, [r3, r2]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2243      	movs	r2, #67	; 0x43
 8001efa:	2101      	movs	r1, #1
 8001efc:	5499      	strb	r1, [r3, r2]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2244      	movs	r2, #68	; 0x44
 8001f02:	2101      	movs	r1, #1
 8001f04:	5499      	strb	r1, [r3, r2]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2245      	movs	r2, #69	; 0x45
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	223d      	movs	r2, #61	; 0x3d
 8001f12:	2101      	movs	r1, #1
 8001f14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	0018      	movs	r0, r3
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	b002      	add	sp, #8
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001f28:	46c0      	nop			; (mov r8, r8)
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	b002      	add	sp, #8
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d108      	bne.n	8001f52 <HAL_TIM_PWM_Start+0x22>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	223e      	movs	r2, #62	; 0x3e
 8001f44:	5c9b      	ldrb	r3, [r3, r2]
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	1e5a      	subs	r2, r3, #1
 8001f4c:	4193      	sbcs	r3, r2
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	e01f      	b.n	8001f92 <HAL_TIM_PWM_Start+0x62>
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	2b04      	cmp	r3, #4
 8001f56:	d108      	bne.n	8001f6a <HAL_TIM_PWM_Start+0x3a>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	223f      	movs	r2, #63	; 0x3f
 8001f5c:	5c9b      	ldrb	r3, [r3, r2]
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	3b01      	subs	r3, #1
 8001f62:	1e5a      	subs	r2, r3, #1
 8001f64:	4193      	sbcs	r3, r2
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	e013      	b.n	8001f92 <HAL_TIM_PWM_Start+0x62>
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	2b08      	cmp	r3, #8
 8001f6e:	d108      	bne.n	8001f82 <HAL_TIM_PWM_Start+0x52>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2240      	movs	r2, #64	; 0x40
 8001f74:	5c9b      	ldrb	r3, [r3, r2]
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	1e5a      	subs	r2, r3, #1
 8001f7c:	4193      	sbcs	r3, r2
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	e007      	b.n	8001f92 <HAL_TIM_PWM_Start+0x62>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2241      	movs	r2, #65	; 0x41
 8001f86:	5c9b      	ldrb	r3, [r3, r2]
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	1e5a      	subs	r2, r3, #1
 8001f8e:	4193      	sbcs	r3, r2
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e074      	b.n	8002084 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d104      	bne.n	8001faa <HAL_TIM_PWM_Start+0x7a>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	223e      	movs	r2, #62	; 0x3e
 8001fa4:	2102      	movs	r1, #2
 8001fa6:	5499      	strb	r1, [r3, r2]
 8001fa8:	e013      	b.n	8001fd2 <HAL_TIM_PWM_Start+0xa2>
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	2b04      	cmp	r3, #4
 8001fae:	d104      	bne.n	8001fba <HAL_TIM_PWM_Start+0x8a>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	223f      	movs	r2, #63	; 0x3f
 8001fb4:	2102      	movs	r1, #2
 8001fb6:	5499      	strb	r1, [r3, r2]
 8001fb8:	e00b      	b.n	8001fd2 <HAL_TIM_PWM_Start+0xa2>
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	2b08      	cmp	r3, #8
 8001fbe:	d104      	bne.n	8001fca <HAL_TIM_PWM_Start+0x9a>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2240      	movs	r2, #64	; 0x40
 8001fc4:	2102      	movs	r1, #2
 8001fc6:	5499      	strb	r1, [r3, r2]
 8001fc8:	e003      	b.n	8001fd2 <HAL_TIM_PWM_Start+0xa2>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2241      	movs	r2, #65	; 0x41
 8001fce:	2102      	movs	r1, #2
 8001fd0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6839      	ldr	r1, [r7, #0]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	0018      	movs	r0, r3
 8001fdc:	f000 fd68 	bl	8002ab0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a29      	ldr	r2, [pc, #164]	; (800208c <HAL_TIM_PWM_Start+0x15c>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d00e      	beq.n	8002008 <HAL_TIM_PWM_Start+0xd8>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a28      	ldr	r2, [pc, #160]	; (8002090 <HAL_TIM_PWM_Start+0x160>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d009      	beq.n	8002008 <HAL_TIM_PWM_Start+0xd8>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a26      	ldr	r2, [pc, #152]	; (8002094 <HAL_TIM_PWM_Start+0x164>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d004      	beq.n	8002008 <HAL_TIM_PWM_Start+0xd8>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a25      	ldr	r2, [pc, #148]	; (8002098 <HAL_TIM_PWM_Start+0x168>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d101      	bne.n	800200c <HAL_TIM_PWM_Start+0xdc>
 8002008:	2301      	movs	r3, #1
 800200a:	e000      	b.n	800200e <HAL_TIM_PWM_Start+0xde>
 800200c:	2300      	movs	r3, #0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d008      	beq.n	8002024 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2180      	movs	r1, #128	; 0x80
 800201e:	0209      	lsls	r1, r1, #8
 8002020:	430a      	orrs	r2, r1
 8002022:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a18      	ldr	r2, [pc, #96]	; (800208c <HAL_TIM_PWM_Start+0x15c>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d00f      	beq.n	800204e <HAL_TIM_PWM_Start+0x11e>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	2380      	movs	r3, #128	; 0x80
 8002034:	05db      	lsls	r3, r3, #23
 8002036:	429a      	cmp	r2, r3
 8002038:	d009      	beq.n	800204e <HAL_TIM_PWM_Start+0x11e>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a17      	ldr	r2, [pc, #92]	; (800209c <HAL_TIM_PWM_Start+0x16c>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d004      	beq.n	800204e <HAL_TIM_PWM_Start+0x11e>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a11      	ldr	r2, [pc, #68]	; (8002090 <HAL_TIM_PWM_Start+0x160>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d111      	bne.n	8002072 <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	2207      	movs	r2, #7
 8002056:	4013      	ands	r3, r2
 8002058:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2b06      	cmp	r3, #6
 800205e:	d010      	beq.n	8002082 <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2101      	movs	r1, #1
 800206c:	430a      	orrs	r2, r1
 800206e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002070:	e007      	b.n	8002082 <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2101      	movs	r1, #1
 800207e:	430a      	orrs	r2, r1
 8002080:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	0018      	movs	r0, r3
 8002086:	46bd      	mov	sp, r7
 8002088:	b004      	add	sp, #16
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40012c00 	.word	0x40012c00
 8002090:	40014000 	.word	0x40014000
 8002094:	40014400 	.word	0x40014400
 8002098:	40014800 	.word	0x40014800
 800209c:	40000400 	.word	0x40000400

080020a0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020ac:	2317      	movs	r3, #23
 80020ae:	18fb      	adds	r3, r7, r3
 80020b0:	2200      	movs	r2, #0
 80020b2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	223c      	movs	r2, #60	; 0x3c
 80020b8:	5c9b      	ldrb	r3, [r3, r2]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d101      	bne.n	80020c2 <HAL_TIM_OC_ConfigChannel+0x22>
 80020be:	2302      	movs	r3, #2
 80020c0:	e042      	b.n	8002148 <HAL_TIM_OC_ConfigChannel+0xa8>
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	223c      	movs	r2, #60	; 0x3c
 80020c6:	2101      	movs	r1, #1
 80020c8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2b0c      	cmp	r3, #12
 80020ce:	d027      	beq.n	8002120 <HAL_TIM_OC_ConfigChannel+0x80>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2b0c      	cmp	r3, #12
 80020d4:	d82c      	bhi.n	8002130 <HAL_TIM_OC_ConfigChannel+0x90>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2b08      	cmp	r3, #8
 80020da:	d019      	beq.n	8002110 <HAL_TIM_OC_ConfigChannel+0x70>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2b08      	cmp	r3, #8
 80020e0:	d826      	bhi.n	8002130 <HAL_TIM_OC_ConfigChannel+0x90>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <HAL_TIM_OC_ConfigChannel+0x50>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	d008      	beq.n	8002100 <HAL_TIM_OC_ConfigChannel+0x60>
 80020ee:	e01f      	b.n	8002130 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68ba      	ldr	r2, [r7, #8]
 80020f6:	0011      	movs	r1, r2
 80020f8:	0018      	movs	r0, r3
 80020fa:	f000 fa43 	bl	8002584 <TIM_OC1_SetConfig>
      break;
 80020fe:	e01c      	b.n	800213a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68ba      	ldr	r2, [r7, #8]
 8002106:	0011      	movs	r1, r2
 8002108:	0018      	movs	r0, r3
 800210a:	f000 fac3 	bl	8002694 <TIM_OC2_SetConfig>
      break;
 800210e:	e014      	b.n	800213a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	68ba      	ldr	r2, [r7, #8]
 8002116:	0011      	movs	r1, r2
 8002118:	0018      	movs	r0, r3
 800211a:	f000 fb3f 	bl	800279c <TIM_OC3_SetConfig>
      break;
 800211e:	e00c      	b.n	800213a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68ba      	ldr	r2, [r7, #8]
 8002126:	0011      	movs	r1, r2
 8002128:	0018      	movs	r0, r3
 800212a:	f000 fbbd 	bl	80028a8 <TIM_OC4_SetConfig>
      break;
 800212e:	e004      	b.n	800213a <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8002130:	2317      	movs	r3, #23
 8002132:	18fb      	adds	r3, r7, r3
 8002134:	2201      	movs	r2, #1
 8002136:	701a      	strb	r2, [r3, #0]
      break;
 8002138:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	223c      	movs	r2, #60	; 0x3c
 800213e:	2100      	movs	r1, #0
 8002140:	5499      	strb	r1, [r3, r2]

  return status;
 8002142:	2317      	movs	r3, #23
 8002144:	18fb      	adds	r3, r7, r3
 8002146:	781b      	ldrb	r3, [r3, #0]
}
 8002148:	0018      	movs	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	b006      	add	sp, #24
 800214e:	bd80      	pop	{r7, pc}

08002150 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800215c:	2317      	movs	r3, #23
 800215e:	18fb      	adds	r3, r7, r3
 8002160:	2200      	movs	r2, #0
 8002162:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	223c      	movs	r2, #60	; 0x3c
 8002168:	5c9b      	ldrb	r3, [r3, r2]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d101      	bne.n	8002172 <HAL_TIM_PWM_ConfigChannel+0x22>
 800216e:	2302      	movs	r3, #2
 8002170:	e0ad      	b.n	80022ce <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	223c      	movs	r2, #60	; 0x3c
 8002176:	2101      	movs	r1, #1
 8002178:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b0c      	cmp	r3, #12
 800217e:	d100      	bne.n	8002182 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002180:	e076      	b.n	8002270 <HAL_TIM_PWM_ConfigChannel+0x120>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b0c      	cmp	r3, #12
 8002186:	d900      	bls.n	800218a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002188:	e095      	b.n	80022b6 <HAL_TIM_PWM_ConfigChannel+0x166>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2b08      	cmp	r3, #8
 800218e:	d04e      	beq.n	800222e <HAL_TIM_PWM_ConfigChannel+0xde>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2b08      	cmp	r3, #8
 8002194:	d900      	bls.n	8002198 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002196:	e08e      	b.n	80022b6 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_TIM_PWM_ConfigChannel+0x56>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2b04      	cmp	r3, #4
 80021a2:	d021      	beq.n	80021e8 <HAL_TIM_PWM_ConfigChannel+0x98>
 80021a4:	e087      	b.n	80022b6 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68ba      	ldr	r2, [r7, #8]
 80021ac:	0011      	movs	r1, r2
 80021ae:	0018      	movs	r0, r3
 80021b0:	f000 f9e8 	bl	8002584 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	699a      	ldr	r2, [r3, #24]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2108      	movs	r1, #8
 80021c0:	430a      	orrs	r2, r1
 80021c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	699a      	ldr	r2, [r3, #24]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2104      	movs	r1, #4
 80021d0:	438a      	bics	r2, r1
 80021d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6999      	ldr	r1, [r3, #24]
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	691a      	ldr	r2, [r3, #16]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	619a      	str	r2, [r3, #24]
      break;
 80021e6:	e06b      	b.n	80022c0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68ba      	ldr	r2, [r7, #8]
 80021ee:	0011      	movs	r1, r2
 80021f0:	0018      	movs	r0, r3
 80021f2:	f000 fa4f 	bl	8002694 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	699a      	ldr	r2, [r3, #24]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2180      	movs	r1, #128	; 0x80
 8002202:	0109      	lsls	r1, r1, #4
 8002204:	430a      	orrs	r2, r1
 8002206:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	699a      	ldr	r2, [r3, #24]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4931      	ldr	r1, [pc, #196]	; (80022d8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002214:	400a      	ands	r2, r1
 8002216:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6999      	ldr	r1, [r3, #24]
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	021a      	lsls	r2, r3, #8
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	430a      	orrs	r2, r1
 800222a:	619a      	str	r2, [r3, #24]
      break;
 800222c:	e048      	b.n	80022c0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68ba      	ldr	r2, [r7, #8]
 8002234:	0011      	movs	r1, r2
 8002236:	0018      	movs	r0, r3
 8002238:	f000 fab0 	bl	800279c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	69da      	ldr	r2, [r3, #28]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2108      	movs	r1, #8
 8002248:	430a      	orrs	r2, r1
 800224a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	69da      	ldr	r2, [r3, #28]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2104      	movs	r1, #4
 8002258:	438a      	bics	r2, r1
 800225a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	69d9      	ldr	r1, [r3, #28]
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	691a      	ldr	r2, [r3, #16]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	61da      	str	r2, [r3, #28]
      break;
 800226e:	e027      	b.n	80022c0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68ba      	ldr	r2, [r7, #8]
 8002276:	0011      	movs	r1, r2
 8002278:	0018      	movs	r0, r3
 800227a:	f000 fb15 	bl	80028a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	69da      	ldr	r2, [r3, #28]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2180      	movs	r1, #128	; 0x80
 800228a:	0109      	lsls	r1, r1, #4
 800228c:	430a      	orrs	r2, r1
 800228e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	69da      	ldr	r2, [r3, #28]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	490f      	ldr	r1, [pc, #60]	; (80022d8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800229c:	400a      	ands	r2, r1
 800229e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	69d9      	ldr	r1, [r3, #28]
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	021a      	lsls	r2, r3, #8
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	430a      	orrs	r2, r1
 80022b2:	61da      	str	r2, [r3, #28]
      break;
 80022b4:	e004      	b.n	80022c0 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80022b6:	2317      	movs	r3, #23
 80022b8:	18fb      	adds	r3, r7, r3
 80022ba:	2201      	movs	r2, #1
 80022bc:	701a      	strb	r2, [r3, #0]
      break;
 80022be:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	223c      	movs	r2, #60	; 0x3c
 80022c4:	2100      	movs	r1, #0
 80022c6:	5499      	strb	r1, [r3, r2]

  return status;
 80022c8:	2317      	movs	r3, #23
 80022ca:	18fb      	adds	r3, r7, r3
 80022cc:	781b      	ldrb	r3, [r3, #0]
}
 80022ce:	0018      	movs	r0, r3
 80022d0:	46bd      	mov	sp, r7
 80022d2:	b006      	add	sp, #24
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	46c0      	nop			; (mov r8, r8)
 80022d8:	fffffbff 	.word	0xfffffbff

080022dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022e6:	230f      	movs	r3, #15
 80022e8:	18fb      	adds	r3, r7, r3
 80022ea:	2200      	movs	r2, #0
 80022ec:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	223c      	movs	r2, #60	; 0x3c
 80022f2:	5c9b      	ldrb	r3, [r3, r2]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d101      	bne.n	80022fc <HAL_TIM_ConfigClockSource+0x20>
 80022f8:	2302      	movs	r3, #2
 80022fa:	e0bc      	b.n	8002476 <HAL_TIM_ConfigClockSource+0x19a>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	223c      	movs	r2, #60	; 0x3c
 8002300:	2101      	movs	r1, #1
 8002302:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	223d      	movs	r2, #61	; 0x3d
 8002308:	2102      	movs	r1, #2
 800230a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	2277      	movs	r2, #119	; 0x77
 8002318:	4393      	bics	r3, r2
 800231a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	4a58      	ldr	r2, [pc, #352]	; (8002480 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002320:	4013      	ands	r3, r2
 8002322:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68ba      	ldr	r2, [r7, #8]
 800232a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2280      	movs	r2, #128	; 0x80
 8002332:	0192      	lsls	r2, r2, #6
 8002334:	4293      	cmp	r3, r2
 8002336:	d040      	beq.n	80023ba <HAL_TIM_ConfigClockSource+0xde>
 8002338:	2280      	movs	r2, #128	; 0x80
 800233a:	0192      	lsls	r2, r2, #6
 800233c:	4293      	cmp	r3, r2
 800233e:	d900      	bls.n	8002342 <HAL_TIM_ConfigClockSource+0x66>
 8002340:	e088      	b.n	8002454 <HAL_TIM_ConfigClockSource+0x178>
 8002342:	2280      	movs	r2, #128	; 0x80
 8002344:	0152      	lsls	r2, r2, #5
 8002346:	4293      	cmp	r3, r2
 8002348:	d100      	bne.n	800234c <HAL_TIM_ConfigClockSource+0x70>
 800234a:	e088      	b.n	800245e <HAL_TIM_ConfigClockSource+0x182>
 800234c:	2280      	movs	r2, #128	; 0x80
 800234e:	0152      	lsls	r2, r2, #5
 8002350:	4293      	cmp	r3, r2
 8002352:	d900      	bls.n	8002356 <HAL_TIM_ConfigClockSource+0x7a>
 8002354:	e07e      	b.n	8002454 <HAL_TIM_ConfigClockSource+0x178>
 8002356:	2b70      	cmp	r3, #112	; 0x70
 8002358:	d018      	beq.n	800238c <HAL_TIM_ConfigClockSource+0xb0>
 800235a:	d900      	bls.n	800235e <HAL_TIM_ConfigClockSource+0x82>
 800235c:	e07a      	b.n	8002454 <HAL_TIM_ConfigClockSource+0x178>
 800235e:	2b60      	cmp	r3, #96	; 0x60
 8002360:	d04f      	beq.n	8002402 <HAL_TIM_ConfigClockSource+0x126>
 8002362:	d900      	bls.n	8002366 <HAL_TIM_ConfigClockSource+0x8a>
 8002364:	e076      	b.n	8002454 <HAL_TIM_ConfigClockSource+0x178>
 8002366:	2b50      	cmp	r3, #80	; 0x50
 8002368:	d03b      	beq.n	80023e2 <HAL_TIM_ConfigClockSource+0x106>
 800236a:	d900      	bls.n	800236e <HAL_TIM_ConfigClockSource+0x92>
 800236c:	e072      	b.n	8002454 <HAL_TIM_ConfigClockSource+0x178>
 800236e:	2b40      	cmp	r3, #64	; 0x40
 8002370:	d057      	beq.n	8002422 <HAL_TIM_ConfigClockSource+0x146>
 8002372:	d900      	bls.n	8002376 <HAL_TIM_ConfigClockSource+0x9a>
 8002374:	e06e      	b.n	8002454 <HAL_TIM_ConfigClockSource+0x178>
 8002376:	2b30      	cmp	r3, #48	; 0x30
 8002378:	d063      	beq.n	8002442 <HAL_TIM_ConfigClockSource+0x166>
 800237a:	d86b      	bhi.n	8002454 <HAL_TIM_ConfigClockSource+0x178>
 800237c:	2b20      	cmp	r3, #32
 800237e:	d060      	beq.n	8002442 <HAL_TIM_ConfigClockSource+0x166>
 8002380:	d868      	bhi.n	8002454 <HAL_TIM_ConfigClockSource+0x178>
 8002382:	2b00      	cmp	r3, #0
 8002384:	d05d      	beq.n	8002442 <HAL_TIM_ConfigClockSource+0x166>
 8002386:	2b10      	cmp	r3, #16
 8002388:	d05b      	beq.n	8002442 <HAL_TIM_ConfigClockSource+0x166>
 800238a:	e063      	b.n	8002454 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6818      	ldr	r0, [r3, #0]
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	6899      	ldr	r1, [r3, #8]
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	f000 fb68 	bl	8002a70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	2277      	movs	r2, #119	; 0x77
 80023ac:	4313      	orrs	r3, r2
 80023ae:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68ba      	ldr	r2, [r7, #8]
 80023b6:	609a      	str	r2, [r3, #8]
      break;
 80023b8:	e052      	b.n	8002460 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6818      	ldr	r0, [r3, #0]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	6899      	ldr	r1, [r3, #8]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	f000 fb51 	bl	8002a70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2180      	movs	r1, #128	; 0x80
 80023da:	01c9      	lsls	r1, r1, #7
 80023dc:	430a      	orrs	r2, r1
 80023de:	609a      	str	r2, [r3, #8]
      break;
 80023e0:	e03e      	b.n	8002460 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6818      	ldr	r0, [r3, #0]
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	6859      	ldr	r1, [r3, #4]
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	001a      	movs	r2, r3
 80023f0:	f000 fac4 	bl	800297c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2150      	movs	r1, #80	; 0x50
 80023fa:	0018      	movs	r0, r3
 80023fc:	f000 fb1e 	bl	8002a3c <TIM_ITRx_SetConfig>
      break;
 8002400:	e02e      	b.n	8002460 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6818      	ldr	r0, [r3, #0]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	6859      	ldr	r1, [r3, #4]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	001a      	movs	r2, r3
 8002410:	f000 fae2 	bl	80029d8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2160      	movs	r1, #96	; 0x60
 800241a:	0018      	movs	r0, r3
 800241c:	f000 fb0e 	bl	8002a3c <TIM_ITRx_SetConfig>
      break;
 8002420:	e01e      	b.n	8002460 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6818      	ldr	r0, [r3, #0]
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	6859      	ldr	r1, [r3, #4]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	001a      	movs	r2, r3
 8002430:	f000 faa4 	bl	800297c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2140      	movs	r1, #64	; 0x40
 800243a:	0018      	movs	r0, r3
 800243c:	f000 fafe 	bl	8002a3c <TIM_ITRx_SetConfig>
      break;
 8002440:	e00e      	b.n	8002460 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	0019      	movs	r1, r3
 800244c:	0010      	movs	r0, r2
 800244e:	f000 faf5 	bl	8002a3c <TIM_ITRx_SetConfig>
      break;
 8002452:	e005      	b.n	8002460 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002454:	230f      	movs	r3, #15
 8002456:	18fb      	adds	r3, r7, r3
 8002458:	2201      	movs	r2, #1
 800245a:	701a      	strb	r2, [r3, #0]
      break;
 800245c:	e000      	b.n	8002460 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800245e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	223d      	movs	r2, #61	; 0x3d
 8002464:	2101      	movs	r1, #1
 8002466:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	223c      	movs	r2, #60	; 0x3c
 800246c:	2100      	movs	r1, #0
 800246e:	5499      	strb	r1, [r3, r2]

  return status;
 8002470:	230f      	movs	r3, #15
 8002472:	18fb      	adds	r3, r7, r3
 8002474:	781b      	ldrb	r3, [r3, #0]
}
 8002476:	0018      	movs	r0, r3
 8002478:	46bd      	mov	sp, r7
 800247a:	b004      	add	sp, #16
 800247c:	bd80      	pop	{r7, pc}
 800247e:	46c0      	nop			; (mov r8, r8)
 8002480:	ffff00ff 	.word	0xffff00ff

08002484 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a34      	ldr	r2, [pc, #208]	; (8002568 <TIM_Base_SetConfig+0xe4>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d008      	beq.n	80024ae <TIM_Base_SetConfig+0x2a>
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	2380      	movs	r3, #128	; 0x80
 80024a0:	05db      	lsls	r3, r3, #23
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d003      	beq.n	80024ae <TIM_Base_SetConfig+0x2a>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a30      	ldr	r2, [pc, #192]	; (800256c <TIM_Base_SetConfig+0xe8>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d108      	bne.n	80024c0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2270      	movs	r2, #112	; 0x70
 80024b2:	4393      	bics	r3, r2
 80024b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	4313      	orrs	r3, r2
 80024be:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4a29      	ldr	r2, [pc, #164]	; (8002568 <TIM_Base_SetConfig+0xe4>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d018      	beq.n	80024fa <TIM_Base_SetConfig+0x76>
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	2380      	movs	r3, #128	; 0x80
 80024cc:	05db      	lsls	r3, r3, #23
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d013      	beq.n	80024fa <TIM_Base_SetConfig+0x76>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a25      	ldr	r2, [pc, #148]	; (800256c <TIM_Base_SetConfig+0xe8>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d00f      	beq.n	80024fa <TIM_Base_SetConfig+0x76>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a24      	ldr	r2, [pc, #144]	; (8002570 <TIM_Base_SetConfig+0xec>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d00b      	beq.n	80024fa <TIM_Base_SetConfig+0x76>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a23      	ldr	r2, [pc, #140]	; (8002574 <TIM_Base_SetConfig+0xf0>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d007      	beq.n	80024fa <TIM_Base_SetConfig+0x76>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a22      	ldr	r2, [pc, #136]	; (8002578 <TIM_Base_SetConfig+0xf4>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d003      	beq.n	80024fa <TIM_Base_SetConfig+0x76>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a21      	ldr	r2, [pc, #132]	; (800257c <TIM_Base_SetConfig+0xf8>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d108      	bne.n	800250c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	4a20      	ldr	r2, [pc, #128]	; (8002580 <TIM_Base_SetConfig+0xfc>)
 80024fe:	4013      	ands	r3, r2
 8002500:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	4313      	orrs	r3, r2
 800250a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2280      	movs	r2, #128	; 0x80
 8002510:	4393      	bics	r3, r2
 8002512:	001a      	movs	r2, r3
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	4313      	orrs	r3, r2
 800251a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	689a      	ldr	r2, [r3, #8]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a0c      	ldr	r2, [pc, #48]	; (8002568 <TIM_Base_SetConfig+0xe4>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d00b      	beq.n	8002552 <TIM_Base_SetConfig+0xce>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a0d      	ldr	r2, [pc, #52]	; (8002574 <TIM_Base_SetConfig+0xf0>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d007      	beq.n	8002552 <TIM_Base_SetConfig+0xce>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a0c      	ldr	r2, [pc, #48]	; (8002578 <TIM_Base_SetConfig+0xf4>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d003      	beq.n	8002552 <TIM_Base_SetConfig+0xce>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a0b      	ldr	r2, [pc, #44]	; (800257c <TIM_Base_SetConfig+0xf8>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d103      	bne.n	800255a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	691a      	ldr	r2, [r3, #16]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2201      	movs	r2, #1
 800255e:	615a      	str	r2, [r3, #20]
}
 8002560:	46c0      	nop			; (mov r8, r8)
 8002562:	46bd      	mov	sp, r7
 8002564:	b004      	add	sp, #16
 8002566:	bd80      	pop	{r7, pc}
 8002568:	40012c00 	.word	0x40012c00
 800256c:	40000400 	.word	0x40000400
 8002570:	40002000 	.word	0x40002000
 8002574:	40014000 	.word	0x40014000
 8002578:	40014400 	.word	0x40014400
 800257c:	40014800 	.word	0x40014800
 8002580:	fffffcff 	.word	0xfffffcff

08002584 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	2201      	movs	r2, #1
 8002594:	4393      	bics	r3, r2
 8002596:	001a      	movs	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a1b      	ldr	r3, [r3, #32]
 80025a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2270      	movs	r2, #112	; 0x70
 80025b2:	4393      	bics	r3, r2
 80025b4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2203      	movs	r2, #3
 80025ba:	4393      	bics	r3, r2
 80025bc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	2202      	movs	r2, #2
 80025cc:	4393      	bics	r3, r2
 80025ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a27      	ldr	r2, [pc, #156]	; (800267c <TIM_OC1_SetConfig+0xf8>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d00b      	beq.n	80025fa <TIM_OC1_SetConfig+0x76>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a26      	ldr	r2, [pc, #152]	; (8002680 <TIM_OC1_SetConfig+0xfc>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d007      	beq.n	80025fa <TIM_OC1_SetConfig+0x76>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a25      	ldr	r2, [pc, #148]	; (8002684 <TIM_OC1_SetConfig+0x100>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d003      	beq.n	80025fa <TIM_OC1_SetConfig+0x76>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a24      	ldr	r2, [pc, #144]	; (8002688 <TIM_OC1_SetConfig+0x104>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d10c      	bne.n	8002614 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	2208      	movs	r2, #8
 80025fe:	4393      	bics	r3, r2
 8002600:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	4313      	orrs	r3, r2
 800260a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	2204      	movs	r2, #4
 8002610:	4393      	bics	r3, r2
 8002612:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a19      	ldr	r2, [pc, #100]	; (800267c <TIM_OC1_SetConfig+0xf8>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d00b      	beq.n	8002634 <TIM_OC1_SetConfig+0xb0>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4a18      	ldr	r2, [pc, #96]	; (8002680 <TIM_OC1_SetConfig+0xfc>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d007      	beq.n	8002634 <TIM_OC1_SetConfig+0xb0>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4a17      	ldr	r2, [pc, #92]	; (8002684 <TIM_OC1_SetConfig+0x100>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d003      	beq.n	8002634 <TIM_OC1_SetConfig+0xb0>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a16      	ldr	r2, [pc, #88]	; (8002688 <TIM_OC1_SetConfig+0x104>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d111      	bne.n	8002658 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	4a15      	ldr	r2, [pc, #84]	; (800268c <TIM_OC1_SetConfig+0x108>)
 8002638:	4013      	ands	r3, r2
 800263a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	4a14      	ldr	r2, [pc, #80]	; (8002690 <TIM_OC1_SetConfig+0x10c>)
 8002640:	4013      	ands	r3, r2
 8002642:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	4313      	orrs	r3, r2
 800264c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	4313      	orrs	r3, r2
 8002656:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	621a      	str	r2, [r3, #32]
}
 8002672:	46c0      	nop			; (mov r8, r8)
 8002674:	46bd      	mov	sp, r7
 8002676:	b006      	add	sp, #24
 8002678:	bd80      	pop	{r7, pc}
 800267a:	46c0      	nop			; (mov r8, r8)
 800267c:	40012c00 	.word	0x40012c00
 8002680:	40014000 	.word	0x40014000
 8002684:	40014400 	.word	0x40014400
 8002688:	40014800 	.word	0x40014800
 800268c:	fffffeff 	.word	0xfffffeff
 8002690:	fffffdff 	.word	0xfffffdff

08002694 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	2210      	movs	r2, #16
 80026a4:	4393      	bics	r3, r2
 80026a6:	001a      	movs	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	4a2e      	ldr	r2, [pc, #184]	; (800277c <TIM_OC2_SetConfig+0xe8>)
 80026c2:	4013      	ands	r3, r2
 80026c4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	4a2d      	ldr	r2, [pc, #180]	; (8002780 <TIM_OC2_SetConfig+0xec>)
 80026ca:	4013      	ands	r3, r2
 80026cc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	021b      	lsls	r3, r3, #8
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	2220      	movs	r2, #32
 80026de:	4393      	bics	r3, r2
 80026e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	011b      	lsls	r3, r3, #4
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a24      	ldr	r2, [pc, #144]	; (8002784 <TIM_OC2_SetConfig+0xf0>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d10d      	bne.n	8002712 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	2280      	movs	r2, #128	; 0x80
 80026fa:	4393      	bics	r3, r2
 80026fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	011b      	lsls	r3, r3, #4
 8002704:	697a      	ldr	r2, [r7, #20]
 8002706:	4313      	orrs	r3, r2
 8002708:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	2240      	movs	r2, #64	; 0x40
 800270e:	4393      	bics	r3, r2
 8002710:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a1b      	ldr	r2, [pc, #108]	; (8002784 <TIM_OC2_SetConfig+0xf0>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d00b      	beq.n	8002732 <TIM_OC2_SetConfig+0x9e>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a1a      	ldr	r2, [pc, #104]	; (8002788 <TIM_OC2_SetConfig+0xf4>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d007      	beq.n	8002732 <TIM_OC2_SetConfig+0x9e>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a19      	ldr	r2, [pc, #100]	; (800278c <TIM_OC2_SetConfig+0xf8>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d003      	beq.n	8002732 <TIM_OC2_SetConfig+0x9e>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a18      	ldr	r2, [pc, #96]	; (8002790 <TIM_OC2_SetConfig+0xfc>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d113      	bne.n	800275a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	4a17      	ldr	r2, [pc, #92]	; (8002794 <TIM_OC2_SetConfig+0x100>)
 8002736:	4013      	ands	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	4a16      	ldr	r2, [pc, #88]	; (8002798 <TIM_OC2_SetConfig+0x104>)
 800273e:	4013      	ands	r3, r2
 8002740:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	4313      	orrs	r3, r2
 800274c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	4313      	orrs	r3, r2
 8002758:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	621a      	str	r2, [r3, #32]
}
 8002774:	46c0      	nop			; (mov r8, r8)
 8002776:	46bd      	mov	sp, r7
 8002778:	b006      	add	sp, #24
 800277a:	bd80      	pop	{r7, pc}
 800277c:	ffff8fff 	.word	0xffff8fff
 8002780:	fffffcff 	.word	0xfffffcff
 8002784:	40012c00 	.word	0x40012c00
 8002788:	40014000 	.word	0x40014000
 800278c:	40014400 	.word	0x40014400
 8002790:	40014800 	.word	0x40014800
 8002794:	fffffbff 	.word	0xfffffbff
 8002798:	fffff7ff 	.word	0xfffff7ff

0800279c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	4a35      	ldr	r2, [pc, #212]	; (8002880 <TIM_OC3_SetConfig+0xe4>)
 80027ac:	401a      	ands	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	69db      	ldr	r3, [r3, #28]
 80027c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2270      	movs	r2, #112	; 0x70
 80027c8:	4393      	bics	r3, r2
 80027ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2203      	movs	r2, #3
 80027d0:	4393      	bics	r3, r2
 80027d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	4313      	orrs	r3, r2
 80027dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	4a28      	ldr	r2, [pc, #160]	; (8002884 <TIM_OC3_SetConfig+0xe8>)
 80027e2:	4013      	ands	r3, r2
 80027e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	021b      	lsls	r3, r3, #8
 80027ec:	697a      	ldr	r2, [r7, #20]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a24      	ldr	r2, [pc, #144]	; (8002888 <TIM_OC3_SetConfig+0xec>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d10d      	bne.n	8002816 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	4a23      	ldr	r2, [pc, #140]	; (800288c <TIM_OC3_SetConfig+0xf0>)
 80027fe:	4013      	ands	r3, r2
 8002800:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	021b      	lsls	r3, r3, #8
 8002808:	697a      	ldr	r2, [r7, #20]
 800280a:	4313      	orrs	r3, r2
 800280c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	4a1f      	ldr	r2, [pc, #124]	; (8002890 <TIM_OC3_SetConfig+0xf4>)
 8002812:	4013      	ands	r3, r2
 8002814:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a1b      	ldr	r2, [pc, #108]	; (8002888 <TIM_OC3_SetConfig+0xec>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d00b      	beq.n	8002836 <TIM_OC3_SetConfig+0x9a>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a1c      	ldr	r2, [pc, #112]	; (8002894 <TIM_OC3_SetConfig+0xf8>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d007      	beq.n	8002836 <TIM_OC3_SetConfig+0x9a>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a1b      	ldr	r2, [pc, #108]	; (8002898 <TIM_OC3_SetConfig+0xfc>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d003      	beq.n	8002836 <TIM_OC3_SetConfig+0x9a>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a1a      	ldr	r2, [pc, #104]	; (800289c <TIM_OC3_SetConfig+0x100>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d113      	bne.n	800285e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	4a19      	ldr	r2, [pc, #100]	; (80028a0 <TIM_OC3_SetConfig+0x104>)
 800283a:	4013      	ands	r3, r2
 800283c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	4a18      	ldr	r2, [pc, #96]	; (80028a4 <TIM_OC3_SetConfig+0x108>)
 8002842:	4013      	ands	r3, r2
 8002844:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	011b      	lsls	r3, r3, #4
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	4313      	orrs	r3, r2
 8002850:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	011b      	lsls	r3, r3, #4
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	4313      	orrs	r3, r2
 800285c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	697a      	ldr	r2, [r7, #20]
 8002876:	621a      	str	r2, [r3, #32]
}
 8002878:	46c0      	nop			; (mov r8, r8)
 800287a:	46bd      	mov	sp, r7
 800287c:	b006      	add	sp, #24
 800287e:	bd80      	pop	{r7, pc}
 8002880:	fffffeff 	.word	0xfffffeff
 8002884:	fffffdff 	.word	0xfffffdff
 8002888:	40012c00 	.word	0x40012c00
 800288c:	fffff7ff 	.word	0xfffff7ff
 8002890:	fffffbff 	.word	0xfffffbff
 8002894:	40014000 	.word	0x40014000
 8002898:	40014400 	.word	0x40014400
 800289c:	40014800 	.word	0x40014800
 80028a0:	ffffefff 	.word	0xffffefff
 80028a4:	ffffdfff 	.word	0xffffdfff

080028a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	4a28      	ldr	r2, [pc, #160]	; (8002958 <TIM_OC4_SetConfig+0xb0>)
 80028b8:	401a      	ands	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	4a22      	ldr	r2, [pc, #136]	; (800295c <TIM_OC4_SetConfig+0xb4>)
 80028d4:	4013      	ands	r3, r2
 80028d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4a21      	ldr	r2, [pc, #132]	; (8002960 <TIM_OC4_SetConfig+0xb8>)
 80028dc:	4013      	ands	r3, r2
 80028de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	021b      	lsls	r3, r3, #8
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	4a1d      	ldr	r2, [pc, #116]	; (8002964 <TIM_OC4_SetConfig+0xbc>)
 80028f0:	4013      	ands	r3, r2
 80028f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	031b      	lsls	r3, r3, #12
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a19      	ldr	r2, [pc, #100]	; (8002968 <TIM_OC4_SetConfig+0xc0>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d00b      	beq.n	8002920 <TIM_OC4_SetConfig+0x78>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a18      	ldr	r2, [pc, #96]	; (800296c <TIM_OC4_SetConfig+0xc4>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d007      	beq.n	8002920 <TIM_OC4_SetConfig+0x78>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a17      	ldr	r2, [pc, #92]	; (8002970 <TIM_OC4_SetConfig+0xc8>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d003      	beq.n	8002920 <TIM_OC4_SetConfig+0x78>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a16      	ldr	r2, [pc, #88]	; (8002974 <TIM_OC4_SetConfig+0xcc>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d109      	bne.n	8002934 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	4a15      	ldr	r2, [pc, #84]	; (8002978 <TIM_OC4_SetConfig+0xd0>)
 8002924:	4013      	ands	r3, r2
 8002926:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	019b      	lsls	r3, r3, #6
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	4313      	orrs	r3, r2
 8002932:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	621a      	str	r2, [r3, #32]
}
 800294e:	46c0      	nop			; (mov r8, r8)
 8002950:	46bd      	mov	sp, r7
 8002952:	b006      	add	sp, #24
 8002954:	bd80      	pop	{r7, pc}
 8002956:	46c0      	nop			; (mov r8, r8)
 8002958:	ffffefff 	.word	0xffffefff
 800295c:	ffff8fff 	.word	0xffff8fff
 8002960:	fffffcff 	.word	0xfffffcff
 8002964:	ffffdfff 	.word	0xffffdfff
 8002968:	40012c00 	.word	0x40012c00
 800296c:	40014000 	.word	0x40014000
 8002970:	40014400 	.word	0x40014400
 8002974:	40014800 	.word	0x40014800
 8002978:	ffffbfff 	.word	0xffffbfff

0800297c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	2201      	movs	r2, #1
 8002994:	4393      	bics	r3, r2
 8002996:	001a      	movs	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	22f0      	movs	r2, #240	; 0xf0
 80029a6:	4393      	bics	r3, r2
 80029a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	011b      	lsls	r3, r3, #4
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	220a      	movs	r2, #10
 80029b8:	4393      	bics	r3, r2
 80029ba:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029bc:	697a      	ldr	r2, [r7, #20]
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	621a      	str	r2, [r3, #32]
}
 80029d0:	46c0      	nop			; (mov r8, r8)
 80029d2:	46bd      	mov	sp, r7
 80029d4:	b006      	add	sp, #24
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	2210      	movs	r2, #16
 80029ea:	4393      	bics	r3, r2
 80029ec:	001a      	movs	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6a1b      	ldr	r3, [r3, #32]
 80029fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	4a0d      	ldr	r2, [pc, #52]	; (8002a38 <TIM_TI2_ConfigInputStage+0x60>)
 8002a02:	4013      	ands	r3, r2
 8002a04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	031b      	lsls	r3, r3, #12
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	22a0      	movs	r2, #160	; 0xa0
 8002a14:	4393      	bics	r3, r2
 8002a16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	011b      	lsls	r3, r3, #4
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	621a      	str	r2, [r3, #32]
}
 8002a2e:	46c0      	nop			; (mov r8, r8)
 8002a30:	46bd      	mov	sp, r7
 8002a32:	b006      	add	sp, #24
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	46c0      	nop			; (mov r8, r8)
 8002a38:	ffff0fff 	.word	0xffff0fff

08002a3c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2270      	movs	r2, #112	; 0x70
 8002a50:	4393      	bics	r3, r2
 8002a52:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	2207      	movs	r2, #7
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	609a      	str	r2, [r3, #8]
}
 8002a66:	46c0      	nop			; (mov r8, r8)
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	b004      	add	sp, #16
 8002a6c:	bd80      	pop	{r7, pc}
	...

08002a70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
 8002a7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	4a09      	ldr	r2, [pc, #36]	; (8002aac <TIM_ETR_SetConfig+0x3c>)
 8002a88:	4013      	ands	r3, r2
 8002a8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	021a      	lsls	r2, r3, #8
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	431a      	orrs	r2, r3
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	697a      	ldr	r2, [r7, #20]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	609a      	str	r2, [r3, #8]
}
 8002aa4:	46c0      	nop			; (mov r8, r8)
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	b006      	add	sp, #24
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	ffff00ff 	.word	0xffff00ff

08002ab0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	221f      	movs	r2, #31
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	409a      	lsls	r2, r3
 8002ac6:	0013      	movs	r3, r2
 8002ac8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	43d2      	mvns	r2, r2
 8002ad2:	401a      	ands	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6a1a      	ldr	r2, [r3, #32]
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	211f      	movs	r1, #31
 8002ae0:	400b      	ands	r3, r1
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	4099      	lsls	r1, r3
 8002ae6:	000b      	movs	r3, r1
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	621a      	str	r2, [r3, #32]
}
 8002aee:	46c0      	nop			; (mov r8, r8)
 8002af0:	46bd      	mov	sp, r7
 8002af2:	b006      	add	sp, #24
 8002af4:	bd80      	pop	{r7, pc}
	...

08002af8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	223c      	movs	r2, #60	; 0x3c
 8002b06:	5c9b      	ldrb	r3, [r3, r2]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d101      	bne.n	8002b10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	e047      	b.n	8002ba0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	223c      	movs	r2, #60	; 0x3c
 8002b14:	2101      	movs	r1, #1
 8002b16:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	223d      	movs	r2, #61	; 0x3d
 8002b1c:	2102      	movs	r1, #2
 8002b1e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2270      	movs	r2, #112	; 0x70
 8002b34:	4393      	bics	r3, r2
 8002b36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a16      	ldr	r2, [pc, #88]	; (8002ba8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d00f      	beq.n	8002b74 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	2380      	movs	r3, #128	; 0x80
 8002b5a:	05db      	lsls	r3, r3, #23
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d009      	beq.n	8002b74 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a11      	ldr	r2, [pc, #68]	; (8002bac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d004      	beq.n	8002b74 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a10      	ldr	r2, [pc, #64]	; (8002bb0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d10c      	bne.n	8002b8e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	2280      	movs	r2, #128	; 0x80
 8002b78:	4393      	bics	r3, r2
 8002b7a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	68ba      	ldr	r2, [r7, #8]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68ba      	ldr	r2, [r7, #8]
 8002b8c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	223d      	movs	r2, #61	; 0x3d
 8002b92:	2101      	movs	r1, #1
 8002b94:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	223c      	movs	r2, #60	; 0x3c
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	b004      	add	sp, #16
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	40012c00 	.word	0x40012c00
 8002bac:	40000400 	.word	0x40000400
 8002bb0:	40014000 	.word	0x40014000

08002bb4 <__libc_init_array>:
 8002bb4:	b570      	push	{r4, r5, r6, lr}
 8002bb6:	2600      	movs	r6, #0
 8002bb8:	4d0c      	ldr	r5, [pc, #48]	; (8002bec <__libc_init_array+0x38>)
 8002bba:	4c0d      	ldr	r4, [pc, #52]	; (8002bf0 <__libc_init_array+0x3c>)
 8002bbc:	1b64      	subs	r4, r4, r5
 8002bbe:	10a4      	asrs	r4, r4, #2
 8002bc0:	42a6      	cmp	r6, r4
 8002bc2:	d109      	bne.n	8002bd8 <__libc_init_array+0x24>
 8002bc4:	2600      	movs	r6, #0
 8002bc6:	f000 f821 	bl	8002c0c <_init>
 8002bca:	4d0a      	ldr	r5, [pc, #40]	; (8002bf4 <__libc_init_array+0x40>)
 8002bcc:	4c0a      	ldr	r4, [pc, #40]	; (8002bf8 <__libc_init_array+0x44>)
 8002bce:	1b64      	subs	r4, r4, r5
 8002bd0:	10a4      	asrs	r4, r4, #2
 8002bd2:	42a6      	cmp	r6, r4
 8002bd4:	d105      	bne.n	8002be2 <__libc_init_array+0x2e>
 8002bd6:	bd70      	pop	{r4, r5, r6, pc}
 8002bd8:	00b3      	lsls	r3, r6, #2
 8002bda:	58eb      	ldr	r3, [r5, r3]
 8002bdc:	4798      	blx	r3
 8002bde:	3601      	adds	r6, #1
 8002be0:	e7ee      	b.n	8002bc0 <__libc_init_array+0xc>
 8002be2:	00b3      	lsls	r3, r6, #2
 8002be4:	58eb      	ldr	r3, [r5, r3]
 8002be6:	4798      	blx	r3
 8002be8:	3601      	adds	r6, #1
 8002bea:	e7f2      	b.n	8002bd2 <__libc_init_array+0x1e>
 8002bec:	08002c54 	.word	0x08002c54
 8002bf0:	08002c54 	.word	0x08002c54
 8002bf4:	08002c54 	.word	0x08002c54
 8002bf8:	08002c58 	.word	0x08002c58

08002bfc <memset>:
 8002bfc:	0003      	movs	r3, r0
 8002bfe:	1882      	adds	r2, r0, r2
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d100      	bne.n	8002c06 <memset+0xa>
 8002c04:	4770      	bx	lr
 8002c06:	7019      	strb	r1, [r3, #0]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	e7f9      	b.n	8002c00 <memset+0x4>

08002c0c <_init>:
 8002c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c0e:	46c0      	nop			; (mov r8, r8)
 8002c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c12:	bc08      	pop	{r3}
 8002c14:	469e      	mov	lr, r3
 8002c16:	4770      	bx	lr

08002c18 <_fini>:
 8002c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c1a:	46c0      	nop			; (mov r8, r8)
 8002c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c1e:	bc08      	pop	{r3}
 8002c20:	469e      	mov	lr, r3
 8002c22:	4770      	bx	lr
